documents,predictions,0,1,2
"Why we build. We build because we see potential. Because we see problems. Because we want to see what happens next. We build because we are changing the world. And that can’t be taken lightly. Because the opportunity to change things for the better comes with the risk of making it worse. We build because this last year was a hard… Facebook…. Facebook under fire… the FTC opening… we saw what happens when things go wrong. Privacy, security, data ownership… and learn how important it is to get it right.

We build because the most difficult problems require us to solve them together. Because together is where progress can happen. Where support is found. Where we understand overthrow and fall in much. Because together is where our world gets better. That’s why we keep building. Because this journey is still one percent finished. … – Video concludes.]

Mark Zuckerberg – CEO, Facebook

Hi everyone. Welcome to F8!

This has been an intense year. I can’t believe we’re only four months in.

Before we get started, I just want to take a moment to say how much it means to us that you’re all here with us today. Now I know that it hasn’t been easy being a developer these last couple of months, and that’s probably an understatement. But what I can assure you is that we’re hard at work making sure that people don’t misuse this platform so you can all keep building things that people love. And today I’m happy to share that we are reopening our previews so you can all keep moving forward.

Now I am looking out, and I see a lot of people that we’ve worked with for a long time here, and a lot of people have traveled to be here from around the world and a lot of you are building great tools that help people connect in new ways. And I just want to take a moment upfront to thank each and every one of you for all that you are doing to help bring the world closer together. Thank you so much.

Now we’re all here because we’re optimistic about the future. We have real challenges to address, but we have to keep that sense of optimism too. And what I’ve learned this year is that we need to take a broader view of our responsibility; it’s not enough to just build powerful tools. We need to make sure that they’re used for good and we will.

And we’re idealistic and we’ve always focused on all the good that connecting people can bring and there’s a lot of it. Just since the last F8, we’ve seen the me-too movement on the march for our lives organized at least part on Facebook. We’ve seen people come together after Hurricane Harvey to raise more than $20 million for relief, and we’ve seen more than 80 million small businesses use these tools to grow and create jobs.

But we’ve also seen people try to use these tools for harm and that goes for Russia interfering in elections for fake news, for hate speech, and for data privacy issues.

So we’re investing a lot to address these issues and keep people safe, and I’m going to go through all that head on in just a minute, because I think it’s important that everyone here knows exactly what we’re doing to address them. But we also have a responsibility to move forward on everything else that our community expects from us, too. To keep building services that help us connect in meaningful new ways as well.

You know the hardest decision that I made this year wasn’t to invest so much in safety and security. That decision was easy, and I just went to the people running those teams and asked them how much we could possibly invest productively and then to transfer all those people to them. The hard part was figuring out a way to move forward on everything else that we need to do, too.

You know, recently I was having a conversation about what Facebook stands for. What is that basic idea that the world would lose if Facebook went away.

When I was getting started with Facebook back in 2004, what struck me was: you can go online at that time and find almost anything, or you could look up any information; you could fund new product; you could read news; you could download movies and music. You could find almost anything except for the thing that matters to us most: people.

So I started building a service to do that: to put people first and at the center of our experience with technology, because our relationships are what matters most to us. And that’s how we find meaning and how we make sense of our place in the world.

And we’re not the only ones to build a communication service, but we are the ones who do it again and again in all of the different ways that people want to interact online. This is our DNA and we have built and grown service after service that put people and our connections and our relationships at the center of the experience.

And we’ve come a long way. But when I look out today it still surprises me how little of the technology that our industry produces is designed to put people first. Our phones are still designed around apps and it’s not what we think. And I believe that we need to design technology to help bring people closer together, and I believe that that’s not going to happen on its own. And so to do that, part of the solution — just part of it — is that one day more of our technology is going to need to focus on people and our relationships.

Now there’s no guarantee that we get this right. This is hard stuff. We will make mistakes and they will have consequences, and we will need to fix them. But what I can guarantee is that if we don’t work on this, the world isn’t moving in this direction by itself. So that is what we are all here to do. And that’s what I want to talk about today.

I want to start by talking about keeping people safe and then we’re going to discuss all the things we’re doing to keep building services to help us connect in meaningful new ways. And I want to start today by talking about protecting something that is really incredibly important to all of us and that is the integrity of our elections.

In 2016 we were slow to identify Russian interference. We expected more traditional cyber-attacks like phishing and malware and hacking and we identified those and notified the right people. But we didn’t expect these coordinated information operations and large networks of fake accounts that we’re now aware of.

So I sat down with our teams after this and we said we will never be unprepared for this again. And since then there have been important elections like the French presidential election, the German elections, the Alabama Senate special election last year and we’ve been more prepared. We deployed new AI tools that successfully identified and took down tens of thousands of fake accounts before they could do anything.

We’ve traced the fake account network back to Russia and taken down their network. We’re doing more. We’re requiring everyone running political and issue ads or running large pages to be verified with a government ID. We’re making ads more transparent, so now you’re going to see who is running a political ad, who they’re targeting, how much they’re spending, and most importantly what other messages they’re sending to different people. That is a higher standard of transparency than TV ads and print ads or anything else you will find on the Internet.

By the end of this year we will have 20,000 people working on security and content review at Facebook. And we’ve created an independent election research commission, so independent academics can give us ideas and hold us accountable to make sure that these systems work. And this is an important election year, not only the big U.S. midterms that are coming up but there are major elections around the world, in Mexico and Brazil. There are elections coming up in India and Pakistan and more, and we are focused on this.

Beyond elections, we are focused on fighting fake news more broadly and there are really three categories that we’re focused on here. The first category is just spam. These are people who aren’t ideological; they just want to make money; hocking the most sensational junk that they can come up with to get you all to click on it. These are the people in the ‘90s would have been sending your Viagra emails. And the playbook here is pretty simple, right? It’s to take down their ads on their site so they can’t make money, build tools to detect and reduce the distribution to remove their economic incentive, and then eventually they just go do something else to go make money, and you know we’re starting to see this.

The second category is fake accounts. And the idea here is less focused on looking at the content specifically and more focused on trying to find bad actors and getting them off the network. So some of this is nation states who are politically motivated like we talked about before. But all of this we’re fighting in the same way with AI tools with thousands of content reviewers and verifying people who are running large pages and running sensitive ads.

Now the third category is people — real people who are just sharing provably false hoaxes. And the playbook here is building tools to get better at flagging content that is going viral, so fact checkers can look at it so we can show it less. And for the people who do see it to make sure that they see related articles that are more accurate that put this in context that people can understand what’s really going on.

So a lot of the work over the last year and a half has been bringing on more and more fact-checking partners all around the world in different countries who speak all of the different languages that we need to cover. So there’s a lot more here to do, but these are the three basic categories and we’re making good progress on all of them.


I also want to talk about data privacy. And what happened with Cambridge Analytica was a major breach of trust. An app developer took data that people had shared with them and sold it. So we need to make sure that this never happens again, so we’re taking a number of steps here.

First, as you all know we’re restricting the data that developers will be able to request from people. Now the good news here is that back in 2014, we already made a major change to how the platform works to prevent people from sharing a lot of their friends’ information. So this specific situation could not happen again today. And since then we’ve taken a lot more steps as well to restrict other data. But there are still more steps that we’re taking to do this even further with groups and events and the data available through log-in to prevent future issues that might come up.

Second, we need to make sure that we find any other bad apps that are out there. So we’re currently in the process of investigating every single app that had access to a large amount of people’s information before we made these big changes in 2014. And if we find anything suspicious, we’re going to bring in independent auditors to do a full audit and if any data was misused, then we will ban that developer and we will tell anyone whose data was affected.

We’ve also started putting a tool in front of everyone that shows them all of the apps that they are using and lets them easily remove access to the ones that they no longer want to use. And with the GDPR coming up in Europe, we’re asking everyone around the world, not just in Europe, to review your privacy controls.

So to all the developers who are here, I know that the vast majority of you are focused on building good things. We need to take these steps to make sure that everyone on our platform is focused on building good things. And I believe that putting in these stronger protections now will give you more ability to keep building for the long term.

Now I also want to share one new thing that we’re working on with data privacy, and we have a lot more updates like this coming. But this is an example of the kind of thing that we are working on. In your web browser, you today have a simple way to clear cookies and clear browsing history. And the idea is that a lot of sites need this data to work; you need cookies, but you should have the ability to go in and clear your history at any point you want. So we’re working on a version of this for Facebook, too. It’s a simple control where you can clear your browsing history; what you’ve clicked on, the websites you visited and so on. And we’re going to call it clear history.

And we’re starting with something that a lot of people have asked about recently and that’s the information that we get from websites and apps who are using Facebook’s advertising and analytics tools, so you can — you’re going to able to use this tool to see the information about the apps and websites you’ve interacted with; you’ll be able to clear all this information from your account and you’ll even be able to turn it off having this information stored with your account going forward.

Now to be clear, when you clear your cookies in a browser it can make parts of your experience worse, or you may have to sign back into dozens of websites; you may have to reconfigure some things and the same is going to be true here. Or your Facebook won’t be quite as good while it relearns your preferences. But after going through our systems this is the kind of control that we think that people should have, so we’re building this and we’re going have a lot more like this to talk about, too.

So overall we’re going to keep investing heavily in security and privacy. But security isn’t a problem that you ever fully solve. This is an arms race and we’re going to be working to stay ahead of our adversaries forever. So while we’re doing this, we also have a responsibility to keep building services that bring people together in new ways.

If you’ve been to F8 before, you’ve seen this. This is our ten-year product roadmap and it sets out all the different areas that we’re working on and when we expect these ecosystems to be fully developed. And across all our products our goal is to give everyone in the world the power to share anything they want with anyone anywhere: to build stronger relationships, to break down geographic barriers, and to meet new people and interact in new ways. We have a lot to do here. So we’re going to focus on keeping — we’re going to keep building even while we focus on keeping people safe.

And we’re going to talk about what we’re going to be doing across the rest of the family of apps for the rest of today. So let’s start with the Facebook app. Like all of you, we want to build something that’s not just fun to use but is good for people. So we’ve done a lot of research to understand what parts of the Internet and social media are good for our well-being and which parts aren’t. And the summary is that when you’re using the Internet to interact and to build relationships, then that is associated and correlated with all of the positive aspects of well-being that you’d to expect: better long term health; better long term happiness; feeling more connected; feeling less lonely and so on.

But when you’re just using the Internet to consume content passively whether that’s video or news, then that is not associated with these same benefits to well-being. And we’ve heard this feedback from a lot of people, too. People want Facebook to be about friends and interacting with people, so we’re going to do that. And I’m going to talk about a few new ways that we’re focused on taking the experience in this direction.


We’re rolling out something that we call Watch Party which lets you watch video and share with your friends, so. Let’s say that your friend is testifying in Congress, for example. Now you’re going to be able to bring your friends together and you can laugh together and you can cry together. Some of my friends actually did this. Let’s not do it again any time soon.

People often tell us that groups are the most meaningful part of Facebook and you can feel like you belong in a community. You can meet new people who share your values. For some people this might be a support group for new parents; for others it might be about a disease you have; for others it might be about finding people to come together and volunteer with. People want to be a part of meaningful community.

So today we’re launching a new groups tab to make groups more central to the overall Facebook experience. So for me I’m going to have all my groups in one place: my family group; my running group; my game group; my sheep dog appreciation groups all in one place.

Now to help more people grow their communities, we’re building a Join group button and plugin that admins and developers can add to their websites and their emails. This is important because a lot of what we need to do to help more meaningful groups form is just give more tools to creators. Every great community has engaged leaders, so a lot of what we need to do is just give more people the tools to be community leaders.


All right. Now talking about meaningful relationships, did you know that one in three marriages in the United States start online? And I can tell you how many times… I’ll be walking down the street in some city and a couple will come up to me and said that they met on Facebook and sometimes their kids with them and they’ll just point to them and they’ll say thank you. I have to say… I mean these are some of the moments I’m really proud of what we’re doing, right? I know that we’re making a positive difference in people’s lives.

But you know the reality is today we haven’t even built any features to help people find partners. And there are 200 million people on Facebook who list themselves as single. So clearly there’s something to do here. And if we’re focused on helping people build meaningful relationships, then this is perhaps the most meaningful of all.

So today we are announcing a new set of features coming soon around dating. Now this is going to be for building real long-term relationships, not just hook-ups. It’s going to be in the Facebook app but it’s totally optional. It’s up to them. If you want, you can make a dating profile and I know a lot of you are going to have questions about this. So I want to be clear that we have designed this with privacy and safety in mind from the beginning. Your friends aren’t going to see your profile. They’re only going to be suggested people who are not your friends, who have opted into dating who fit your preferences, although I can’t promise that you’re going to get your mate. It’s a tough world.

All right. Chris Cox will come up in a bit and walk you through this in more detail, because I want to make sure that you all see all the details here that we’ve built around privacy and safety.

But the bottom line is we want Facebook to be somewhere where you can start meaningful relationships, so we’re excited to start rolling this out too.


Now another way to help people connect in new ways is through commerce, and we started building marketplace because we saw that one of the most popular uses for groups was building these buy and sell groups. So people would start groups like Bay Area moms buy and sell, where people would be able to come together ask for advice and all the gear they needed, meet people who are like them and can ultimately buy and sell things with people they have something in common with.

The marketplace is now live in more than 70 countries. More than 800 million people around the world use it monthly, including more than one in three people on Facebook in the US. So this is starting to be a pretty big deal and it’s helping people earn more income and connect in a new way.

All right. So this is Facebook. We’re focused on helping people build relationships with friends and family, groups and meeting and interacting with new people.

Now let’s talk about Instagram. So our focus here is helping people capture any moment they want and come together around shared interests. Some of the best stories that we hear are around adhoc communities that spring up on Instagram and more than 200 million people use explore on Instagram every day. Since we launched hashtag following in just last December, more than 100 million people now follow hashtags; so we want to make it even easier to find the communities for the things that you’re interested in. So we’re launching a completely new design for Explore. That is going to organize the content around the topic channels now. So now your Explore is going to be even more focused on the things you’re interested in.

We’re also focused on new ways that people are going to be able to use Instagram to communicate and build stronger relationships. So it turns out that a lot of people are using live video basically just to hang out when you can’t be physically together or it’s amazing how much of all of our use of these social tools is just to get as close to feeling like we’re there with someone when we can’t physically be there. So today to make this easier we’re announcing video chat in Instagram. You’re going to be able to just tap on a new camera icon right in the top of any direct thread that you have and you’re going to be able to video chat one on one or with groups; you’re going to be able to minimize the video while you are chatting and using Instagram. And I think this is going to be a really big deal and people are really going to like this.

We are also building more creative ways for people to share in Instagram. Last year at F8, we announced the AR camera effect platform and today we’re bringing it to Instagram. So now anyone is going to be able to build face filters in effect, so when you go to your camera you’re going to be able to see effects that are relevant to you and from the accounts that you follow, if you’re browsing stories and you see a cool effect, you always build it to try it on, so we’re excited to get this in people’s hands soon.


All right. Now let’s talk about WhatsApp. So here our focus is on building new ways for people to connect privately with close friends and groups and businesses. Now before we dive in here, I just want to say yesterday Jan Koum, the founder of WhatsApp announced that he is leaving us and moving on. And I just want to take a moment to thank Jan, because Jan has done an amazing job of building WhatsApp. He has been a tireless advocate for privacy and encryption. A lot of you probably don’t know this or remember this, but when WhatsApp joined us in 2014, we actually hadn’t rolled out full intent-encryption yet. Jan and I talked about how to do this together and one of the things that I’m most proud of is that we have built the largest fully encrypted communication network in the world and this would not have happened without Jan and I’m deeply grateful for the work that he has done. So please join me in thanking him.

Now video calling is also one of the most popular features on WhatsApp already. And when I’m traveling, and I can’t be there to put my girls to bed at night and it’s really nice to just be able to see their face and talk to them and a lot of people agree, right? Around the world people are already making more than 2 billion minutes of voice and video calls on WhatsApp alone and today we’re announcing that we’re bringing group video calling to WhatsApp soon, too.

I want to talk about stories for a minute. So across our whole family we’ve really got all in on stories as a format for being able to quickly share video and photos throughout your day. And each of the apps that we’ve launched it’s evolved to be somewhat different but it’s growing quickly. Instagram was the first to really take off here. Facebook started a lot slower but it’s now starting to grow quickly too and do well. But WhatsApp has been by far the biggest of these products. More than 450 million people use WhatsApp status every day and it’s growing really quickly.

So the next phase for WhatsApp beyond just communicating with your friends and family is going to helping people connect with businesses as well. And you know today, lot of people don’t want to call businesses, or you just want to be able to text; that’s a really big shift in how we all communicate and I think that’s just going to be a really big deal here.

So earlier this year we launched WhatsApp business to let small businesses create a presence on WhatsApp and give them some tools for messaging. And already in just a few short months, more than 3 million people are already using WhatsApp business and it’s growing really quickly. So now the next step is going to be giving large businesses tools to be on WhatsApp too and we’re working on this now.

For Messenger, we’re focused on building richer ways for people to connect privately with their friends and family and businesses too. And when you’re messaging you really want a simple and fast experience. So we’re taking this moment to completely redesign messenger to focus on these ideas. And here’s what the new messenger is going to look like. It’s clean; it’s going to be fast and David is going to come and talk about this in a bit more detail in just a little bit.

Now I mentioned earlier that we are bringing the AR camera effects platform to Instagram, and we’re also bringing this to the Messenger platform as well. It’s going to be a really fun way for people to use augmented reality to connect with their family and friends privately and in real time. And I don’t know about you guys but my daughters… when I call them when I’m traveling, you know, they love these effects. Priscilla will be there and Max was like, oh, look, Mama, Dad does a bunny. Or an ogre.

We’re seeing good momentum for messenger business too, with more than 300,000 bots and businesses now using these tools and you know people are sending more than 8 billion messages between businesses and people every month. That’s Messenger.

So now let’s go beyond our apps for a minute and talk about virtual reality and the future. So our goal here is to create this real feeling of presence like you’re right there with someone even if they’re halfway around the world. And you know, this idea of being physically you’re — being feeling like you’re there with someone even when you can’t physically be there. Something we’ve talked about a lot today with video chat but over the long term virtual reality and eventually augmented reality we’re going to take this to a completely different level where it’s not just going to be about being able to see someone’s face on a on a small screen, you’re going to actually be able to feel like you’re there with someone.

So here’s an example of how compelling I think that this is going to be. Now if you have some photos from your childhood home, we can now use computer vision to fill in the gaps with this pointillism effect and recreate the rooms of your childhood home where you grew up. So you’re going to be able to go into VR with your family and visit and feel like you are right there; it feels like you are in a dream; it is wild. So this work of mapping out immersive spaces is just another important step on the path to creating this real feeling of presence.

Now in addition to software, you know we’re all building hardware. So we’ve been preparing Oculus Go for launch and the big news I have to share today is Oculus Go is shipping today. And it starts at $199; it is the first really affordable standalone virtual reality headset. It’s launching with more than a thousand apps and it has the highest quality lenses and optics that we have ever built into a VR device. Oculus Go is going to be — it’s the easiest way to get into VR. We think that this is going to be how a lot of people experience virtual reality and virtual presence for the first time. And to make sure that all of you get to experience this, too, everyone at F8 is getting a free Oculus Go to take home. We’re excited about that, too.

All right. So this is how we are thinking about our responsibility. To keep people safe and also to keep building. We’re here to build things that bring people together, and to put people in our relationships at the center of our experience with technology where they belong.

Because for all the challenges that we face today, the vast majority of what happens on these services is people getting closer to the people they care about, even when time or distance get in the way. We can help more people do this. Whether it’s reaching out to a friend that you lost touch with or finding a group to belong to, or just sending a video to your sister of your kids. The best part of what you do isn’t on Facebook; it’s the relationships you build and what you can go do together. That is what this is all about.

So if you believe, like I do, that giving people a voice is important, that building relationships is important, that creating a sense of community is important, and that doing the hard work of trying to bring the world closer together is important, then I say this: we will keep building. We need to keep this idea alive and that is what we are all here at F8 to do together.

So yes, this is an important moment. We need to do more to keep people safe and we will. But we also need to keep building and bring the world closer together.

Thank you for coming out today. Thank you for everything you’re doing to bring people together. Have a great F8!


All right let’s talk about dating.

Actually one of the great ironies for me is that when a lot of us joined the very first version of the service in 2004, back when it was just a handful of college students, we were convinced that dating would be the next feature Facebook was going to add. After all, all the college kids were finally in one place. So it turns out you were right just fourteen years too early.

So I first got my head around what Facebook was going to be in 2005 when I went into the early office to interview for a job as an engineer. This is 156 University Avenue and High Street, the founders and a handful of engineers had moved out there to try and find some more folks to join their team. And I wasn’t sure I wanted to work there but I really wanted to meet Mark. So I decided I’d go in there and interview for a job.

And I remember the office when I got inside it was very frenetic energy; it was sort of like a plane ascending to new altitudes with the engine and the wing shaking and here you have the small team of engineers trying to keep everything running, and I liked that.

Anyway, Mark wasn’t there that day. Justin Timberlake was not there either. But instead I met Dustin [Aaron Moskovitz], Facebook’s co-founder. Dustin Moskovitz, our head of engineering and I immediately liked him. He was humble; he was smart and he took a moment out of his busy day keeping this engineering team running to take me into a corner office and begin to explain to me where they were going. And he drew from me a picture on a whiteboard of a graph. And I thought he was going to give me like the Traveling Salesman Problem and I was going to write code.

But instead he starts talking about this idea that the way they see Facebook is the seed of a collaboratively created directory of people; and it’s authentic; it’s up to date. It’s interconnected, so like Wikipedia, you can explore people and things through their relationships with each other. Each person is responsible for their own representation and we think it could grow beyond college. And I found that idea very simple and elegant and it began to get the gears turning for me: maybe I should check this place out. And that was really the founding idea of the company for years.

Each year the company would identify a set of barriers to take down to allow more folks to use the service. So in 2005 high school; in 2006 other English speakers; in 2007 a crowd sourced translation tool, going up to 2017, how do we make this thing work on a Nokia C3 on a 2G network in Delhi at night — an adversarial networking condition.

And each time we’ve launched in a new country or a new place we’ve learned that Facebook wants to be something different. In Indonesia, we learned Facebook wanted to be a marketplace. In Thailand, we learned about the importance of helping small entrepreneurs scale businesses and reach new people. In Egypt, we learned about Facebook as a political tool.

The other thing we’ve learned as the network has scaled is that people want specialization in the tools that they use for different groups. So for the closest people to us, our family, we want messaging. Your parents, your kids, your siblings, your significant other, for me this is a message thread with lots of baby photos and the occasional spat.

The same is true for your close friends — the six or seven people that you rely upon on your worst day; the people you are constantly in touch with. The average person on our messaging services sends 80% of their messages to five people. And a lot of those messages are just to one person: their best friend or significant other. So messaging is going to do a lot for us but the most important thing to focus on is how it keeps us connected with the people who matter to us most. So David and Mubarik are going to be up here to talk about that a bit more.

Going further out, all of our friends is really what Facebook and Instagram do most well; it’s helping us stay connected with hundreds of people. Now on Facebook, last year, we began to hear that the influx of video and public media and content into the system was drowning out what people wanted the most, which was not to miss thing from friends. And that’s why we announced a big ranking change in January, which will help people make sure that they don’t miss stories from friends. And from the publishers they do see well prioritized publishers that are trusted that are informative, that are local and that are inspiring conversations between people. The emerging research on well-being and Facebook tells us that Facebook is better when it’s about conversations, not just passing time which is what we’re committed to.

And then at the story level we’ve gone through each component to understand how we can inspire better conversation. So again you’ll see more things from friends and more things from publishers that are trusted, informative and local. When people see articles from publishers they don’t recognize, we’re making a lot easier for them to go in there and understand where the story is coming from, when was the publisher founded, where they’re based What are some of the other pieces they’ve written recently? What are some pieces from other trusted sources on that same topic and how has the article traveled through Facebook? We hope this just helps people make better judgments and determinations about what they can trust.

We’re also looking at improving the quality of public conversations. It turns out good old fashioned up-voting and down-voting look like they close the gap between comments that invoke a lot of emotion but may not be civil. So we’re going to be rolling this out as quickly as we can to improve the quality of the conversations that are happening among lots of people on the platform.

Now the — thanks. So the other big trend that Mark talked about is the format of right now. It’s pull, not push; it goes away and it’s the aspect ratio of the phone, so it feels like you’re in the hand of the viewer. We’ve noticed that the growth here is just really insane. Here you see two trends. The first is the increase in sharing of any visual media, and then the second is that the stories format is on a path to surpass feeds as the primary where people share stuff with their friends sometime next year.

On Facebook we’re focused on the unique things Facebook does well in this format: so groups. How about a group of parents whose kids are playing soccer together, have a collaborative story where they can have their own video diary of the game? Events: making sure that friends at a concert can have a collaborative format for sharing that experience together.

Video clipping is something people love to do on Facebook, so we’re going to make it easy for people to grab the moment or the frames that they love the most and then add their own commentary so that it’s personal. Things like profile photos, people should be able to create nice stories about them, and then birthdays — instead of all of us writing on your wall to wish you Happy Birthday, how about we pulled together over the course of the day a photo and video real which you then received as a package at the end saying happy birthday? Again focusing on the unique strengths of the Facebook platform when applied to this format.

The other thing we’re seeing is a huge amount of stories coming from the camera roll: screenshots — especially of music. And this is a rather tedious process to create these and then when you’re seeing them it’s kind of annoying to go find the song. And that’s why we’re so excited today to announce a third-party stories integration, so that any app developer can immediately share to their stories on Facebook or Instagram, the platform of their choice.

So it’ll work like this: you’re on Spotify. You’re listening to your favorite song; you decide you want to tell your friends about it. You choose Instagram or Facebook, the platform of your choice, you can write there in line add some art, make it look the way you feel, and then on the consumption side when you see it, you can drop right in there and then there’s a deep link into the song, so you can start listening right away. Thank you.

I can see myself doing this with an entire mix with a run from my favorite running app, from Go Pro, videos, anything that you love to do, making it easy to quickly share a moment from that experience that’s relevant out to other people. So this is launching in beta starting today and we’re excited to see what you’ve all built.

OK, so that’s what we’re doing to help people share with friends. Groups, like Mark talked about, is the next layer out where some really interesting stuff is happening on the platform today. So groups has been around for a while but its growth is outpacing the growth of Facebook overall. Today 1.4 billion people are using groups every month. And about 200 million or so we think are super meaningful groups. This is Lola Omolola. Is she over here? Lola!

Lola is a Chicago based journalist, originally from Nigeria, who started Female in Nigeria: a group for women to tell stories about issues related to them. People are cheering for you, Lola.

And we’ve learned that the leaders are the reason that these meaningful large groups happen. Your story as you told me was very common which was you started this group, added a few friends, woke up the next day and it was doubling and doubling and doubling and doubling. And we know that you have a full-time job outside of this and managing a group with one million people in it is a lot of work. This is a group that has meet-ups in cities all around the world; they are scooper close friends now; their kids play together; they have merchandise. Lola is a major hero to them, and we’ve started asking what we can do to help folks like this succeed on our platform. Thank you, Lola.

So we’ve started learning from the top group admins on the platform what could we do to make this easier and how do we build products that let the next generation of leaders start to have groups that cater to what they want.

Dr. Hala Sabry is up here; she founded the Physicians Moms Group. This is a group for new mothers in the U.S. who are also doctors. And according to her, one in four women in the U.S. who meet that criteria are in this group. It’s probably the world’s best medical advice for parents. This group full of doctors. And so we’ve continued to learn what tools these folks need to have groups that are super healthy and do really really well. And that’s really been the roadmap for groups over the past year, is tools that focus on making the life easier of the people leading them and also just makes the groups conversation a lot more rich.

Like Mark mentioned, we’re also going to make it easier for folks to use groups on the platform by rolling out a groups tab later this month. So if you use groups a lot, this will make it easy for you to check up on them; it will also make it easier for you to discover new groups related especially to nice interests. I’m a owner of a Pitbull. Anybody who owns a Pitbull knows that they’re incredibly sweet even though they have a bad rap. And so I’m looking forward to using this to connect with more folks who have the same experience and share tips.

We’re also building features to make it easier for groups to do things together, like watch video. Watch Party is something we just announced and we’ve been rolling out gradually. This is just the experience of watching the same frame of the same video at the same time with thousands of people all around the world. It takes advantage of the same technology we used to build Live which is really low latency experience that creates that feeling a presence that Mark talked about.

Today we’re showing a sneak preview of a new feature called Live commentating which will let the group leader or the video creator or anybody in the audience put their face into the screen and narrate whatever it is that they want to say about what’s being watched. This is just about making the experience of watching the video that are more social. So that’s a little bit about groups.

We’ve also started looking at further out than that: what are the moments on the platform where people are finding a friend of a friend or stranger and having something important or meaningful happen, and what can we do to build more tools for that, which is what gets us to dating.

So this is Roman and Priya. Like Mark said they were one of many couples who’s met him and asked over the years to tell us the most important thing that ever happened to me on Facebook was meeting my partner. So this is a couple who met and then got engaged, got married and had kids. So Mark posted a photo of them in 2016 and the comment thread on it was overwhelming. We basically had thousands of responses of people who had met on the platform, sharing their personal story and photograph. And this is what got the gears turning for us that we should probably pay closer attention to how we could build the service that help folks who want to do this do so, in a way that was opt-in, in a way that was safe, a way that took advantage of the unique properties of the platform and didn’t get in the way of everybody who wasn’t interested in dating. And so that’s what we’ve designed.

So this is Jennifer. She’s just moved to Chicago; she’s interested in dating. She likes running and college football. So this is her Facebook profile; she would see in the upper right a place she can tap to go to dating home. The first thing she would do here is set up a dating profile. This is just her first name; it is not visible to her friends. It’s only visible to folks using the dating service and it doesn’t show up in News Feed or anywhere else. Once she’s done that she can go browse events and groups. This will let her see things in the city and groups related to her interests. Once she does that and we like this by the way because it mirrors the way people actually date which is usually at events and institutions that they’re connected to.

So let’s say she sees an event she wants to go to; she can go and unlock the event. So unlocking the event will mean she shares her dating profile with other people who are going to the event, are using the dating service and have also unlocked it. And she can browse people who are there, so she wants to talk to Jay. She’ll start a conversation with a photo from his profile. This will encourage we hope a more meaningful interaction.

Then if he wants to respond they’ll do so in a private messaging inbox connected to the profile. This is text only as a safety measure. And it’s not connected to Messenger or WhatsApp because folks wanted this to be in a separate space and not co-mingled with the rest of their inbox. So we hope that this will help more folks meet and hopefully find partners. We’re excited to share a lot more on this over the next few months.

On a more serious note. We’ve also seen people use Facebook to come together in a moment of crisis or during a disaster. We know that 160 million people each year are affected by a natural disaster and Facebook is a place that people go to tell their friends and family they’re OK and also ask for help and coordinate relief. So that’s why we’ve built safety check. Safety check is a tool that lets people do just those things and we’ve recently rolled out new functionalities so that businesses and NGOs can offer services to people in need, like free rides, food, water, shelter, pet supplies, whatever it is that folks need can be matched by people who want to help. This has been activated over a thousand times and notified more than 3 billion people that their friends and family are OK.

Today we’re announcing a new feature here which is the ability for people to provide first person accounts on the ground to folks who are in the middle of that place, or who want to look in and figure out how they can help. This will help with things like traffic, road blockages, floods, fires, etc.

The other area we’ve seen a lot of really interesting emergent behavior was in India around blood donations. Now India is one of many countries where there are blood shortages. And people would when a friend needed blood ask the network of friends and family around them for help. So we thought about it and we looked at, we worked with blood banks and clinics locally to figure out how we could help make this more structured and more efficient. So we’ve built already the ability for folks to register as a blood donor. There are 8 million people registered in India, Pakistan, and Bangladesh making it the largest online blood matching service.

Today we’re announcing a new zone which is a hub for all of this so that it’s more easy for clinics, blood banks and donors to find one another, whether it’s in a time of need or whether it’s during a moment where somebody wants to give blood. This is the kind of thing we’re interested in rolling out more broadly as we continue to build functionality into the service.

So these are just some of the ways we’re looking at helping people have finding these interesting moments where they meet somebody or something important happens and we can build the tool to help make it work. And that’s really what this conference is all about: putting technology to work in the service of people and our relationships with each other.

I’m really excited you’re all here today for F8. We’re here to build things, so let’s have an amazing conference. Thanks everybody.

You’re going to hear from Jyoti, Shilpa, Tomar to talk a little bit about Instagram. Thanks.


Hi, I’m Shilpa Sarkar


I’m Tamara Shapiro:


And I’m Jyoti Sood. Instagram is the best place to share, connect and explore with the people and interests that matter most to you. And we’re all super excited to be here today to get to show some of the cool new products that we’ve been working on.

Every day hundreds of millions of people connect through stories on Instagram, but we’re always looking for ways to improve the format to make it easier to share any moment even when nothing’s going on. Like when I’m bored and I just want to share my favorite song or playlist, thanks to the Spotify integration Chris talks about, now I can share a sticker of whatever I’m listening to directly to Instagram from my Spotify app.

And in addition to being able to easily share from Spotify, as you can see here, now anyone can also share their latest Go Pro footage directly to IG as well.

Our team also really cares about building creative tools that help people uniquely share on Instagram, whether it’s the new focus format that lets you up your selfie game or boomerang which turns the mundane into something fun. Or even AR face filters that help people feel more comfortable sharing and make their friends laugh but we’ve just barely scratched the surface of what’s possible with augmented reality.

Last year Facebook announced the ability for developers to create their own effects for the camera, and today we’re excited to bring that ability to Instagram as a closed beta. Here’s how it’ll be different on Instagram. The effects our partners design will only show up in the camera of their followers so that the effects really feel authentic and genuine and to the user. But non-followers will also have a way to find and use the effects. Let’s say teen creator Liza Koshy creates a funny new filter. If I follow Liza, I’ll automatically see the filter in my camera, but if I don’t follow her I can also try on the filter from any of my friends’ stories who posted with it or any of the direct messages that they sent using it. This sharing model gives third parties a new channel to interact with their followers and reach new ones. And it gives users a set of new creative tools of expression and interaction that can be tied to real world moments on Instagram, like being able to dunk on any of your friends during the playoffs or the finals courtesy of the NBA. No matter what the occasion we’re really excited to see what you’ll do.

And one of our top AR developers is actually here today to show us what he’s been working on, so let’s bring him up.

Jiffpom has 8 million followers on Instagram and is the most followed pet in the app. Hi Jiffpom, thanks for coming to F8! Can you show us what you’ve been up to? Wow! You’ve been really really busy. Can you show us the filter that you’ve been designing? Oh, it’s so cute. Look at that! Now when you don’t have Jiipom in real life for your selfie you have his filter with all his cuteness in it that he’s designed for us. Thanks Jiffpom. Nice work!

We’re really excited to be working with partners like Jiffpom to bring more fun and interactive tools into the camera and we think some of the most interactive experiences can actually happen in real time. So I’ll hand it over to Shilpa to talk about video chat.


Thanks Jyoti and thanks Jiffpom.

Real-time video is one of the best ways to share an experience with your friends. That’s why a little over a year ago, we launched Instagram live. Since then we’ve seen over 100 million people use live video every day. However we’ve heard from our community a desire to use this technology to talk privately with their closest friends. And that’s why today I’m really excited to announce a video chat — a new way to connect on Instagram Direct when you can’t be together.

This is me in high school. Now I don’t know about you all but when I was in high school I would instant message my friends or talk to them on the landline phone. This meant that when my best friend didn’t get into her dream school I couldn’t read her facial expression to figure out what kind of support she really needed. And since my brilliant sarcasm is a little difficult to convey over a text, most of my jokes fall flat when instant messaging with my crush. Video chat is incredible because it deepens friendships and it prevents things from being lost in textlation. Often you need a real facial expression or a laugh to really convey emotion. This is particularly exciting for Instagram because your friends are already on the platform. You don’t need to download a separate app or even ask for a phone number if you want to use it. In fact, let me show you how easy it is.

So here I am in Instagram. First, I’ll swipe over to direct, because that’s where I already have conversations with my closest friends. Now let’s say it’s Saturday and I’m trying to figure out where we should go to brunch. I tap this button to start a video chat and soon we’re all able to hang out together.

Now let’s pretend I’m looking for some inspiration for where we should go. I tap this button. And soon the video player is minimized. I swipe on over to feed and at this point people can still see and hear me but don’t worry they can’t see my screen. Now once I find somewhere I want to go, I hit share and then I send it back to the thread so my friends can give their input. So whether you’re one on one or in a group we think video chat will be a powerful and seamless way to connect on Instagram.

We’re currently testing video chat and look forward to rolling it out soon in the coming weeks.

Now I’ll hand it over to Tamara to talk about how we’re making Explore an even better place to discover interests you love on Instagram.


Thanks Shilpa. In addition to discovery — in addition to sharing people come to Instagram every day to discover the world around them and connect with the people and the things that they love. Skateboarding fans love seeing the latest tricks that are trending. Nail Art aficionados are looking for fresh ways to express themselves. And slime enthusiasts all agree they find slime oddly satisfying.

So what do these people have in common? They’ve found communities on Instagram that share their curiosity, interest or passion. But navigating the wide world of interests can be overwhelming, so we started working to help people discover and connect with the world around them.

We launched the ability to follow hashtags back in December and since then we’ve seen more than 100 million people around the world follow hashtags. And one thing we’ve learned is just how many different hashtags and interests are out there. I happen to follow hashtags slime and I make it every weekend with my kids.

So how did I become slime obsess? Well I found it on the Explore page. Explore is core to discovery on Instagram. Millions of people use Explore to get inspired and find awesome content, and today we’re excited to give you a sneak peek of the new Explore.

Now, Explore is organized into topic channels based on your personal interests and tastes. You can easily browse across different topics and dive deeper when you want to see more. You have more control over the content you’re seeing, so it’s easier to find exactly what you’re looking for.

Explore has always been powered by artificial intelligence. In order to deliver a cutting-edge experience we’re augmenting our AI with content classification and curation signals from our community. Our goal is to provide an even more personalized and easy to use experience that is tailored just for you.

But as we work to make it easier to share, connect and explore cross Instagram, it’s equally important that remains a safe and supportive space. That’s why last year we launched a comment filter that automatically hides offensive comments but that was just step one. Today we’re taking our comment filtering technology even further by launching a bullying filter that hides language intended to harass or upset people. This type of language is complicated to identify, so we’ve advanced our machine learning systems to make it possible. So much of the Instagram experience is about how your connections and community can support you. We’re committed to getting this right and we’re excited for what’s to come

I’ll now hand it off Mubarik Imam to talk about WhatsApp.


Good morning. Five years ago, my husband asked me if I could work anywhere for free, where would I work? My answer was simple: WhatsApp. I’ve been using it since March 2009 just two weeks after the app launched. I was a huge fan and still am. And that is because WhatsApp helps us deepen our personal relationships with friends and family no matter the distance. It fulfils a fundamental human need to communicate. It is the only way that my family which is split up across four continents, six different countries and eight cities, stays up to date on each other’s lives. This is the closest thing that we have to sitting around my grandmother standing table every night in Lahore, Pakistan.

For nine years we’ve helped families, friends and loved ones communicate by focusing on three core principles: simplicity, reliability, and privacy. So let’s talk about simplicity. We prioritize quality over an abundance of new features, and this means that we say no to things that add unnecessary complexity to the app.

Second reliability. WhatsApp has a data-lite design that works well on the lowest end smartphones no matter where you are in the world. This matters on ordinary days when you’re exchanging messages with your loved ones, but it really matters on exceptional days, too, such as after last year’s earthquake in Mexico City when WhatsApp was one of the only messaging services that worked reliably in the first few crucial hours to help find people that were still trapped.

Lastly privacy and security are really in our DNA at WhatsApp. We collect very little information about our users, and since some of your most personal moments are shared on WhatsApp, a few years ago we built end-to-end corruption by default into our app. It means that when you exchange messages with your loved ones or call your friends, nobody, not even WhatsApp can read your messages or listen to your calls.

With 65 billion messages that are sent every single day on WhatsApp, as Mark mentioned, WhatsApp is the world’s largest implementation of end-to-end encryption. We also really believe that your messages should be in your hands. That’s why WhatsApp does not store your messages on our servers once we deliver them.

Our features are also designed with privacy and security in mind. So take, for example, Live Location which we launched last year, it lets you share your location with whoever you choose privately. Again this is end-to-end encrypted which means nobody, not even WhatsApp, knows your location. Imagine how this matters in parts of the world where a woman who might be stuck in the traffic in Karachi after the monsoons or university student in Caracas can let their parents know that they’ve arrived home safely.

What is really exciting is that every single day we’re working hard on introducing new ways for people to stay connected around the globe. Last year we launched WhatsApp Status. This is our stories feature so you can share the fleeting memories that you have throughout your day, whether it’s a photo, a gift, a message, just with any or all of your contacts. And as Mark mentioned, even though it is pretty new, WhatsApp Status is by far the biggest stories product in the world with over 450 million daily users. Thank you.

Voice and video calling have also become immensely popular on WhatsApp and our engineers work really hard to make sure that you have clear video and voice quality everywhere around the world. And today people make over 2 billion minutes of voice and video calls every day on WhatsApp and now we’re excited to share the group calling is also coming to WhatsApp in the coming months ahead where you can get together with friends and family regardless of where you are in the world.

And in the next few months we’re also bringing stickers to WhatsApp. So people can express themselves with even more nuance and what’s exciting about this is that this includes support for third-party sticker packs created by developers like you, so you can help create localized stickers for people around the world to use.

Groups are also really an essential part of WhatsApp and we’ve recently added a new feature — we’ve recently added new features that give users even more control. Groups are intended for intimate conversations with family, friends, personal communities and organizations. And so today I’d like to share two stories with you that illustrate that.

For example, in India, groups are being used to help and support farmers. Farmers sometimes endure really brutal working conditions and many are in debt because of unpredictable climates. Unfortunately this drives many farmers to contemplate and potentially attempt suicide. One farmer named Gajanan Patond in Maharashtra had attempted suicide because he saw no way to get out of debt. His story was shared in a WhatsApp group created by a nonprofit called Yuvarashtra that supports the stressed farmers and their communities. The group brought together government officials, agriculture experts and legal advisors along with farmers for the first time who helped him pay off his dad, repair his irrigation system, and build a well — his lifelong dream and today Yuvarashtra has more than 22 such WhatsApp groups with over 2000 farmers.

Universities are also using WhatsApp as a tool for students to communicate from enrollment all the way to graduation. At the University of São Paulo, Professor [Paulo Nasa] uses a support system on WhatsApp for his students by encouraging them to share information, discuss class assignments and continue conversations, all in a safe and private environment on WhatsApp.

It’s not only the people that use our products but millions of businesses are also using WhatsApp to connect with customers, from clothing companies in Europe to bakeries in Brazil. And now we’re bringing two products to make these connections even more seamless for you. This year we launched WhatsApp Business; it’s a new Android app for small businesses which has more than three million people using it. And we’re also testing another large solution for big businesses. The goal is for businesses to have a presence on WhatsApp for the first time as well as additional features that make it possible to manage a really large volume of messages. This includes away messages, quick replies labels and many other features to come.

So I am going to share two stories with you about how businesses are using this. Take, for example, in Madrid, Spain where Marta González turned her passion for ceramics into a business by teaching classes in her studio and selling her own designs. For her business called Marta Cerámica, WhatsApp has become the tool that she relies on every single day to run her business and coordinate her classes, so that she has more time to be creative as an artist and focus on her students. Her favorite feature is voice messages because she can send personalized greetings and communicate with people even when her hands are messy and dirty in the studio.

Another business called Sale Stock in Indonesia is piloting our WhatsApp product for larger companies. They’re an online clothing company that uses WhatsApp to provide delivery rates and personalized recommendations for customers in the app.

And nonprofits are benefiting from this, too. I want to share the story of Praekelt Foundation, a South African nonprofit that is piloting a program called MomConnect. It uses WhatsApp to provide new mothers with critical pre and post-natal care. And what is truly remarkable is that communication between mothers and clinics has gone up by over three times since they switched to WhatsApp. This is really the power of WhatsApp.

The stories of people, organizations and businesses around the world that use WhatsApp in ways in which we never imagined really inspire our work every single day at WhatsApp. And from all of us that work on WhatsApp it is an honor and deep privilege to serve you.

And next here to share with you exciting developments from Messenger, please welcome David Marcus.


Good morning. I hope you’re having a great F8 so far. Yeah, all right. Awesome. We now have over 200,000 developers building for the Messenger platform. So I want to start by thanking all of you for your understanding as we had to pause approving your experiences on the platform in the last few weeks.

Seven years ago, I was sitting in this audience with my start-up building for the Facebook platform. So I know how painful and stressful those weeks can feel and I just wanted you to know that we’re super super thankful and grateful for your understanding as we went through this process.

The good news, as Mark shared with you earlier, is that we’re now fully open for business again. And Ime will share more details about that in his section right after me.

In the last year we’ve been really really busy making Messenger better for all of you. Starting with groups, we’ve added AR capabilities for Group video chats; we’ve added admin support, join by link, mentions and reactions to the main group products. Games have also become a lot bigger on the platform with now over 500 titles built by 200 game developers who are now monetizing those games really well. And speaking of monetization and payments we’ve made a lot of progress on payments, too by launching P2P payments, the same experience that you have here in the U.S., in France and in the U.K.

Messenger Light is now also available to more people in more countries and now supports video calling which was the number one requested feature from people using the product. And talking about the number one requested feature, this has been one of mine for a very very long time. It seems like a small thing but it’s a really big deal — the ability for you to now send 4K photos, 360 degree photos and HD videos superfast to all of your friends. This really makes Messenger one of the best ways to share rich media with anyone you want.

Now Messenger Kids has also found more and more product market fit with families all over the country. I use it with my youngest daughter when I’m traveling and she loves all of the face filters and effect and I know that I can be in control of who she can communicate with at all times which is great.

On the platform side of things we’ve been continuing to invest a ton in the last year as you all know. But one of the capabilities that I really really think is going to make a big difference is our customer chat plug-in. Our customer chat plug-in enables you to embed messenger on your own website and for the very first time continue chatting with your customers long after they’ve left your website, which is great for both customer service but also for marketing, because you can continue retargeting customers after they’ve asked you for a question on a product.

Last year when I was here, one year after opening the platform, I shared with you that we had over 100,000 live experiences on the platform .And this year I’m happy to update that number to over 300,000. But more importantly, what we’ve seen is that the engagement of people and businesses on Messenger is growing at a really rapid and accelerating rate. Last year we had 2 billion messages exchanged between people and businesses every month, and this number in one year has quadrupled to over 8 billion messages every month. This shows that the platform is finding product market fit, has a ton of momentum and it’s driving success for businesses over the world.

But we haven’t done this by ourselves; we partnered with awesome developers, solution providers, advertisers and marketers all over the world and it’s been amazing to watch all of you find product market fit, get success, grow your businesses this year. So let’s hear from a few of you now.

These are truly awesome success stories but it’s not only about small businesses and startups; it’s also your favorite brands from all over the world that have invested in Messenger and have found great results and success, from QANTAS to TD Ameritrade that have redefined customer service on Messenger to Comcast and T Mobile who are really engaging their customers in a brand new way.

So I want to turn to page now. Enough about the past; let’s look to the future. Last year, I was here and for the very first time we talked about M suggestions and since then we’ve added a lot of capabilities for M suggestions that learn new languages; it can suggest more things. But this year we’re really excited to announce M translations. For the very first time you’re going to have the ability to talk to almost anyone you want in the world at an unprecedented scale even if you don’t speak the same language. And this will power connections that weren’t possible before in all kinds of different circumstances and definitely make the world a lot smaller.

As far as the platform is concerned, we’re continuing to invest and as Mark highlighted before, we’re bringing AR to the Messenger platform. And what this means is that you’ll be able to build that native AR experiences combined with your bot, creating the very first conversational AR experiences and you can see some of the examples around me right now. This is going to be really powerful because you’ll still have the conversation behind those effects. And we’ve been very lucky to work with amazing brands like Nike, ASUS, Kia and Sephora to build those amazing experiences on our platform.

I now want to zoom in on the Nike experience because my son is a total sneaker head and he converted me into one. So having the ability to announce the first ever shoe-drop on Messenger on stage in front of you is awesome in more ways than you know. So let’s take a look.

First you go to the Nike sneakers experience. And provided you have the right secret emoji code you can unlock a bubble that then loads up the AR effects that Nike has built right into our native camera. The awesome part with this is that now you’re in the room you’re sitting in and you have this awesome podium that shows up and a brand new pair of Kyrie’s just drops in front of you literally, and you can actually walk through the shoe, get up close and personal with it, take photos and videos and share them with your friends, ask them for their opinions. And when you’re done with it and you close the camera you’re back into the experience where you can buy the shoe right then and there.

The awesome part with this is, now because you’re in a thread in Messenger, if you’re a real sneaker head you can ask for all the notifications for the next shoe drops and those are really important notifications if you like sneakers. I really can’t wait to see what you guys are going to build with this, because I think that creative companies and marketing agencies will have a blast creating those new experiences on our platform.

Now I really want to thank all of you on behalf of the whole Messenger team, because obviously we wouldn’t have gotten here without all of you. In two short years this platform went from zero to a thriving ecosystem of partners, fueling success stories from all over the world. But it still feels like it’s early and we have so much more work to do together to tap into the full potential of the platform we’ve built together. So let me commit once more to you that we’re fully invested in the Messenger platform that we will continue listening to your feedback; we will continue making it better so that you can be more successful on our platform.

We have six sessions for you this year, more than ever. So please make sure to check them out. We also have an awesome booth where you’ll be able to try these experiences for the first time hands on and we’ll have surprises for you there. And now I’ll pass it on to Ime. Thanks.


Hello everybody. How you doing? You still got the energy going? All right. My name is Ime Archibong and for the last eight years I’ve been part of the partnerships organization here at Facebook. In across many of those years I got the opportunity to work just like Mark and many of you out here, I probably have met more developers than I could even count.

But the thing that’s actually fairly special and unique about it is that I remember a lot of you — and I remember many of you guys’ stories, that’s mainly because they’ve been unique and our journey together has been unique in itself. The very first developer that I had the opportunity to work with when I started at this company was a relative unknown. It’s a 30-person European start-up with a few thousand users.

Now over our journey and over working with them there are plenty ups; there are plenty of downs but through it all remain committed to a couple of different things. One, this idea and this notion that building together was actually the most powerful thing that we could do. And two, was this vision that the more personalized and social future that we wanted to work towards together.

Now we’re on similar journeys with many of you which is a beautiful thing right now. I just want to say thank you. I don’t think you heard thank you enough; we say it again THANK YOU. THANK YOU. THANK YOU. Because recent events and the ever more urgent need to protect people’s data has required us all to evolve and to change our products which we know can be disruptive.

And as we reopen the app review process we’ve moved more and more of our APIs behind that process. And one of the things that we’re going to be doing is taking up higher level of expectations when we look at your applications that you submit to the Facebook platform.

Now quickly wanted to mention that our goal here isn’t to be difficult; it’s truly to ensure that the extremely small percentage of bad actors are out there aren’t ruining this platform for the vast majority of you who are good actors, who are doing good and are thriving on our platform right now. Now I know this is going to be harder work on both ends of us but I think that it’s truly worth it. This new level of intention and care is going to be important and – an important piece of the thing that we’re doing moving forward. So again I’ll say it again thank you. Thank you for being a partner in ensuring that what we build together is truly not only social but it’s also safe.

Now on our end, one of the things that we’re going to commit to is ensuring that we continue to build value for people and that ultimately we’re giving people transparency and control over what they’re actually sharing with developers and how their data is being used. In order to continue to invest in you guys and continue working with you guys moving forward, we’re going to have to talk about how we’re investing in what I call the five Ps: programs; people; places; prizes, and products. or Peter Piper Picked….

So let’s start with people. First we’re going to invest in our global footprint of partnerships teams and operations teams that get the opportunity to work with you. But we know that as we evolve this platform and things change that this is not enough. We’re going to continue to expand our developer programs. FbStart which started on the stage about five years ago focused on small and medium sized, mobile-focused startups but over the course of the last five years it expanded to support all developer enabled startups that are using Facebook. And more recently launched an acceleration program aimed at large scale startups that are looking to scale.

Developer circles which we talked about last year announced last year. Our community of global developers who are here right – last year we launched with about 10,000 startups… or sorry, 10,000 developers are part of this community. In a little over a year, in twelve months given to the good work that you guys have probably done, it’s 10x and it’s grown into a vibrant community of over 100,000 around the world. 70 cities today are hosting developer circle F8 viewing parties which is impressive to me because clearly many of the leads have actually flown all the way here to California to be with us today, so I thank you.

I also want to say that we’re going to continue investing in you guys because what you’re doing and the impact you’re having is truly global. Which brings me to the next area of investment that we’re focused on. Over the last year, Facebook has formally supported over 15 tech hubs around the world in countries like India, Brazil, France and Nigeria. So beyond some operational support, our support for them is shown up in ways of building accelerator programs, incubator programs, build virtual reality labs, running workshops for developers. We’re doing all of this because it’s our strong belief that the future of technology, the future of our industry is not going to be built here solely in California. We want to be out there building around the world with you.

Next, we’re going to start putting our money where our mouth is and create more prize-based competitions to spur innovation around the world. So last year I got up on stage and I said that society’s biggest opportunities and challenges weren’t going to be solved by any one person, any one individual or any one company that we had to figure out ways to build together to invest in one another, to multiply each other’s impact if you remember.

This year I want to make sure that we’re not just talking about it. So we’re bringing back the hack. As rumor has it, the name F8 was actually derived from the early day hackathons that we had at Facebook, where someone would go from all the way of an idea to a prototype in about eight hours. So what we’re trying to do is create a space here today for everyone to do the same: take an idea and try to go all the way to prototype with some of the new tools that you heard launched earlier and some of our old developer tools. So there’s a room just on the other side of this venue, or you have tables, you have desks, you’ve got connectivity, probably some beanbag chairs, some late night food, kind of all the good ingredients if you need to make that good hackathon smell; you know I’m talking about, right?

And our hope is that hundreds of you find your way over to that room and you build. You build through the night and you come back tomorrow; you present your prototypes and your ideas for the chance of a cash prize. Now for anyone who isn’t here today, we’re also going to kick off a hackathon online tomorrow that will run for the next three months. It will be located at this developer community challenge at developercircles.devpost.com website; say that a couple times fast.

Now what makes this particular hackathon actually exciting for me is that in addition to the developer community that we have here, in addition to folks that have shown up, we also have dozens of community leaders from around the world participating. And as a special we think that by bringing together these two different sets of builders into one sharing ideas, sharing the challenges that they’re facing, figuring out how to make and enforce paths forward that you ultimately generate ideas you build products, you build tools and you build services that give people around the world the power to build community, and like we say with our mission: bring the world ultimately closer together.

And lastly as you’ve already heard from everyone who was on stage before me, we continue to invest in the heavy way in all the different products across our family of apps and services to ensure that we can continue building together. Well there’s a lot of them but you’ll find most of them located here hopefully neatly at our new really designed developer website.

In a second here I am going to get off the stage; I am going to turn it over to both Rachel and Hugo to talk a little bit more about that last one VR up there. But before I go I actually want to quickly say something to the crew that’s here. It’s been about 11 years since we started this developer platform but I truly believe that our journey in building together has just begun. You saw all of the exciting things that were announced here on stage today and all the exciting tools that have been around for a while. And I ultimately believe that our ability to collaborate together to build together is really just beginning and our ability to affect the world together is just beginning.

If you remember that 30-person start-up and I was talking about mentioned a little bit earlier, over the course of their journey they’ve gone to create over 3000 jobs around the globe and also changed the music listening and discovery experience for over 150 million people around the globe.

Now you don’t have to go public to have impact. I don’t believe that; I know you guys don’t believe that. In fact, I’m inspired by Buenos Aires developer circle member, Celeste Medina who’s the CEO of an IT firm that both trains and places women in companies around Argentina. They are doing the successful work right now to close the gender gap in our industry.

I’m also impressed… yes keep it up. I’m also impressed by developer our FbStart member Nadia Patel Gangjee who started a buy and sell group on Facebook, grew it to tens of thousands of people over time and then successfully turned that into an e-commerce business just solely focused right now on giving financial inclusion to women across Pakistan: impressive and inspiring.

And last but not least, Eugene Baah and Tope Alabi who are two members of our open developer circles community. They took the skills that they learned in their circle to not only build a technology business for themselves but then in turn went back and gave to the community. They went around building technology and Messenger bots for a lot of the small and local SMBs in their community that didn’t have access to those tech tools nor those tech teams. Folks, that’s why we build: to strengthen our communities; to strengthen the world. And it’s why I continue to be extremely optimistic and excited about this journey and building that we’re on together.

So now here to tell you a bit more about virtual reality and how that fits into things, Hugo Barra, head of Oculus. Thank you.


And good morning. When I was really young and before I had even learned to ride a bicycle, my father took me to a very special place deep in the south of Brazil on the border of Paraguay. It’s a place called Itaipu. Back then it was the largest hydroelectric dam in the world; it was like nothing I’d ever seen and walking around the place made me feel ecstatic about what we as people can build. It was the very first time in my life, as far back as I can remember, that made me want to be an engineer.

Today I can go there in VR. A developer in Brazil built a VR guided tour of Itaipu that completely transports you there. But back then I was only able to have this experience, because my dad and I traveled together for a whole day in order to get there.

Well, here at Oculus, we’re building the platform to give anyone this power: to defy distance. This is our mission: defying distance to us means giving you the power to explore the world and to broaden your horizons with the people you care about. To deliver on this mission we need to build hardware, software and then an entire developer ecosystem and we need to put VR into the hands of more people. And that is why I’m so excited about Oculus Go and excited that you’re all getting one this week at F8. Yes!

Oculus Go is our first standalone all-in-one VR headset which means you don’t need to connect it to a phone or a PC. It’s lightweight, portable and easy to bring with you anywhere. And at $199 we’re making VR more approachable and more accessible than it’s ever been: an amazing combination of price and performance that we achieved by working closely with our partners Xiaomi and Qualcomm.

Now if we want to get VR into the hands of more people, we have to build products that can be used by anyone. So we’ve been very intentional in designing Oculus Go to be comfortable and easy to use for a really wide range of people. The fabric inside the headset is soft and really breathable; it’s based on technology we brought from the sports apparel industry. And the head straps are very soft and flexible; we designed them to fit any hairstyle really comfortably.

And I’m excited to say Oculus Go ships with the best lenses we’ve ever built and a display panel with 42% higher resolution than Oculus Rift. The result of all this is a much clearer and more realistic visual experience in VR.

We also designed an integrated audio system to deliver great immersive sound without requiring headphones. The speakers are built into the headset and they deliver sound directly to your ears via an air channel inside the strap system. It’s a really cool design.

Now add this all up: the soft fabric, the flexible head straps, the amazing optics, and the integrated audio system and what you get is an extremely comfortable headset that makes it possible to get into VR in literally seconds. Do you all want to see how easy it is? Yes.

Boom. I am in VR. That was like one of a half seconds, maybe. The cool thing is that the display fires up as soon as I put on the headset. So in VR right away it is great. Thank you, Steve. Does my hair look OK?

Thank you. All right. Well all of this awesome hardware completely fades away once you’re in VR. And this is Oculus home, your gateway into VR the second you put on the headset.

And today the Oculus Go store is launching with over 1000 VR apps, games and experiences. Yeah. And with Oculus Go, we’re introducing three flagship experiences for social entertainment in VR. A brand new version of Oculus rooms and two entirely new social apps: Oculus TV and Oculus Venues.

Let’s start with Oculus TV which is simply put a totally new way to watch TV. You get this gianormous virtual TV in your living room that’s equivalent to a 180-inch screen in reality. And it works just like the best Smart TVs out there: use the controller to change channels, navigate around and choose between live and on-demand content.

And starting this summer you’ll be able to invite friends, cousins and grandparents to have a Watch Party in VR where ever they are in the world.

Oculus TV launches this month and we’re adding tons of great content partners over the next few months, including ESPN, Netflix Hulu and Showtime.

Another awesome way to spend quality time with friends in VR is Oculus Rooms and today we’re launching a totally new version of Oculus Rooms that gives you even more fun things to do with your friends in VR. We’ve built a new environment that is even more inviting with things we know people love to do together. You can watch 3D movies or listen to music while hanging out and playing a board game together. And speaking of board games we’re excited to announce a new partnership with Hasbro to bring some of the world’s most popular board games to Oculus Rooms. We’re starting with Boggle which goes live this month, and soon also Monopoly and Trivial Pursuit experiences. These are super fun games that people love and that you can now play with your friends in VR and feel like you’re there together. Thank you.

All right. Next is Oculus Venues which is going to be your ticket to live social events in VR, like concerts, sports, comedy nights and movie screenings. Check this out. You get to sit in this awesome VR amphitheater with thousands of people and watch premium events together like soccer live in 180 degrees. You can see and hear the crowd and really feel the energy in the room; it is great.

The summer session in Oculus Venues kicks off with our first event: a live concert from Vance Joy on May 30. We have a great lineup of live event partners coming to Oculus Venues; live concerts from AEG; live games from MLB and the NBA; movie screenings from Lionsgate, plus Comedy Nights and tons of entertainment for next VR.

And that’s Oculus Go. For $199 you get access to over 1000 apps and games, tons of experiences to broaden your horizons and some of the most exciting social entertainment today. We’re also launching a version of Oculus Go with double the storage memory 64 GB for $249. You can order Oculus Go right now at Oculus.com in 23 countries around the world and in North America also on Amazon, Best Buy and new AEG with more retailers worldwide coming this summer, and a version for the China market with our partner Xiaomi.

Now thank you. It is my honor to introduce a phenomenal Facebook colleague who’s going to talk about the amazing work we’re doing to connect people in and beyond VR. Please welcome Rachel Franklin.


Thanks, Hugo.  You just saw how we’re bringing VR to everyone with the most accessible headset yet. We’re also making immersive technology social from the start, because virtual reality and augmented reality can help connect us in meaningful ways, even when we’re not in a headset. That’s where the Facebook platform comes in.

Facebook is where people come together and share and where we create communities around the world. With new formats that spring from new technologies, we will be able to share the moments of our lives in even richer ways. Our connections to people will deepen. We’re working with developers like you to create a new generation of media that can express the power of moments, big or small, and make sharing those moments seamless within and beyond VR for everyone.

I want to talk about three ways we’re doing this: by creating; by capturing; and by making it possible to remember the moments that matter most to us in new ways.

So first let’s talk about creating moments. We’re doing this with interactive 3D posts on Facebook, so my friend Jen just moved into her new house and as a house warming present I bought her this fancy new mixer. The company that makes it use our 3D sharing API. So before it even arrives I can send her a 3D preview of the gift on Facebook. It shows up in her news feed for her friends to admire from every angle.

But it’s more than just a post. With one tap you can bring a 3D object into Facebook camera using our AR technology. This means you can grab a 3D object right out of news feed and bring it straight into your world and it’s launching next month. So this means Jen can see how the mixer is going to look at her new kitchen and I can see if I want one for myself.

Moving objects into VR takes this experience to an even more immersive and meaningful level. So because Jen lives two states away, my post actually created a moment for us together. It reminded us how much we miss each other, so we decided to get together in VR in Facebook Spaces, with a simple 360 photo of her kitchen and that 3D mixer object, the virtual Jen can give me a tour. So we’re already seeing the start of an entirely new way to share with 3D media.

But what if you don’t have 3D model and software and you want immersive experiences based on your own special moments, well you only have to wait a few months. This summer we’re rolling out 3D photos. You simply take a picture with your smartphone and upload it to Facebook as a 3D photo. So here Jen kids baking and making slime because limes are a real trend right now. You can see how they pop off the screen; it’s like a memory is coming alive. I almost feel like I’m in that kitchen with them because Jen’s really captured the moments.

So you’ve seen how you can create immersive experiences and you can capture them. But we can go a step further to help you remember them. Looking back at important times in our lives is already a favorite thing to do on Facebook. But what about going back and feeling those feelings again. Earlier Mark showed you a sneak peek at a demo that our team is working on but I want to give you a closer look.

We all have these albums of our memories on Facebook. Imagine taking these 2D photos and videos and with the magic of AI reconstructing a place and a moment that’s important to you, so what you’re seeing is a 3D environment build with Point Cloud reconstruction from flat videos. You pop on a VR headset and you’re there again, walking around, looking around corners, seeing the places where your memories happened. Maybe it’s in your childhood home. It’s like a Facebook album that has come to life. And most magical of all: you’ll be able to go into these moments together with the people you care about. This is the kind of entirely new experience we can have in the future as immersive formats evolve. This is how we can get back to moments that matter to us and the people we care about. This is why we build.

We believe our vision today will be the foundation for the tools that you build with tomorrow, and I’m glad we’re on this journey together, because together we will put people at the center of how we design technology, to create the experiences that people will naturally want to share. That’s what matters to us at Facebook: making technology social from the start.

So let’s do this. Let’s keep building together. There’s never been a more important time for it.
","[(0, 0.3078507), (1, 0.23757707), (2, 0.45457223)]",0.3078507,0.23757707,0.45457223
"Hello, everyone, and welcome to another episode of Learn With Jason. Today on the show we have Brandon Roberts. Brandon, thank you so much for spending time with us today. How you doing? Hey, thanks for having me. I'm good. How are you? I'm doing great. We just figured out that I broke the Learn With Jason site recently. So I'm watching the fix push to production right now. That's always interesting. It's going great for me. Wait a minute. I fixed you. Oh, boy. Okay. Well, it's still broken. We'll deal with that. So, what I'm going to do is I'll post everybody to some links here. I broke the live captioning on the home page today, everybody. We'll have to go directly to the actual scene of the live captioning if we need it today. So let me find that. While I'm looking that up, Brandon, for folks who aren't familiar with your work, do you want to give us a background on yourself? Yeah, sure. I'll give my elevator pitch. My name is Brandon Roberts. You can follow me on Twitter @BrandonTRoberts. I block people sometimes. I open source. I maintain a couple of open-source projects, one of which we'll talk about today. And I'm also a developer advocate on Narwhal, which is open source. So, that's one of my -- another project that I work on. But, yeah. Glad to be here. Nice. Yeah, yeah. Now I'm afraid I'm going to get blocked because I don't know what the words are. (Laughter) Oh, I'm sure the chat will let you know. (Laughter) Great, great. This is going to go good for me. I'm going to get blocked midstream. But yeah, so I'm super excited to talk today because we're talking about something that I've known about for years and have been completely intimidated by for years, which is reactive state management. When we get into reactive state management, it starts to feel magical to me, and typically my response to magic is to run away, try to kill it with fire. I respond like a 14th century villager to anything that feels like magic. So maybe you can help demystify today. I think that's what I'm excited the most for. We're going to peek behind the curtain, see how the magic is made. So can you talk a little bit about, you know, what is reactive state management? What happens in that style of app? Right. So reactive state management -- and I'll talk about this mostly in the context of Angular, of course, but Angular is built on top of -- or Angular uses RxJS, which is a reactive library that uses observables as its primary handling events. But being reactive in that frame of mind is more declarative than -- using a more declarative approach. So we deal a lot with functions and a lot of functional programming is used in RxJS. This is where some of the things come in, like operators, but the main thing is the observable itself, which gives you an easy way, like a primitive to listen to some events, whether they be synchronous or asynchronous, handle listening for those events that happen over time, and giving you a way to tear down listening to those events. So, the reactive part of it itself in Angular is to take that model and use that to manage the state of the application over time. Like, if we were just talking about calling functions, then there are easy ways to get into grace conditions using those kind of -- in some cases you can use conditions that way, but using the reactive way is more of a declarative, where you are kind of mapping out what you want things to do, based on some event or some action that happened. That is what we kind of strive to in reactive applications and Angular. You want everything to be mostly a stream that happens over time as opposed to -- yeah. So, to repeat this back to make sure that I have the mental model right, when you're talking about observables, which are kind of at the bottom of this model, what you're doing is you're basically taking a piece of memory, an object or something and you're saying, I want you to look at this, and I'm going to send events to it. So this is sort of like having a click handler. We're doing like an add event listener, and when a click happens, we can perform some kind of function. This is similar in concept, but what we're saying is I have some data, and when a change happens, I want things to be subscribe to that change so I can update my UI based on what changed in the data. Yep, that's exactly it. Pretty close comparison to an event handler. You get -- like I said, you can add an event listener, tell it to listen for a certain amount of time, and then say remove that event listener. So the concepts definitely line up there. Gotcha, okay. So that immediately makes it feel less intimidating. I know how to do a click handler. I can write, you know, different events on the dom. So let's just apply that knowledge to data. So, when you're talking about this, you said, you know, that in Angular, this is a popular approach. I think I've seen NgRx all over the place. Why do you think this approach holds water? Like, what's the -- what do you think is the real benefit here, and why is it such a strong way to manage your data versus other approaches you've seen? Yeah, for me, some of the things RxJS provides in general, the setup, listen, and teardown is one thing. If we're just kind of talking about it in general, if we're comparing it to something like a promise, promises are eager versus observables that are more lazy. That would be one thing. They're also -- observables have the ability to be canceled. Once you start up a promise, you essentially have to wait until that promise emits a value. Observables are events or data or things that happen over time as opposed to a promise, which is more of a one-shot deal there that you kind of listen to and observe as it happens. Okay. Like I said, just thinking in general about it, those are some things that we can point to, to make a comparison per se. We're not saying that one is -- promises are definitely less to comprehend, I would say, in general. Just things baked into the web platform. But it does give you some differences and advantages that are important if you're working inside that mind frame. It is a bit of a shift there, I would say. I get you. I understand. So, this is kind of an interesting idea. What we're basically saying is instead of having to think through all the different states of our data and being ultra explicit about exactly what's possible and writing all of that logic, we can instead say we want to be -- okay, now I understand. We can be reactive to our data. When data changes, we can just say, ah, I've observed a change, I'm going to respond to that change. Right. You know, that also feels like -- I don't know. It's a very human way to think about data instead of a computer-y way where it's like I've built the pipeline, and the data must flow inside of this pipeline exactly as I've defined. We're instead saying here's a stream of data, if you want to listen for different events, you can pick those up. And anybody who uses those -- so when data gets picked up from a stream with these events, is that something where sequence matters? Or is it like if I have 100 pieces of UI that are all listening to the same event, the order that they all grab data, even if they modify it a little bit, are they kind of dependent on each other? Or is this independent, like the event goes out, they update based on that, and if it changes the data, it has to emit a new event? Yeah, so -- like I said, we'll get more into this with NgRx, but all the listeners of that stream of data or property would get that event at the same time or as it goes through and emits that event to all the listeners. Depending on how you're structuring that data, there wouldn't be somebody necessarily modifying that. A subscriber wouldn't be modifying that data along the way, depending on how you have it set up. So each one of them would operate independently on it. Now, you can share those streams amongst many listeners, but in the context of global state or a local state, if we're listening to those streams and each one of them kind of operates independently. Like I said, you can subscribe to that and do different things based on those different events. So there is some safety there in that it's not going to be unpredictable to what you get. And this kind of gets into operators in RxJS, how you modify that kind of pipeline or sequence that happens. But yeah, that's something that in itself the observable and the listeners of it all get that piece of data. Nice, nice. And do you find that -- like, is there a certain type of app that's better suited to this? Or do you find this being now that you've got this mental model, this is just the way you think about data? Yeah, it is more the way I think about data now just because I'm more comfortable with it. Like I said, if you're used to using -- or kind of building your own streams that simulate that, then it's a little different. It definitely helps to think in that mind frame. I'm going to quote the founder of NgRx who has said this many times. Everything is a stream. If you start thinking in that mind frame, then it makes working with RxJS and Angular easier if you embrace that way. Nice, okay. I get it. I mean, I feel the same way. When I started thinking about -- there's a lot of ways I write code now, where that's just the way -- that mental model I have now. It makes things make sense. So, all right. I'm really excited. I think at this point, probably what makes the most sense is to actually start doing a little bit of code. We can see whether or not we can get me thinking in stream. So, let's jump over to pair programming mode here. This is the deploy that hopefully fixes the homepage. Let's see if it works. Nope, still got some errors. You're doing that Friday deploy thing on a Tuesday. Literally fixing it live. Okay. So here's what we've got. This is the iframe I embed on the homepage. If I get rid of the extra font stuff here that doesn't copy/paste very well, I can send this to everybody. This is the live captioning for the show. That is made possible -- we've got Rachel with us today from White Coat Captioning. Thank you so much, Rachel. That's made possible through the generous support of our sponsors, Netlify, Fauna, Hasura, and Auth0, all of whom are kicking in to make this show more accessible to more people, which I appreciate quite a bit. So head over to this streamtext.net player if you want to follow along with the captions today, and I'll figure out what happened on the homepage before our next stream so this'll actually be fixed. Also, while you're clicking on things on the internet, make sure you go and follow Brandon on Twitter. Like he said, he's a good follow. Lots of good information on there. You know, you can try to figure out how to get blocked. (Laughter) Yeah, if they follow my Twitter long enough, if they haven't already, they'll quickly find out what the keyword is. It's a fun game to play, though. Great. I hope that I win that game instead of losing it. And today we're also going to be talking about NgRx. This is the core of our focus today. I'm going to shut all that down so we have tab space. Okay. So here's I'm ready to create a new project. If I want to get started and learn this, what should my first step be? Yeah, so first we'll need to create a new Angular project. I use NX, that's my go to. So if we go to nx.dev, we should be able to go to the site there. Copy that command, that npx. So start there. If you enter that, it will give us some name we want to have for this show or for this project, anyway. Okay. I'm going to call this reactive state NgRx. Look at these options. Yeah, it has a lot of presets. We'll go with the Angular and start there. Application name. Probably just name it the same thing. You can just name it my app or whatever your preference is. Is this one like a slug? Or is this like plain text? It's just plain text. It'll be the component -- sorry. It'll be the selector for the component. So it could be like my app or just one word. There won't be multiple words. Oh, I got it, I got it. So, let's call this -- like that kind of thing? Yeah, sure. Spell it right, though. Okay. Here we go. Do you have any preference? CSS is fine. Okay. Nx cloud? You can just click no on that one. We'll go through and create the workspace there. It usually is pretty quick about installing that, but if it takes a little bit, we can kind of talk about NgRx more in general and kind of like the background of it as a project and how it's evolved over time as a state management library. Or it's a set of libraries at this point. Okay. But yeah, that is where we'll be. All right. Maybe this is worth doing a quick shout as well to Nx. We have done a little bit of work with Nx in the past. We had Adam Barrett on the show. If you're interested in how Nx works and what we just did using that, this would be a good episode to watch. But the short version -- maybe you've got an elevator pitch. What's the short version? What is Nx? So Nx is an open-source build framework that does a few main things. It maps out the dependencies of your projects so it knows how your projects connect together. It has support for generating projects for many ecosystems. We support Angular, React, and Node, which are the main ones. The other one is local caching. If you are building a project, we say you never build the same thing twice. So if you build a project and you didn't run that same build again, then it will immediately give you the results for that. Oh, nice. Yeah, you can kind of share that across your team or your organization, so it kind of scales up from there. But it's a built framework for mono repos and helps you build applications at scale. That's the elevator pitch for Nx, anyway. Cool. Okay. So, I really like it. What I like about it is you've got a really nice flow in Nx for if I'm working on something that would be an npm package but doesn't make sense to publish as an npm package. Nx has such a good flow for making it feel like I'm using an npm package but not forcing me to publish it. That's such a great little bonus of using it. Definitely. So, now that I've got this, it looks like I don't have Nx installed globally. Am I going to need that? You can just use npx if we need to run any commands or anything. But yeah, that should be good. Okay. I just realized I put this in the wrong place. I'm going to move this whole folder up a level. Then we're going to move into it. Okay. So let's open this thing up and take a look at what's inside. Inside of our project we have -- so, this is already a little different from most projects I've seen because I don't see like a source folder, right. There's apps, libs, tools. So what are we looking at here? Yeah, the apps is mainly where we'll be working out of today. Usually if you're having one project, it'll just be under a source folder. If we had multiple ones, then they would be -- you could have multiple apps. Like you said, talking about the internal npm packages or packages within that workspace. You would have libraries there. But the app is where we'll focus on today. We'll just kind of create everything inside that reactive state application there. Then we have the source folder, which is a little more familiar. So this is like the Nx mono repo setup, where apps is one thing, then if I have a library that I wanted to share but that's not necessarily a package. I'm not 100% sure what tools are. So this is like the organization. Then down in here, this is like -- in a normal project that you just kind of spun up from scratch, what you would end up doing is this would be your whole folder. So this end-to-end testing that's out here, the libraries, the tools, and then all the Nx config that'll let us -- gee, it comes with tests already running and all sorts. That's great. Yeah, you definitely get a lot of the -- you get it out of the box. When you're doing Angular or React or whatever your project is, those would come preconfigured for you. Nice. Okay. And it looks like I'm missing a few things I need. I probably need Angular thing. Do I need this Nx console, do you think? You can, but we don't need it for this. It's just a GUI on top. If we don't need it, I won't install it. Angular language service seems like it'll be useful. Probably need to see what's going on there. Definitely gives you some good helpers for your templates and things. So default. Let's see how much Angular I remember. Not something I have a ton of experience in. So, what we've done here is we're pulled in app module from app.module here. This is the root of our code, which pulls in app component. That pulls in the template and CSS. Yeah, at its core, you have modules there. This is just a template that we'll just replace. Yeah, there's the top-level app module, which Angular itself has, what we call ng modules, a way to wire up your components and make the application aware or parts of your application aware of components and providers. So this is just a top-level one that boot straps the application and gets your browser level dependencies set up there. The app component is just the main component that'll start up when we start serving the app. So, like I said, it has the ng modules and components there, the main things you have in an Angular application itself. Gotcha. I'm also seeing my overlay tweaked out here. So let's refresh that page. Now people can see things. All right. So, good. Then inside here in this HTML, this is basically where we'll kind of start. Yeah, we can clear out -- well, we'll need to add the NgRx packages first. If you install @NgRx. And I don't know what your preference is, if you like to do the multiple packages at once or one at a time. Oh, we can do multiple packages at once. That's all right. Cool. So you'll start out with store. That's the main Redux package. We'll do @NgRx/store-devtools. The last one will be @NgRx/effects. Okay. And that's it. That'll be what we need. Got it. Here we go. So you said the store -- you said Redux. Is this using Redux under the hood? It's not using Redux under the hood. The original project was inspired by Redux, but there's no concrete relationship between the two. I call them cousins because they're like close enough in functionality, or like the idea of both projects is close enough but not exactly like siblings. Gotcha, okay. I understand. So now we've got the NgRx store, dev tools, and effects. I'm going to ask you questions about what each of those does as we pull them in here. If I want to run this project so we can see where we're starting and mess around, do I run like npm nx? Yeah, npm nx serve would be the command there. Okay. Oh, wait, I messed something up. Npx nx. Yeah. I saw three people in the chat. Saw Will Johnson, shout out to him. AJ, shout out to him. Yeah, I saw Ben came in with a raid. Thank you so much for the raid, Ben. Saw Mike Hardington in earlier. Lots of great folks. Thank you for hanging out with us. Yeah, so we have the app running now. We can just go to local host 4200 and open that link up there to see the app that it starts up with. Okay. So here's a nice -- oh, this is a good starter, too, because it's got, oh, you confused about how this works? Here's a million ways to learn more information. This is great. Yeah, we'll end up just nuking all that. So for now, I'm going to just -- boom, gone. We have an empty file now. I can put in, like, hello, chat. Come out here. Does this hot reload? Oh, it hot reloads. That's beautiful. So, we have a nice development environment. We've got things running. Now I'm ready. I want to make something reactive. So what should I do first? So what we're going to do here is start out with a pretty straightforward example. We're going to use a counter and use the store to update the state of that counter or the value. So we'll keep it straightforward. Just create a button, and we'll do the -- we can do the counter value there. Just create a div with the counter value. We'll create three buttons. One for incrementing, one for deincrementing, and one for setting the value. Our value will be here. Or let's make it -- let's keep it in the spirit of the show. We'll set it up as a count of boops. Then we'll have a span we can put that if we need to put it in an element. Then we'll have a button to add a boop and remove a boop. Unboop. I don't know if you're technically allowed under the laws of physics to unboop. We're going to say today that you can. And what was the third one? Reset. But we can just do the add and unboop, if that'll work. Yeah, let's start here. If we need to add more, we can. So this now gives us add boop, unboop. We have buttons. These don't do anything. We just made them into the markup. But at this point, I think we're actually ready to start doing stuff. Yep, and there go the boops. So if we go into the app component.ts, we're going to define -- yeah, that one. You can remove the title there. We'll set value in this class, and sent it to zero. So if we go back into the app component and replace the zero with two sets of curly braces -- yeah, there we go. That'll be enough to start with there. Then if I change this to show it's hooked up, good. Perfect. Good starting point. So we want to add boops and unboop boops. If that's the way we're going to write it. (Laughter) Right. Okay. So what we want to do to manage this with NgRx is we want to kind of set up the Redux flow here. So we're going to create a file called -- we'll call them boop.actions.ts. Where should this live? This can just live in the app folder. Yeah, just create it right there Like that? Yep. So what we want to do is define the events that we want to trigger here for the boops. We have a function in NgRx called create actions. So if you import -- or we can create -- yeah, import create action from @ngrx/store. This is, like I said, a utility function, where we define the type -- or the event and the source of where this came from. If we want to create a constant for -- or we can export that. If we export that constant, we could say boop added. Okay. Then we'll set that to create action. Create action. Then inside there, we'll define a text string. This is just a descriptor of what we're doing here. You can use boop added. We usually break this up into an event -- or a source and an event. So what's the format that you would use for this? You would do square brackets. Yeah, square brackets and call it boop. We could put boop in there. Then just put added out on the side of it. Like this? Or like with no space? Yeah, with the space is fine. We're just declaring these events that are happening in here. At the end of the day, this is just like a plain JavaScript object that we're using to create action with. So we have one for boop added. Then we can create one more action for unbooped. We can probably do like removed so it's a little more -- like a little easier to keep on a convention here. So we've got one for added, one for removed. Okay. So we have our actions in place there. Next we want to create the reducer that's going to manage the state of that value. So next we'll create a different file called boop.reducer.ts. You can just inline that there. So we have create action. Then here's where we'll create the reducer that'll just manage the count of boops that we have. And to create that, we have similar functions for create reducer. If you import create reducer from NgRx store -- yep. So we'll have that one. And for the -- well, for the export, we'll export a constant for initial state and just set it to zero. That'll kind of mimic the initial value for what we have there. Mm-hmm. So like I said, if we were building a more complex about and you could define an interface, but here we're going to keep it straightforward here. So, next we want to create the reducer that's going to manage that value. We're going to export another constant for reducer. You can set that equal to create reducer and open that up. The first argument there would be the initial state we just defined. Then we'll -- the next set of arguments would be the handlers. So each handler uses an on function that's also imported from NgRx store. Either you can import it first or type it out. Let's type it out. Hopefully it'll auto complete for me. It looks like a spread. Is that an array? Yeah, each one of the arguments after that will be the handler. So they'll be separate. Oh, oh, I understand. Okay. So if you just type on there, it'll give you that import from NgRx store. And we could put that on a separate line there to just make it a little easier to read. Okay. So inside of the on handler, we want to listen for these actions, the two actions that we define. Or we'll start with the boop added action. So if we want to import that one. The first argument or the first set of arguments is the actions that we want to listen to. So we have boop added and boop removed are the two. We only want to -- on the boop add, we want to increment. Then we'll have one for boop removed. Okay. So we've got these in. On the boop added, we'll put a comma there. The actual handler for that action will be what we're defining next. So each -- and this'll just be a callback function that we have there. It'll be state. And if the option itself has some additional data associated with it or a payload, then we could manage that also there. Yeah, so it would also give us the action itself. Yeah, it'll also give you the action itself. If we added props to the action, we could use those two, but we're just dealing with the state right now. So we'll just open that up and return. So I could do state plus one. Yep, exactly. Then on the boop removed -- so that's all that we have to do for the handler there. Then the boop removed would be state minus one. Great. Now we have an initial state, reducer, actions we can send and remove. This feels like -- okay. This is all making sense to me. Whenever a boop gets added, we want to add one to the state. Whenever one gets removed, we want to remove one from the state. This one we'd probably want -- you can't go to negative boops. So we would go -- Yeah, you can just define if you want -- how you want the logic to go in there. Less than or equal to zero. We can return zero, otherwise we can return state minus one. That's horrible code. But let's all pretend that was clean. Look away, everyone. Look away. Okay. Now look back. So now we have the two main things. We want to wire this up to the store. We'll register the boop counter in the store. To do that, we'll go to the app module.ts. That's here. And this is where we set up global services or global providers. I think react has something similar. Or providers are used that way in react. So this is where we're effectively -- at this level, we are wrapping app component with whatever we need. Yeah, we're providing whatever the services are needed for the entire application. So our store is going to go in this providers array? We'll add it to the imports. Oh, okay. It does have providers with it, but by convention, we'll use it -- we'll register it using the store module. If we go into the -- yeah, after that one, just add a comma there. And just store module -- yeah, if you import the store module, with a capital S, from NgRx store. Okay. So we'll put in store module. Then we'll add for root. We'll add that with an empty object just to start out. One more thing we'll add is the store dev tools. If you import that from the import store dev tools module -- That comes in from store dev tools. Yeah, it would be store dev tools module there. Store dev tools module. Got it, got it. Yeah, we're keeping the Ng module convention there. So it'll be store dev tools module.instrument. If you have the Redux dev tools installed, you could use the same tools as if you were in a React project. Anything that can hook into the store dev tools there, you'll be able to see. Do I have that? I might have that. I'm not going to try to install something else today. But yeah, this is great. Oh, I do have it. There you go. Okay. Cool. I'm going to make this bigger. Pops right up there. Slick. Here's our store popping right uh. Action, state. Oh, we made it empty. That's right. We haven't registered it yet. If we go back to the store module for root, inside that object we can give the key of what we want this feature to be. We can call that boops, if you want to call it that. Then just import the reducer from the file. Reducer from boop reducer. If we were using Redux, you would use configure store. Then you would have your initial value for that particular slice or piece of state. So it's just -- at the end of the day, the store is one big object. We're using the dev tools to just inspect that object there. But yeah, that extension has been out there for a long time. We definitely make good use of that. Absolutely. Yeah, so it looks like you can use Redux dev tools in Chrome, Edge, and Firefox. I'm working in Edge, and it's working great. Now I can see we registered boops and added in our reducer. We've got it. So that's doing the thing we want. Does this mean -- so at this point, we've created actions. We created a reducer. And we've registered those as imports for our app component. Yeah, we registered the store as a global service. We're looking at the global state management side of NgRx here. Now we can actually just use that -- we can set up the store in the app component to handle the state of that counter. So first, we can see what the -- we can actually update the count in the store without having that actually reflect there first. So what we want to do first is to inject a store service, which is available globally because we registered it there. If you import store service from NgRx store -- a lot of stores. Well, it would just be the store. Sorry. I've referred to it as a store service, but it's just store. Then in the app component, we want to add it to the -- we want to define the constructor. Where we can inject a store service. Okay. And the way you do this is? If you just type constructor. Then we'll open that up. Then we'll add the store as an injected dependency. So inside of the parameters of the constructor, we're going to set that to a private property. This is one thing Angular does. It does have dependency injection. If I want the store, I can just find a store as a property. So we can just call it store. Use the colon, and then use the store import that we imported from the top there. So it knows. Oh, okay. Yeah, because we registered the store, now it gets injected automatically into the app component there. So then -- I haven't written class-based stuff for a while. If I remember correctly, what we've done here is we're declaring count on the class. So in the constructor, we'll default it to zero. That's okay. But here what we want to do is get this store and set this.count to store.boops. It won't be that straightforward. We have to subscribe to the store to get values out of it. Okay, right. Because it's an observable, yeah. The store itself is an observable of the state over time. Gotcha. So if we -- to update that -- well, yeah. We can subscribe to the -- we'll use one of the Angular hooks to subscribe to the counter. So outside of that constructor, if you define another method there in the class, it's ngOnInit. This is just a lifecycle hook that is called after the constructor is called. Okay. So here we want to subscribe to the store so we can at least see the value getting updated. So next we want to say that this -- we can subscribe to the store saying this.store. Then we'll say subscribe. Is it this auto completed one here? No, it won't be that one. We'll use the select. So this.store.select. That'll take a callback function. Then we'll say the state is a type of any. Then we'll say state.boops. I believe that's what we named the value for the piece of state there. Oh, it does not like whatever I just did. There we go. So, state.boops. Okay. There we go. Then after that, we actually have to subscribe to this observable. So they did an update on the value of the count. What we want to do next is do a .subscribe on the end of that. Then the value is -- this'll just be the value that comes out of the observable. We can just use value as a name there and use a call back. Open that up as a callback function. Okay. Then we can set the count on the class to that value. Like that? Yep. Okay. All right. So any time the store is updated with that counter, we'll update the local value here. Now, like I said, we could get into the weeds of observables and subscribe and unsubscribe, but for this one, we'll keep it straightforward. Next, we want to dispatch the action. We kind of want to create this reactive loop within our global store of dispatching an action. If we go back into the app component -- well, let's stay in here for a second. We can do it a little more straightforward if we do it here. So if we go into the -- if we define another method in here for add boop for the method there and then what we want to do is dispatch one of the actions that will update the state in the store. So we'll do this.store.dispatch. Then we can just pass the boop added event or action. And this is the one we're going to import? Yep. And we'll just call that as a function. Definitely don't need whatever that was. We don't want working threads. That's a rabbit hole we don't want to go down. (Laughter) Okay. So we got boop added. Then you want to call that as a function. Oh, outside. That's what we want. And we'll use one for boop remove -- or remove boop also. So we'll use the remove boop there and boop removed for the other event there. Okay. Okay. So we have those two actions there, the add and remove. That will update the counter on the page there. Essentially, that is what we need for the global state, to make this reactive, where we can see what the -- so we have it hooked up to the dev tools. Any time we dispatch an action, it's going to receive the -- the reducer is going to receive that and update the state. And we're subscribing to that value, so any time that value gets updated, it'll automatically update that count. And I don't actually need this to be in a span. It's just going to work, right? So, now we can call these. So because we've declared these in the component -- Yeah, we do need to add them to the template to use in a click handler. We're kind of connecting those two things together. So in the app component, Angular uses parentheses for setting up events. So we just use a -- click inside of there. Yep. Type click. What we want to do is call the -- so, we set up the event using the parentheses. Then we'll set that to equals. Then we use double quotes to say what we want to do when that event happens. Here we just want to say add boop. Then we're getting some Angular language services helping us out here. Nice. So we'll call that method the add boop when we click on that. Then we'll have the same one for remove boop. So we have to call those as methods. They have to be called? Yep, they have to be called. Okay. That allows you to -- the click events, it gives you that information there with it. So if you have something you needed to do with that event, then that's where you could pass that event to the click handler. You already got it rolling there. Yeah. And this is -- like, this is slick. Check this out. This is like a standard complaint that you'll hear about any type of Redux implementation. Oh, well, what about the boilerplate? Okay -- is that the word? Hold on one second. I got to go to Twitter. Damn it! (Laughter) You fell right into the trap. But this is a standard complaint. People say I don't want to have to write all this. But looking at this, we didn't write that much. It's really clear what each piece is. And out the other side we get this really declarative way of getting at what's happening. I know when I click this button, I'm going to add a boop. When I click this button, I'm going to remove a boop. And when we do that, we have freaking time travel. We can go back and forth in our app and see where we were. That is incredibly powerful. Got all the same benefits. Usually some of the same complaints just with the pattern in general of boilerplate. But the time traveling does win some people over. So there's a give and take there. This is one of those things. I think there's this sort of philosophical debate that happens. I saw Kat Marchand had a really good take on this. When you start looking at setups like TypeScript, when you start looking at setups like having these action dispatchers and these conventions, when you're first writing code, they feel like a hurdle. You want to get rid of those constraints. You're like, oh, I'm feeling hemmed in by these TypeScript types. I'm feeling hemmed in by having to write all this boilerplate to get this code out. I'm feeling like ham strung. I can't just get out there and create. But then when you go to maintain this or you go to hand this off to your teammates or -- you start to think, boy, I wish that this had more, like, structure to it, right? I wish it was easier to figure out. I feel like you're trying not to say the word here. I'm trying, I'm trying. But I think the real power of this is when you get to the point that you are actually trying to maintain software, if you have to go refactor something, you got to change out some code, hand this off to a teammate and you're going to work on a different project, having types, having time travel, having this really clear structure makes it much easier to do that. Like, as a developer, I can drop in and open up my dev tools and see, ah, okay, when I click this button, it calls this action. I can search in the code and figure out where it is and find out how it works. So, that's the sort of thing that I think is -- you know, sure, if you're working just you, this is an experiment, you're just trying to get something, you know, work out an idea, maybe you don't need all of this. But if you're trying to build something that's going to live, this is going to help a lot. Yeah, and I think that a lot of -- I think the reason why it's been more popular in the React ecosystem and is popular in the Angular ecosystem -- and I say this a lot -- sometimes it's more about the process and the pattern is what people kind of gravitate towards. If you're working on a big team and you have maybe people onboarding and offboarding a lot and you want something that's predictable and that you can say, you know, we didn't create this here, this is something that's been battle tested outside of Angular and react and kind of flows back further than that, something you can use in that context to onboard team members with. Or if you have people that are more comfortable with RxJS, which this is all built on top of RxJS, so the streams and observables and everything are just baked in, it will create -- you know, it's a way to create these streams for you so you don't have to worry about am I creating the right one, am I using all the -- like the operators and things. But give you that flexibility without having to roll your own from scratch. Yeah, and so I would love to see -- we have probably 25 minutes left here. I'd love to see how this expands out. So as we're working on more parts of the UI, maybe we can add something that listens to events. We can set a level. If it's under five boops, we'll say the boop level is low. If it's between 5 and 15, we can say it's average. Over 15, we'll say high or something like that. Yeah, sure. So to do that, I would -- can we just create a whole new component? Yeah, sure. So let's -- I'm going to need a lot of help here. (Laughter) I got you. So, I think the quickest way -- well, no, that would probably be -- we can go to the command line and just generate a component for the app that way. If we do npx nx generate, then say component. Then you can give the component a name. Give it a name of -- let's call it boop level. Should it be like that? I think that works. We'll see if it normalizes. Oh, cool. It like kabob cased it for me. Yeah, so we have the boop level counter there. Or boop level component, excuse me. Then if we look at the component, it's a similar setup there where we have the selector. It also gives you the test and thing there is. So if we look at the selector and component, this one just has boop level works in there. So if we go back to the component, you can copy that selector there, that reactive state, ngrx boop level. We can drop that into the app component. That will at least give us the component there. Like that? It'll be open and close tags. It won't be self-closing. Gotcha. Not self-closing. All right. So that will give us -- oh, then I got to restart it because I generated the component. So that would give us the component to share the value with this other component and do things based off of that. Okay. That still is all well and good. Even the logic worked there. Hey, my really, really great code actually functioned appropriately. There you go. So that all makes sense. We've generated a new component. And this is where I think, you know, you mentioned convention and patterns. Now that I've seen this once in the app, I know exactly what to expect when I look into another component, and I know where things are going to go and all of those things. So the one thing I'm unclear on is the app component. We injected -- hold on. In the module, we added the store and all this stuff. Now this is wrapped around our boop component. Does that mean there's inheritance? Or do we need to also bring in the store to the boop component? You do have to inject it into that component, but it is provided from the top level down. As you see, the boop-level component is in the declarations of this component also. So it automatically gets -- so yeah, the CLI did that for you as far as importing and adding it to the declarations. It has all the same access at the app component at this level. Okay, okay. So does that mean here I can -- Yep, so in there you can just use private again and store and just inject the store there. Yep, okay. Now you have access to the store there. We can do some things in here with the count. You can just declare it directly in the class there. You can say this.level. For here, what you want to do -- I guess tell me what you want to do. Yeah, my thinking, if I just kind of pseudo code this out. We've got our boops, and let's say it's ten. We would do like if boops is less than or equal to five, we'll say this.level is low, else if boops is greater than five -- actually, we could even just do greater and equal to 15 and say this.level is high. Then the last one would be else. Then we just want to show that in the component? Yeah, I think we can just show the level. If we set the level, then I can go to my component. I screwed it up. We can say is level, right. So I've made a mistake in my code down here that's causing it to fail. Oh, I know why. It's because I have extra curlies. So this is kind of the idea here. We set it to ten. It auto completes to average. Then if I set it to 17, it'll say high. If I set it to four, it'll say low. Okay. So we'll do something similar. We'll subscribe to the value of the boops. Then we'll use an operator to map that value to the level. So we won't -- in this case, we'll do this in a more reactive way. We'll say this level -- we'll start out with this.store.select, and then we'll just use the state again here. Like I said, we're not having to go full type safety. We can wrap that state any in parentheses. Oh, right, right. Then say state.boops. So that'll give us the value of the boops themselves. What we want to do is instead of saying, okay -- well, we're still going to use some of the if logic here. What we're going to do is add an operator. We're going to use a pipe in RxJS that will let us turn the current value of the boop into a string. So what we want to do next is on the next like line, you can use .pipe. This is a way that you can -- and this is kind of where the extra parts come in of RxJS to where you can use operators to perform basically function calls on the data that's coming through. Okay. So what we want to do is we want to do -- we want to map the value into a string. So we can bring in the map operator from RxJS. So if you put map inside of there. It should be all lower case. You may have to import it. Lots of options up here. So that was in effects? Well, that will be from RxJS operator. So if we import map from RxJS/operators. And they've worked on this some more also. I'll throw the plug out there they're looking to consolidate this into one import. But the map itself is just a function. So what you want to do here is map. It's just a callback function. It'll be the current value of the boops. Then we can have a callback there. We can wrap that logic that you had into -- put that logic into the function itself. Okay. So instead of setting the level, what we want to do here is return a new level. So operators are just pure function. What they do underneath is take in the current observable and return a new one. Since we're just mapping to a new value, it'll just do that underneath for you. So now that we have that set up, what we want to do next is set the level to that store. Like that? Yes. Then where we have -- What doesn't it like? Observable, low, high, average. Yeah, it's telling us that needs to be an observable. So you can take out that value there. We'll add a type to the level. So just put a colon. We want to say that this is an observable of a string. So if we put observable there and it takes a type, then you can take out -- Is that right? The value itself is just a string. You can take out the low, the initial value. Yep. Okay. Just take that out. It's probably complaining now that we have an uninitialized value. So if we put an exclamation at the end of level, then that should make it happy. Okay. So what we're saying is that level is an observable of a string. So this is going to be the value of that over time. It's correctly telling us in the template that we haven't subscribed to this observable yet. Got it. So the thing in Angular that wires this up for us is the async pipe. What the async pipe does is -- like we mentioned before, we talked about subscribing to values or like executing a promise. What the async pipe in Angular does is it kind of creates this psych until our template, which is a little different than what we did in the other component. We actually did a .subscribe, and we listened to that value as it was being updated. So, what we want to do is go to the template, and the async pipe itself will do that for us. So, in the boop level component here, we want to add use the async pipe. If we do a space and do the pipe operator and then use the async pipe there, yep, it gives us some auto complete. So that will subscribe or start listening to the value of our counter. So if we get to this -- and like I said, this is kind of the reactive part of it. We set up something, told it what we wanted it to do, and RxJS, it can be mind-bendy at times, but in the end we want to say that when I set up something, I do this, I want this to happen. We've already wired it up, and this is what makes -- or keeps Angular more reactive in that sense. We're just declaring what we want to happen. Then when the data is passed through there, then we get some result out of that. We didn't have to say, okay, if this happens, then set this level, or if this happens, then set that level. We're just saying go through this pipeline. So this is a fully derived state, which I think is kind of nice. And it's very clearly derived from the value of state.boops as opposed to something where -- because I feel like what would have happened if it had been me is I would have done something like const boop equals this.store, you know, et cetera to get to the boops value. Then more stuff happens. You're 20 lines later and finally see this piece of logic that's like this.level equals boops is greater than five. So it's harder to track what's going on. This makes it very clear that what we're doing is we're taking something out of the store and deriving a value from it. Right. I do like that. I think that's really nice. And we could even make this -- this is just an arbitrary value, right? So we can make that more descriptive. Yep, that'll be however you set up the data, depending on the operators you use, would be how that comes out there. So yeah, definitely gives you that option to be as -- you know, if you want to be verbose with the variables or set up your own kind of pipelines there, that's more of where the power and the mind-bendy part of RxJS comes in at. And this is all the state management part of NgRx. We added the effects package, which is more for side effects. That would be another thing you could do if we were dealing with HTTP calls and things like that. If we wanted to do something with a dom. Yeah, let's maybe do that as a way to just show how that works. I think that is one of the things I struggle with a little bit. When we start dealing with two concepts of time flow. We've got the data, which is a stream over time. Then we have async calls happening that don't block the stream over time but have to interact with it. So maybe what we can do here is -- I mean, we can do something really simple. If we clear a certain number of boops, we can send off a call to -- I think there's an API called I can haz dad joke. It doesn't require any kind of authentication. We can just hit it. Let's see. Is there authentication? No authentication is required. We can just hit any dad joke and we get one. Okay. And if we send that as an accept application JSON, we'll get it back as JSON. So that'll work for us. Yeah, so effects is a separate package that we use for side effects, but it kind of integrates in with the store. As before, actions are dispatched, and those cause state changes, but we can also use those to trigger side effects. So if we want to create a new file under boop level, we can create it there or at the top-level folder. Either way. We'll just put the joke into the boop-level component so we don't have to create a full other component. Okay. So we can name this boop level.effects.ts. Okay. So in here, effects themselves are similar to services. So they're just classes. We want to declare them, import the injectable toke from Angular core. This just tells us that this service can have something injected to it. So that injectable is a decorator. So we do @injectable. Just call that decorator as a function. Yep. Then we're going to export under that decorator. Export a class or boop level effects. Okay. So in here what we want to do is inject the action stream. So this is going to give us every action that is dispatched over the lifetime of the application. So we want to inject that into the constructor there. So if we type in constructor and set that one to private, we're going to create another private variable there for actions. The convention is use actions with a dollar at the end of it. If you come across another Angular app and it has that convention, it just means this is a stream of something. This is a stream of actions. Then we put the colon there. Then we want to bring in the actions import from NgRx effects. It'll be that one. Okay. I don't know why that got included twice. Okay. So next we want to define -- we can start out with the defining what the level is here. Or create an effect that listens for all the actions. Then we can bring in a state there. We can call -- or make dad joke, I guess. We can set that equal to -- or, this will be just a property on the class. Then set that equal to -- create effect, sorry. So create effect is another -- like I said, all these things are functions. It's a function that takes a callback. What we want to do is return this.actions. So we don't want to save this yet because it's going to cause havoc. So under that on line 12, if we -- after the end of that curly brace, we'll start out with a comma. We'll put an empty object there and set this to dispatch false. So we'll have a property with the name dispatch and set it to false. What that does is saying whenever this effect receives an action, we don't want to pump it back into the store. Oh, because otherwise we'd loop. Yeah, otherwise we'd loop. So now if we look at the actions, we can use an operator on here again. Or use a pipe on top of the action stream. Okay. So we want to get the -- if I'm understanding correctly, we want to get the latest value from the store and then use that value to determine whether we should make an API call. Is that right? Right. Okay. So we're going to get each action. We may be a little into the weeds here, but we also want to get a value from the store. So we have another operator for that, that lets you get the latest value. If you open up that pipe, and this is maybe one of the more mind-bendy parts, but there's an operator called concat latest from. And that comes out of NgRx? It'll be in NgRx effects like the other one. Yep, that's the one. So you can replace that one. Then that takes the callback. So we'll need to inject a store also so we can get that data. If we go back to the constructor and inject the store, then -- Why didn't it -- Inject the store service there. There it is. From here, then we'll use that callback to get the latest value from the store. So we'll say this.return. You can return this.store. Then we'll do the select again. We're just going to keep it straightforward here. Select and state, wrapped in parentheses. That's right because it needs to be an any. And like I said, normally we would have more type safety here, more selectors and things. That's at least what we need for now. So next, what we want to do is make some decision off of that. We don't want to dispatch that action. So we can just make this API call for now. So next we'll put a comma there. Here? Yes. Then we'll use the tap operator. Like I said, there's many operators you can use at RxJS, but we'll just use that one. And tap is functional programming, which means we want to pull the value out without changing it, right? Yes. Okay. We're going to say whatever comes through there, we're just going to use it and let it go. So, because we got the value of the stores, right, then what's going to come back -- what will get passed in is the value of the store, which is our boop count. Is that correct? Actually, this one will give you two things. It'll give you the action that was passed in and the boop count. But it'll be in an array. So it'll give you those two things, yeah, wrapped in an array there. Okay. So next we'll say we want to -- and this is where you can define your logic of how you want to make the API request. If you want to do that. Can I make this async? Does that work? You don't have to make it async. It'll be synchronous at that point in time. Okay. So fetch is async. So if I want to get a response and await this, is it okay to make this one async? Is that going to break everything? It won't break anything. You should be able to do that. We can try that, but I don't think it'll break it. Okay. Let's see how this goes. But tap is not expecting a promise there. So it will probably yell at you. Okay. So, I want to get my response. I guess we can just do it as like a promise chain. We can Yeah, so the good part is RxJS supports promises. But yeah, we can just do this inline there. What we're doing here is side effects. Then the joke. Let's go with full response, and we'll be able to set, like -- I guess we can just say dad joke equals -- Yeah, like I said, we're just setting this. This is all happening outside of the store. So if we wanted to pump this back into the store, then we would dispatch an action to do that. But we could just get the response there for this one. So if I set it like this, then, and I guess we can say if boop count is less than 10, we'll say, we'll just return. So must have ten boops to ride. We're not going to use the action, so we can just leave the comma there to skip it. So we got the effects registered, but we need to -- or we need to register the effects so they'll run whenever the actions are -- Okay. So like I said, this is the mind-bendy part. This is -- we haven't modified the store. So we'll need to update the store in order to update the dad joke. So this is happening outside of that loop. I guess in the interest of time, we'll create one more action real quick and use that to -- let's see. We've got to compile. What I was thinking is it should only trigger when we increment, right? I guess if we increment or decrement above the value of ten. Right. But the store -- the dad joke is not defined in the store. So we'd have to put the dad joke property in the store to be able to read it. Oh! I understand. I understand. Okay. But yeah, we can see if we can crank that out quickly here. Yeah, we got like two minutes. (Laughter) So we'll do it really quickly. Let's go to the actions. We'll just throw another action in there really quickly. We'll say add dad joke. Got it. And in the reducer, we'll use that -- in the boop.reducer, we'll add that dad joke. Okay. So in the reducer, we will say add dad joke. We'll set this -- yeah, I think we're going to run out of time. We got to change the state. Oh, we can do it. We can do it. Let's do it. Okay. Count then joke. We'll set that to extreme. Then return -- yell, state.count. We'll have to return new object. What don't you like? What don't you like? Okay. In the boop added, we'll return an object there. We'll have to return an object -- sorry, in the reducer. We'll return an object and then set those two values. So it'll be return state count equals zero. Then count equals state.one. And dad joke equal to empty. Like I said, this is part of what we run into. Then in the boop added, we'll obviously have to update that one too. To return the count and the joke. Oh, wait. But I got to make this actually -- Yeah, you can probably wrap that in parentheses. There you go. So that's in parentheses. It does not like this one. Does not exist on -- oh, because it's joke, not dad joke. Oh, right. Yep, there you go. So I can fix all these. There you go. So then we've got add dad joke. Then just return. We can set this to a value. Return an object. Then we set the count equal to -- yeah. Then joke will be whatever we want it to dispatch from, from the store here. And on line 18, we're missing a comma there. Oh, right. So whatever we want it to dispatch can just be an empty string or something? If we want it to set a string that was coming from the action, we can do that in the action really quickly here. Yeah, you can set it to loading. But this would be whatever the response that comes back from the action is. Oh, I got you. So what comes back from the action is going to be -- Boop.actions.ts. We would add an argument on the end of create action called props. So that would be import props. That'll be a function that we call. Then you would give that props a type, what we want to add to the action. So we would just say joke -- sorry. After props, we would add, right before you call that method, do the type there. Yep. Add the open and closing arrows. Got it. Then object. Then just say joke. Sorry, curly brace, object. Then joke is string. So I have an empty object. Then joke is a string inside of there. Okay. I understand. Types like that are not my native language. Okay. So we've got that. Then in the reducer, we can say we'll bring in the action next to the state there. Next to the state, okay. Then joke is action.joke. That should give us some auto completion there. Okay. So then up here, we need to -- when this is done, we need to dispatch? Yes. So we can do this a couple of ways. You can dispatch -- I guess in the interest of time, we'll dispatch the joke and send the joke along with it. So this.store.dispatch. We'll say add dad joke. You'll call it like a function. You'll call add dad joke like a function. Then you'll pass the -- you'll create an object inside of add dad joke. Then set the joke with the property of the response. So it'll be joke, colon, response. Because it's an object. Right, okay. There you go. So theoretically speaking, this works. Well, we'll have to wire the effects. If we go back to the app module really quickly and type in effectsmodule.forroot. We still use that same convention. That'll be an array inside of there. Then we'll use the boop level effects, or boop level effects class. So that registers the effects that we created. Doesn't like something. Okay. Let's see. Let's go back to the command line. Error occurs in the template of component boop level component. Doesn't like dad joke. That's because it's not called dad joke anymore. It is called joke. Okay. No, it's not. What is it called? We'll define it. So in the boop level component, we will define a property in there called joke. Then we'll say -- we'll set that equal to this.store.select. We'll want to remove the string type there. It'll just infer the type for you. That's easier. Yep. Then we'll use state, any. Then state.boops.joke. Because we had to change it to an object. Gotcha. Then we need to make that one into async, right? Yes. It will be in the boop component. Holy crop. It's working, but I'm now de-dossing this thing. What's my boop level? All my boops are now -- Oh, let's see. We busted that. Let's go to the component itself, the HTML. So this one is no longer the count. Yeah, it'll be state.count.boops. On line 17. Yeah, boops.count. Or count.boops. So it's still running without -- Let's see. Let's go back. Did we take the dispatch false off there? Dispatch false is here. Okay. Still there. Let's go up to -- Is our boop count coming in? Does it need to be boopcount.count? Yes. There we go. Okay. So it starts to explode. We need an escape hatch. If we've already requested it, we'd set a flag. That's fine. We're over time. So, let's do this. Instead of -- this is good enough, right. We proved that it works. We would need to set like a flag in here that said, you know, if a joke hasn't been requested and then do another check that if we go below nine, to clear that flag. That part is just logic. I get that part. But this is super powerful stuff. If somebody wants to learn more, where should they go next? Yeah, if you want to learn more about NgRx, you can go to NgRx.io. We have docs there that show you, kind of walk through the whole ecosystem of libraries here. We talked about store and effects. There are other libraries for -- like if we wanted to do more granular, local state, there's component store for that. Also, ones for hooking in with Angular router and managing collections is another one. Oh, nice. And even ones for if you're managing a lot of collections and you want all that data wrapped up for you, there's inject data there. Lots of stuff, yeah. A lot of stuff you can choose depending on how much you want to get out of the platform. Great. And if you want to ask questions directly to the maintainer, go follow Brandon on Twitter. Let me do a quick shout to our live captioning. Rachel, who is staying late with us today. Thank you so much, Rachel. Sorry for going over. She's here from White Coat Captioning. White Coat Captioning is made possible through the generous support of our sponsors. We've got Netlify, Fauna, Hasura, and Auth0 all chipping in to make this show more accessible to more people. While you're checking out the homepage, head over to that schedule. We have so much good stuff coming up. We're coming back on Thursday. We're going to figure out how to bring any data source into GraphQL using StepZen with Carlos Eberhardt. Click that add to Google Calendar button. It doesn't take your email or anything, just letting you know when things are happening. Dang. All right. Lightning round exit. Brandon, anything you want to add before we call this done? A quick shout out here. We talked about Nx at the jump here. We're doing a conference for Nx, September 16th and 17th. You can go to nx.dev/conf to find out more about that. It's free. Got to throw that out there, too. Feel free to register that ticket if you want to learn more about Nx and how you can build some cool stuff with that. Definitely check that out. Excellent. All right. On that note, we're going to call this one done. Chat, stay tuned. We're going to go raid TypeScript Tea Time. Brandon, thank you so much for all of your time today. Really appreciated it. We will see y'all next time. Thank","[(0, 0.5027197), (1, 0.033822425), (2, 0.46345788)]",0.5027197,0.033822425,0.46345788
"Tamao: Leandro here has fantastic story, you’re very early in your journey, or you at TomTom. So we’ll hear some of what you were expecting, or what you looked into, and where you think you’ll be going. So we’re excited about that. So excited that you joined.All right. So a little bit of promo, why don’t you give a pitch about TomTom and, you know, what the company offers? You mentioned something like, you know, “You might not know that we power a lot of maps that you use all the time.”Leandro: Yeah, so let me try this out. How many of you guys here use TomTom? Raise your hand. Okay, I see a couple of hands up, that’s great. Now, let me ask the question in a different way. How many of you guys have an iPhone? Okay. How many of you guys develop on Azure? Okay, more hands. Good. Okay.So you may not know it, but you may still be using TomTom today. Every time I say, “Oh, I work for TomTom,” they’re like, first of all, like “Toms Shoes in the U.S.?” I’m like, “No, Toms Shoes.”Then the other thing that I get is like, “Oh, the GPS?” Right, I mean, I get asked this all the time. Yeah, the company started as a hardware consumer electronic company moving now more to enterprise and, you know, in a way, we’ve always been a true tech company.So we are powering Apple Maps, we are powering Azure Maps, we’re powering the Uber Driver app, as well as many other companies that, you know, I don’t know if you guys know Trivago, Alteryx, and so on.So and you may not know it, but you may still be using TomTom today. And my mandate, you know, TomTom’s first year in dev rel is actually my first year with TomTom as well. So yeah, we’ve been building the developer community around our maps, APIs, and the developer portal.Tamao: Excellent. Yes, I actually didn’t know any of those as well before we chatted. So I said, “Oh, I don’t have one of those devices when I’m driving around, I just have my phone.” But I was using TomTom technologies. Which makes it more important, right? Because it’s the dev rel team that’s going to help drive that. So you’ve been working at TomTom now you said about a year?Leandro: Correct.Tamao: Year plus. Okay. So some of my questions were, I was very curious. So what was the interview process like in terms of what the company was looking for when they decided we’re going to hire someone who’s going to lead dev rel? What kinds of things did you discover? Like assumptions that they might have had, and I said I was going to put out sort of devil’s advocate, you know, there was a platform, some people might think, “Well, it’s good enough with the teams that we have. We don’t really need specifically a dev rel team.” So let’s get…Leandro: Yeah. So happy to give it a little bit more context about that as it will be helpful probably for other people as well. So the reality is even though I’ve been with TomTom for only a year, I’ve been working with TomTom for the last six years. I was in two different startups working on the other side of the table, and I really enjoyed working with the company, and it was the right time for me to actually switch to this side of the table. So that was actually super interesting.I was actually helping them more with mobile search and helping them monetize their consumer experiences. And I really enjoyed the vision that they had more for the future and the different things that they were getting involved with. The reality is that, you know, developer.tomtom.com still existed even before I joined.But it was more of a documentation repo. Right? Like a repository. So then you may argue, and, you know, we were talking with them now, it’s like, “Well, you know, is the repo good enough?” And the reality is that it’s not.So the interesting thing was, before I joined, the developer portal was more of a channel. Meaning, you know, with the companies that we talked about. Like, you know, the Ubers and Microsofts of the world. Like a businessperson talks to a businessperson or to a product person, and then they will go tell the engineers, “Hey, we’re checking out TomTom’s stack, go check their stack.” And then they will come to the portal and look a little bit into the documentation, and then say, “Hey, yay, nay.” Right? And then take it from there.But one of the reasons that my vision resonated with TomTom was I, in all the different roles that I had before in different startups. You know, and I’m an engineer with an MBA, so a little bit of both worlds. It’s been doing business with a product hat then actually looking at the portal as a product in itself. Right? So with its own service, its own audience, its own reliability, and so on.So not just a bunch of documents that may be different. The quality and consistency of the documents may be different depending on which product units was working on this product. So it could also be confusing. Right?So the vision was, okay, we’re going to treat the portal as a product that is serving mainly three different developer audiences. Right? You have the freelance developer that includes the hobbyist, and the student, then we have the startup developer. If we want to catch the next Uber, we want to catch them early. And then the enterprise developer is the typical one that we were working with before more of the portal became channel. Right?And then comes building the true community. So I don’t know if, you know, this is going to sound fluffy, but it goes into metrics. Right? So what’s the definition of a community? It’s something that we’re building here as well, it’s kind of meta. Right? We’re building the community of community builders which is great.But there’s a book by Charles Vogl, who actually lives in Berkeley, and a really great author, called The Art of Community. The definition that resonated with me a lot was, it’s a group of people that care about each other’s welfare. Very nice, little fluffy. But how do you translate that to a true community? Right?So a true community is, as we said, care about each other’s welfare. So how can you do that in a digital world, global scale and so on? You need ways for people to connect with people in different ways.And if you look at the documentation, repository is basically a broadcast mechanism. Right? But if you really want to build a community, you want people to connect not only one-to-many like we were doing with the documentation but also many-to-many and one-to-one.So that translates into different features that you need in a portal, right, on different products anyway as well, right? I mean, you need a blog, you need a forum, and you need ways for people to connect with each other.In terms of KPIs and metrics, as we were talking last night as well. Well, I mean, you can actually measure in this digital world the kind of interactions that you have. So that’s where we’re moving.Phase one was launching the blog and making sure that we have the right contributors and the right blog materials there. And then we’re going to move into the forum and all the different connections.Tamao: Well, that segues perfectly into the next question. Because some of what we talked about, right? How many people have you built your team into right now?Leandro: So the team right now is actually about 30 people.Tamao: Oh. All right. It’s a lot bigger than I remember.Leandro: Yes, it is.Tamao: It’s TomTom scale. Yes. But still you felt like, you know, you had to make priorities, right?Leandro: Absolutely.Tamao: We talked about, so he just mentioned these phases and I felt certainly phase one for me or maybe even phase one and two was digital first. Right? So I assume for scalability. So can you talk a little bit about that in terms of, you know, that versus conferences and feet on the ground that…Leandro: Absolutely. So yeah, in terms of the scale, right? I mean, 30 people includes the portal itself, that includes marketing, product marketing, and also now a developer support team as well. Right?So first things first. Right? I mean, the first thing was, “Okay, we need people to actually know that TomTom has this.” Right? So digital first and awareness first.Now the good thing is that we’re getting more and more people into the portal. We want to make sure they’re finding what they need. And that it actually resonates with them, and makes sense with what they’re trying to build. So first phase is awareness. Right? You know, then making sure that, you know, they’re finding what they’re looking for in terms of measuring the time in the portal and so on.And it’s kind of funny in terms of metrics. Right? You can not get confused. A lot of people are trying to get typical consumer websites or apps metrics into a developer portal.And the reality is I care about you registering and getting the API and, you know, getting up and going. I may not care about you spending a lot of time in the portal. If you spend a lot of time in the portal, it could be a good thing or a bad thing. Right? It could be a good thing because you’re finding what you’re looking for. It could be a bad thing because you’re not finding what you’re looking for fast enough and then you go.So we need to also make sure that we interpret the metrics properly.Tamao: Is there anything you’ve done to drill into that? Like, do you do surveys? Or do you try to find active users say, “Would you be willing to tell us why you spend so much time in the portal?”Leandro: Yeah, yes to all. Actually, I look forward to sharing notes with all of you guys later on today. But, you know, talking to developers and getting them to answer surveys is really hard.And so yeah, we actually have done all of the above, even calling them. The calling ones, very few actually answer, but the kind of information that we got was golden in terms of the ones that were willing to talk to us.Surveys work a little better, but also lower response rate than what I’ve seen in other audiences. So I welcome other ideas into how to best get, I mean, we have a churn. Right? I mean, people that come, and then they leave. And I would love to understand a little bit more why they leave.I have a lot of hypotheses. The way that we’re going about this is using like scientific method. Right? We have a hypothesis and we start testing them. So that’s the best that we came up with.Tamao: Do you guys have a pop-up in the portal that says “Please tell us,” or no?Leandro: We do have a pop-up in the portal, but it’s not, no sorry, it’s not a pop-up, it’s a side tab that you can click on. So we don’t want to be, like, too much in your face but…Tamao: I’m really amazed you got people to answer their phones when you called them. It’s pretty amazing.And actually, did you have an incentive to give away? This is something I feel like we talk a lot about dev marketing and dev experience. Sometimes if you try to say, “Oh, we’re going to give you a gift card,” it kind of lowers the benefit or the value of the experience for the giver. Did you just say, “Hey, can you help us out and be part of the community?” Or did you have some kind of incentive?Leandro: So we actually have tried both, and the reality is that both work different in different markets, I found. Some people want to do it because of the goodness of their heart, and then it’s actually good. It’s kind of like the Benjamin Franklin theory of favors. Right? I mean, if you ask a favor and they are more invested in your success and that has been great.And in some other markets, we actually need to give some kind of an incentive. But I’m trying to give a meaningful incentive that actually, you know, help us get more feedback as well. So one of the features that we enabled in the portal is the promo codes. Right? Being able to, you know, for us to give promo codes to people and for those people to give promo codes to other people, and to be able to use more of our products to get more feedback.Tamao: Yeah. Yeah. I was at a company once where they have a really strong brand, and a developer was saying like, “Oh, you know, I really want a shirt or sticker. Like, how can I earn it?” And they go, “Oh, you just go to our store and buy it.” And that person just sort of slumped over, and said, “Oh. I kind of wanted to earn it.” You know, I always really remember that moment because I thought, oh, sometimes if you just give stuff away or say, “You can exchange with money,” that’s often not close to our hearts in this world, right?Leandro: So funny that you say that. One of the things that I love about TomTom, and I don’t know if you guys have seen them, we have TomTom socks. So I did a “socks for survey” program at some point. That was fun. So you earn it.Tamao: Yes, excellent. So as part of that, one of the things I loved in our conversation back to priorities was I said, “You know, how do you 80/20,” like, were there some low hanging fruit that you knew you could fix a few things but would deal with more later. Or did you just say, “Okay, this is our path and even though something really annoys me,” like you mentioned like, “Ooh, there’s too many steps in the onboarding process. I really want to fix it.” But you are like, “No, no, got to prioritize that later.” So how did you…Leandro: Yeah, so we touched a little bit upon that, and then I want to answer that, but then I also want to talk about online versus offline and meetups and so on. Right? But, yeah, I mean, the onboarding process really bothered me. But first things first. Right?Tamao: Explain.Leandro: Yeah. So in terms of the onboarding process, I’ll go a little bit into detail, and then you bring me back up. But basically it’s like we had this difficult process that was like five to seven steps depending on where you landed and where you came from.And it’s like you have to put your email, then you have to verify the email. Of course, you have a big dropout when you have to verify the email. And then you put the password and then all the different fields that you have to complete to get an account. Not a lot of people wanted to fill all those fields. And then it was validation as you go. So every time you are putting something, everything else became red. It was so annoying.So it kind of really bothered me, but I was like, “Before we fix that, we actually needed to fix the awareness and make sure that we were having a little bit more data.” Right?I mean, because as I said, the scale of the portal was very small when it was just for an enterprise channel, because it was just a couple engineers from the enterprise conversations that were coming and checking stuff out, versus when you have hundreds of thousands of people coming and so on.So yeah. And we saw that it was not only my perception of pain, it was everybody else’s as well. So we actually first, we fixed the awareness. We actually were able to target people much better with the proper awareness campaigns in different channels that we’re still tweaking. It’s a continuous improvement process.Then we actually started fixing the onboarding. So last month we fixed the onboarding. So if you go to developer.tomtom.com and create an account, we welcome your feedback as well.And, you know, phase one was actually making, we changed from being like five to seven steps to being three steps. We want to make sure that we don’t get crappy emails because then it doesn’t work for anybody. But we also want to make sure that that’s not the big dropout. So we’re looking into different ways to defer verification, or verify with another kind of login.So welcome your feedback on what you guys have been doing in your portals as well. But making sure that the steps, it takes less steps, and it’s easier to just get going. Then you don’t have to first create your account, and then have an API key. When you create the account, the API key gets created. So that’s just one more step that is not there anymore.So these little things help. Right? I mean, and it’s good that we’re fixing it now that is relatively early because when you see a couple percentage improvement in the onboarding process, now it’s not many people. But as you’re getting more and more people through the funnel because you are able to get the right formula to capture the right people to come, then those couple percentage points, they make a big difference.Tamao: So we’re actually coming down to our last minutes so… But I want to ask you’re, like you said, we hope to check-in in the future, and see how things are going. But how are you planning out your next 12 months?Leandro: Yeah. So, honestly, it’s just doing the phase two and phase three of everything that we were talking about in terms of creating the true community. I don’t think we are there yet.We have a more intimate interaction with people through the blog versus just having documentation and being able to have the right voices for people. The idea is to have forum, Q&A, and other things to make sure that the community is a true community, the people can connect with each other. Right? And that helps us as well.We actually launched our Twitter @TomTomDevs channel. And it was great because the first followers were actually developers using us. So that’s how we started the conversation that we want to make sure to bring that conversation into the portal as well. And then keep improving the onboarding process and so on.And then also we hired a developer evangelist in the U.S. and in Europe because we also feel that the offline interactions and meetups makes sense. And we’re trying to figure out what’s the best way to use hackathons. For us, it’s been more about gaining feedback on partly previewed products at the moment.So yeah, I look forward to checking in next year as well. I look forward to chatting with all of you and sharing notes during the rest of the day.Tamao: So we probably have time for one question, if there are any. Oh, here’s a hand right here.Audience Member: Hey. Mic is on?Tamao: We need the second mic on unless…Audience Member: Testing, testing, testing. Hey, thanks for sharing your experience. Really enjoyed the talk. I’m curious about how you are tracking and making sure that you’re staying on, you know, on a successful path toward achieving some of the goals that you’ve set out. And then second part of the question may be a little bit of a trail off in a different direction but, haters, how do you deal with them? How do you neutralize them? And do you actively engage?Leandro: How do I deal with what?Audience Member: Haters, haters.Leandro: Haters, okay. So number one. Okay, good question. I think I have an easier answer for number one than for number two, but I’ll give you my hypothesis.But for number one, I think at the beginning we were focusing, and I think this is important. Right? When you have larger companies that have a marketing department, and business, and product, and engineering, I feel like the focus was on the wrong thing.It was more about vanity metrics in terms of the numbers of visitors that you have. And the reality is not about the number of visitors, it’s about the quality of visitors. So we’re changing that to making sure that we’re focusing not on the visitors but focusing on the registrations and the active user base. Right? So I think that’s actually very, very important.And those are the “lag” metrics because when you see them, you cannot react to them, Right? I mean, it’s just about you can fix it for the next month. But then looking at the leave metrics for that. And the leave metrics for that that you can control every day is the interactions that you have with the portal, the number of connections, as I say one-to-one, one-to-many, and many-to-many. Right?So as long as you have healthy activity, you see that going into more active users. More people registering and more active users.In terms of haters, my philosophy has been, well, I just want to make sure that we’re part of the conversation first. Even if they hate you, it’s good to be part of the conversation because now you’re top of mind, number one. And I see a little hit more of that on Twitter versus other places.So when you actually start getting haters, the first thing is like, well, we’re officially there. It’s good.And then in terms of how we’re going to be dealing with that, we are going to have moderators because we want to make sure that we create, and I learned this also from Developer Week. It was really interesting to be at Developer Week and seeing how the profile of the Developer is evolving, having a more diverse base in terms of age, gender, and background for developers.And we want to make sure that it’s an inclusive environment, and that we don’t throw people off just because they’re in the beginning stages of their developer journey. Right? So I think kindness is important.We’re learning from Stack Overflow in terms of what they did for making sure that you, you know, think something is kind or unkind for the community to be able to help itself. So that’s where we’re going with that.Audience Member: Thank you.Tamao: Well, thank you so much. Thanks for your questions. And thank you for Leandro.Leandro: Thank you so much.Tamao: Thank you for coming. Thanks.Leandro: Thank you.","[(0, 0.39150605), (1, 0.19409886), (2, 0.41439512)]",0.39150605,0.19409886,0.41439512
"Hello, everyone, and welcome to another episode of Learn With Jason. Today on the show, you're dealing with me, just me, no one else. We are going to work on some stuff. So, first and foremost -- oh, nice. Thank you for -- wait. Oh, no, the 404. Where did it go? Hmm, that's not good. We should fix that. So the Party Corgi is 404'ing. We'll figure out what's going on with that. Why don't we just flip right over to some desktops here and figure out what's going on with the Party Corgi Discord. Let's see. There it is. And where's the website? There's the website. Let's find -- oh, no. Did we accidently lose this in the -- here's the code of conduct. Okay. I don't know what happened. We need to get that back on the website. But for anybody who's looking for it, the code of conduct is here. Oh, it got moved. The URL -- okay. So we need to redirect. So the code of conduct is up and live, but we need a redirect for it. I bet we could build one of those. Let's go look real quick. I believe -- here's our redirect. That should actually be working, and it appears that it is not. So we should go figure out what happened. Okay. Well, that's a mystery that we should go and investigate. Also not what we were planning on doing today. What's up, everybody? How are you? Luke, your sub ran out. Well, I mean, you know, there are hackie ways you can boop. I probably shouldn't show you all this, but I'm going to do it anyway. There's a chat command that apparently doesn't work anymore. Fun. We're having a great day here. Looks like my overlay is being weird. I've had internet issues all day, and I'm wondering if there's something upstream or if it is something with -- man, just so many problems today with my API not working the way that I want it to. It should be showing this. Right. So there's that. For some reason, it's not updating in the -- man, just got issues. Just got issues today, everybody. So I don't know why it's showing the wrong thing here. I'll tell you what. How about this. How about we do this today. Before I forget, let's do a quick shout out. We have Rachel with us today from White Coat Captioning. White Coat Captioning is always with us doing live captioning for the episode. That's on the home page at learnwithjason.dev. Six months of Luke. I'll take many more than six months of Luke. And then the live captioning is made possible by our sponsors, Netlify, Fauna, Hasura, Auth0. All kicking in to make this show more accessible to more people. Make sure you check them out. These are all clickable on the homepage. Go and check those pages out. We're also, unfortunately, you hanging out with me today. That's what we are up to. Hey, what's up, Michael? Yeah, so Pachi was scheduled for today. She needed to reschedule last minute. So we are still going to do that episode, but we're not going to be able to do it today. So today I called an audible. I'm doing some solo stuff. Thank you for your understanding there. Yeah, I'm trying to figure out what's going on with my stream. So, now that we've done the things here where we've talked about the captioning, we've talked about the sponsors, let's go figure out why my serverless functions aren't doing what they're supposed to do. Look at this API, right. This API is showing me the right episode information. Local development of serverless functions on Netlify. Great. That's what we want. For some reason, this overlay down at the bottom here is picking up cached data. So I need to figure out why it's picking up cached data so that I can get it to stop it. So let's poke at the Learn With Jason repo. I have my scenes up here. This is what we're looking at now. It's a website, and the way that it gets data is through this hook that says use current episode. That use current episode is hitting a sanity API. Why doesn't it hit my API? Oh, boy. You know what? I thought I was going to have to come up with a project for today. Looks like we had one handed to us by me writing bad code. What a great time, everybody! Great news! We've got broken production issues that we can fix as part of the stream today. Yes! Excellent. So, let's -- yes, the compooper is misbehaving. Really, it's me. I did something wrong. What are you doing, computer? Why? Why are you like this? (Laughter) Oh, what a great turn of events. Okay. So we're going to pull down everything here, make sure I've got all the latest bits. Then I'm going to open this up. What I want to do today is I actually wanted to talk about how we can build serverless functions locally because I feel like serverless functions are one of those things that they're really powerful, they can do a lot, there's a ton of potential with them, but getting started can be a little bit intimidating because it's an unfamiliar setup. If you've never used it before, it can be a little daunting to be like, well, where do I even start? So, what I want to do is jump into these functions. So this one is doing a use boop. That's not what I want. We don't want the boop. We want the current episode. So I want my current episode to load from the Learn With Jason site. I don't know why this isn't doing what I want it to do. This shouldn't be cached. This should be pulling the date from today but it's not. If I go and reload this, maybe it's doing something it shouldn't. Refresh. It's still pulling the wrong thing. So why? Why are you like this? So let's see if we can figure it out. I'm going to open up the Sanity API. Then I'm just going to copy in my query. And my date time. My date needs to be -- what's the format for a date? Is it going to show me? So if I do like 2021-09- -- what's the date today? The 24th. Then I need a capital T to show it's time. Oh, boy. Time in GMT -- no, UTC. So we need it to be So that would be Z. Is that right? Let's find out. Nope, that's not it. Or maybe I just need to sort. Does it need to be earlier? So let's go with, like, No? Hmmm. Did I do this wrong? Oh, yeah, it helps if you know how dates work. Building streaming data model with pie torch. So these are all out of order. That's an issue. So in addition to this, we should sort. Is there a sort option? Let's find out. Where, limit, offset. No. So I have to sort it myself, which I assume I'm doing down here. Sorting. Okay. But does it have even the right data in it? Personalization, apps, UI, Twilio request, Reactive state management. This is the wrong date. Like, it's edited in my Sanity instance. So, let's -- oh, wait a minute. No, it's not. No, it's not. It's not edited. It should be hidden, though. Let's see if I can get -- hidden on website. Is there a hidden in website? I have that setting somewhere. So I want it to be hidden. I guess we would want not true. Right? Then if I do that, we shouldn't see -- we don't. Ha, that's the problem. So this is not serverless at all, but it is going to solve this particular problem. You know what I'm going to do? You know what I might do instead, actually? Let's look at the -- if we look at the schedule, this is my serverless functions. Because it's hidden, it skips. So let's refactor this to actually use our serverless function. Instead of doing this sorting like this, we can load the episode by getting the HTTPS. Then we'll get learnwithjason.dev/api/schedule. Then we can get the -- we don't need any of this body. We can just do it as a git, in fact. We can get rid of all this stuff. So that's gone. Get it out of here. Then we can go even further here. Okay. Go to the res JSON. Then I think what we get back is just episodes, right? Then we don't need to get that. So we could just return, like, episode zero because they're already sorted. So this should get way easier. All right. Then we should get our episode.title, episode.slug.current. Is that right? Episode title, episode slug current. And guest name. Hey, hey. All right. So that should actually solve this problem. So let's just give it a shot. What do you think? I'm going to run it locally, so we'll run Netlify Dev to make sure it's doing what I want. See a little behind the curtain here of how I just push directly to production on my site. (Singing) dates in JavaScript. So this is running. If I pull this over to the right browser, we can then go to -- all right. So it's already doing what I want. We can see here that's working. If I go to the monologue scene -- okay. So this is pinned to a certain size. That is what it needs to be. So that's good. That's good. We like it. We're happy. Let me get out of full-screen mode. Let's close this browser. And let's ship this thing. Let's fix the stream on the stream. We're going to fix, use the API instead of direct GraphQL call. Pushing to production. We'll push it live. Then I'm going to just watch this build. Hopefully it opens up in this browser. It, of course, did not. It opened in the other browser. So let's bring this over. We can see this building. This should only take a second. Ship it. I like that alpaca. That's good. So that's live. Let's refresh the scene over here. And? As if nothing was ever wrong, we've refactored that code and we're now using an API. Yeah, yeah, yeah. So this is all dynamic now, right. One of the problems that I have is I spend a lot of time on the admin of this. So I have help. I have Aidan helping me out with a lot of the scheduling stuff and getting things on the site, but there's a lot of asset generation that has to happen. So if you look at the site itself, there are these episode assets with the play button. Then if you go into one of the episodes itself and you take it over to the Twitter thing and you go to automate some stuff, there's that. Then if you go to the schedule, there's this card as well that has to get generated. So there's a lot of pieces that have to get put in for each of these to be generated. I don't want to have to do that every time, and I don't necessarily want anybody to have to do that. It's a template, right? So this uses the API data that's at /api/schedule. There's also /episodes. This will get you the first 50-ish episodes or something. Then you can also, if you want, get an individual episode detail as well. So we can go to episode automating. That'll get you a singular episode. So there's definitely some options there. And this is all -- like, core is enabled. You can use it whenever. If you're trying to use an API for building, this can be a good tool. That's why I opened it up. So people who want to learn can use the Learn With Jason API as a free API with a lot of data. It's got images in it. Those are all CDN hosted. So you can do a lot with it. Go wild. Go do whatever you want. Make some cool projects. Hey, if you use the API, let me know. But I love this. The Twitter cards are using my Cloudinary package. Oh, another fun thing that I did recently to make my life easier is -- oh, not the API part. Let's get rid of this. Check this out. I just built a thing where if you want to make a card, you can just go to poster.jpg on any episode, and it'll make that poster. So we can go in here, and here's Moriel's episode. If I add poster.jpg to the end, it makes a poster. This makes me very happy. Then you can just save it as whatever you want. We'll put it in the downloads. Ba-da-bing, ba-da-boom. Oh, no. It doesn't want to download. Don't you do that to me. So, I got to figure out what happened there. That's too bad. Anyway, like I said, we're fixing it live. We're doing stuff in production. But my whole goal of making this stuff work is to just automate things. The way this works, if you want to see how it happens under the hood, this is the Learn With Jason repo. So you can poke around in here. Yeah, I'm not sure what happened there. I got to go figure out why it's changing the file name because that seems bad. But we will, you know, see what happens. So the way that works right now is I have a function. I have a lot of functions that are built to do a thing here. So we have the episode one, for example. It takes -- hold on. Why don't we show this locally? Then we can mess with some stuff. So I'm going to move into -- let's close down this one, open up this one. We'll open up learnwithjason.dev, pull everything down, make sure I'm using the right version of things. There we go. Okay. All good. Looks like my package JSON changed. Must have done something. I don't know what it was. Let's install. This is running Toast. I don't know if Chris Biscardi is on the chat, but shout out. Oh, the URL of the API. Yeah, if you want the API, it's learnwithjason.dev/api/episodes. You can do schedule as another. If you want to get a particular episode's details, you can add the episode slug. Episode/slug. So those will let you run. You can do quite a bit with that. So we've got this install running here. Let's open this thing up. And inside, I have this folder full of functions. So one of the things is all of the commands in the chat actually run off of serverless functions. If you send an ahem, it runs off of this serverless function. So you send the command, it listens for any command to be fired, and then if there is a command that matches, like this one called ""ahem,"" it will run off this audio and this image for this many seconds. This is kind of a fun thing. If you want to make a sound effect for the show, you can do it as a pull request. So one example of this is Brittany made, I think, Jamstack. Jamstack. There it is. So, she made that and submitted it. Now there's a sound effect for that. So if anybody wants to pull request in sound effects, this is the format. You can do it. But that's not what we wanted to look at. I wanted to look at -- let's look at this /poster and figure out what's going on with it. I think -- how is it working? It should be here somewhere. I think it's episode. Holy buckets, did that just work? (Laughter) Yes. What listens for it? So what listens -- You hackers. You dirty hackers. A project I made called Socket Studio. This is not a particularly -- like, this is very much like, hey, did you build a project for yourself and release it to the internet? But I have Socket Studio here. I haven't really put anything into it yet, but the way that it works is it's got this kind of core server. This is a web socket server. It runs on a pretty straightforward -- like, it's an express server. It uses Apollo. It does subscriptions. When it opens up, what it does is it listens for the Twitch API. So Twitch runs on IRC. And so, I use something called tmi.js, which is like a wrapper around Twitch's notification layer. So when I listen, it looks for any connection. So it gets a chat client. This chat client goes into the Twitch API and uses a bot user, which is the Socket Studio. That's what replies in the chat when you see, like -- when you use a command and see Socket Studio put a message in. That's the bot that we're using here. It subscribes to my channel. It's actually configured that you can set up any channel to work with it. Then when it does that, it starts -- it listens for events. So if the ready state is open, it'll say it's open, et cetera. When you create a chat bot, it will add a listener that says -- where is the actual listener? Client on subscription, client on resub, et cetera, et cetera. Each of those is an event that comes from the chat. Then we are able to use those to send off message. So for example, this one does a client on message, it figures out what the message is, and then if it's a command, it will send off the command. To send the message -- where is the actual bit? We parse the command, and when we parse the command, we are able to figure out what that command is. Where does it actually get the -- it pulls out what the emotes are. There's a request that it makes at some point to enhance that with the data from the serverless function that I'm not 100% sure where I put that. But it's in here somewhere. Are you in here? Commands, it's going to be in here. So get commands for channel. It does a request for all of the registered commands. I use Hasura to keep track of them. They just get thrown into a database. This channel has registered this command. That's to prevent somebody from, like -- if somebody was able to get a PR committed but I hadn't added it to Hasura, they wouldn't be able to call it yet. The reason for that is that if, say, you had a bigger channel and you had committers, somebody who had access to your repo and something went wrong, like the relationship sours and they went and did some stuff, you can make it so that only you take a new command live, even if somebody were to put one that's really problematic in and they can get past your code review. It's like a double-verification thing so you don't get yourself into accidental trouble. Once it loads, it sends off a fetch for the command handler. This is the actual function URL. Then what it gets back from that handler -- so it sends off the Twitch data. This is the message that came from chat. This is the command, any arguments that were sent, who sent it, which channel it came from, and then that comes back as data. So we get back the name, message, description, audio, image, and duration. That's what actually gets sent to my seams. My seams then play the effect. So it's a little bit of a round robin, but it makes it way easier for me to deal with new effects and stuff than having to hard code them in or anything like that. It's sort of a set thing. So I want to look at why my poster isn't doing what I want. I have a poster that can be set here, and when I get that poster, it should be creating a poster. So when you request an episode, what is happening here -- let me close this one and we'll use this one instead. So I'm going to run Netlify dev. What we get inside of our poster, or inside of this function, I should say, is -- okay. It's loaded all the episodes. Can you believe I've done 221 episodes of this show? I sure can't. I keep this in just to remind me. Okay. Now we have a local version of the site running here. If I go to /api/episodes, I will hit the local serverless function and get that data. What we're interested in is the episode flow itself. So let's grab here. Okay. And we're doing episode with Node CLIs. If I add a second piece to it, which is poster.jpg, it should send back the poster. So, it does. That's what we want. That's how it works. Then I'm using a rewrite. So this is maybe a moment of truth here. Does it work if I don't have the extra rewrite? No, okay. So something is wrong with the way that I'm delivering this image in general. So let's reverse engineer this a bit. This is what I think is exciting about working with serverless functions locally. We're able to just try this stuff instead of having to deploy it every time. So we've got the ability to fetch. We're using Netlify's on-demand builders, which if if you're not familiar with those, they are basically a way that once you've set up a function, you can cache the output so you don't have to run the output over and over and over again. It's powerful stuff. I use it a lot. It's like the API -- the reason I'm comfortable opening my API is if someone spams this, they'll get the same response back. It's cached so they're not running up my functions usage or anything like that. It's just getting a cache response. So that's what this builder thing does. The way that works is down here. We just wrap the handler with builder. That's all we have to do. Everything else is the same. Then we have the ability to make a request to Hasura. This function is just a helper function that sends off a request. It uses -- you know, Hasura needs an admin secret. We need the URL. We have to send the query and variables. This is just a little housekeeping so I can share it between files. So I request that, pull that in. Then what we're doing here is we're getting the event, and I want the path out of the event. So the path that we get when we are using serverless functions is we get -- let me just go back here. Let's request and look here. So the path that we get is just whatever the URL is. If I change this and say, like, you know, some other thing, then it'll still hit this function because we've got the redirect set up for API episode and whatever. It'll show us what the path is. So what I'm doing then is I am -- let's get into here. I'm breaking up the path on the slashes after removing the /api/episode. So when I hit the regular episode name -- so if I take these out, let's go here. Just go to poster. It hits. What we'll see in the CLI is it does it like this. So we remove the API episode so we end up with a slug and the poster name. So there's the slug. There's the poster name. The poster might be false. Then we split. So once we get down here, if I log what we're getting out, get the slug and the poster. And I can run it again. We end up with automating task with Node CLIs and poster JPEG. If I hit it from api episode, we get the same thing. If I leave out the poster part, it gives me the API response and poster is false. So that's the setup for this function. Are we getting episode data? Are we getting an episode poster? You can request the transcript if you want. That's a slower call, that's why it defaults to false. Then I check to see if it's the starting soon or the poster. If you go with this one, it's like that. Then the starting soon just has different text on it. This is what I actually show in the scenes. So if I switch over to my scenes here, once it loads -- I got to make this faster. Oh, no. I got to figure out what I did there. (Laughter) The inception. So this is generated on the fly. So I can do those scenes. I use Cloud Flare. Sorry, Cloudinary, to do that. So, got the slug and the poster. We can see here it says the poster is there. Then I make a query for the episode that has that slug, and I get the details that I need. Title, slug, description, who the guest is, who the host is, demo, repo, links, et cetera. Then once we get down here, I pull out the guest. Or I pull out the episode details, the guest, and then the thumbnail is -- you actually pull out the guest image asset. We're turning it into a base 64 encoded string because the way that works is we are actually building a Cloudinary URL. This is the part where we get into that. This works through the fetch API, Cloudinary's fetch API. So to use this, I have my -- like, my con stance -- sorry. I'm going to apologize. This is going to get messy. I didn't ever think I was going to show anybody this code. So, apologies. So I set up what the default width is and then I'm multiplying that by different scales. Then I have an aspect ratio with this width and height of 1280 and 720. So then we build out what the URL should look like. So with this one, we're saying the width should be 34-ish percent of the total width. And we want to make that -- the image should fit. So no bars or cropping. We want to set the text color to white. We want to set the gravity to northwest. Then the offset from the left to like 44-ish percent, offset from the top to 32% of the height. Then we use text. We set the text to be my font that I've uploaded to Cloudinary. We round it off to be whatever the percentage of the width divided by the total width is times 18. This is math, but I just tinkered until this looked right. Then I set the line spacing to zero and use the text starting soon. So that is how I get -- this is a lot, right? This is the string of the URL that creates the text ""starting soon"" when you are looking at this. That is how this gets positioned. It's how it gets sized and how we're determining like what the scale of it should be next to everything else. Hey, what's up, Alex? Good to see you. Thanks for the raid. And then we get to the file name. So if Ben did some guest hosting on the show, so we use a different episode template card. Otherwise, we use this episode card. I can show you what these look like. So, let me get just one of these. We'll get this one, and let's go out here and I'll go to here. I think it's /lwj/episode.jpg. So this is the template. Actually, let me make it a PNG so you can see what the template looks like. If I move this around -- it won't let me move it. If you can see -- if I could move this, you could see this is a hollow space. There's nothing behind this. This is just background color for the browser. Then if I do, like, episode-ben-hong, it's the same template, but we swapped out Ben. So what we're doing is inserting all of this extra stuff in here. This is the text for whether or not it's starting soon. This is the actual poster URL. So we set the width and height to be, like, 1280x720. We want it to fill that space. If it's a little off, it should prop, not leave bars. We want to set the quality to auto, format to auto, and then we fetch. So when we fetch, what we're doing is we are getting the thumbnail, which is the guest avatar, which is the one way base64'd. The reason is to we can put it in another URL without causing issues. Then we've got the width, which we want it to be like 31%. Then it's square, so the height is 31%. You fill that so it's a square crop. Put it up in the northwest. Then we offset it. So northwest is, you know, north and west. Then we offset from the top and left by doing it like this. So we want it 46% off and around 11.5% from the top. We put in our starting soon text. Then we just do all that stuff over and over again. Here's how we place the title, and here's how we place the guest name. All those good things, which then leads us to this kind of image. So if it's a poster, right, each of these automatically generated from these details using these URL structures. If it's the poster, we do the same thing. There's some logic in here to move stuff around a little bit. So if it's starting, then we use a different offset for the text. I think we do that in a couple places. With the starting soon text, if it's not starting, we just leave it empty so it doesn't get included at all. Otherwise, all these details are the same. So you'll notice the guest image, their name, and the size of this doesn't change. The only thing that changes is the top offset of that text between the two posters. That's all. So I'm able to do a little hackie stuff to figure this out. Now, is this easy to read? Absolutely not. Every time I have to change this, I effectively have to rebuild the whole thing. But then what I can do is I get a response by fetching this poster URL, and I turn it into an array buffer. Here's why. I want to send back the actual image -- maybe that's all I need to do, the image.jpg. That can't be right. There's no way that's right. If it's a poster, I want to send back image.jpg. Do I need to send a 200? Is that what's wrong? Let's try a couple things here. I'm going to see if anything changes when I do it this way. Send back a 200. All right. Now, can I save this? A-ha! That was the problem. I was doing a 301. I still don't know why it's sending back as a JPG like that, though. But yeah, that's a lot. So let's see. Relevant question, what's the max URL string length? That's a fair question. Oh, Sean, I can set the file name? Is that a header? Let's look this up. Set file name of download in header. Content disposition? Set the file name of a thing. Header content disposition attachment, file name. Yes. Okay. This is great. So, let's do that. We're going to go with content disposition. We'll set it to attachment. Then we want to make the file name -- oh, you know what I'm going to do? It's going to be great. File name, and the file name is going to be the slug, the episode slug. This is going to be great. I'm going to do episode.slug.current.jpg. It needs to be quoted. And that should do the thing, right? So, I should be able to name this whatever it needs to be named. So let me get out here. Let's try this again. I'm going to -- here's my local host. Oh, wait. No, I don't want to always make it -- okay. So that did what I want. That part is good, but I don't need to make it auto download. So, can I just do no attachment? I'll just do file name. Let's try that again. So, it didn't auto download. And if I go to save image as, it does it. Ha-ha-ha! Yes. Thank you very much. So Ben, this is what we're doing. We're playing with serverless functions. What we've done thus far is we've fixed two bugs on the Learn With Jason site. So this one is a Cloudinary auto-generating function to build posters for websites. As we go through and look at any of the episodes, if I go to episodes here, then I can go into one of the episodes. Let's look at -- I don't know. Let's look at this FlutterFlow one. I can go to /poster.jpg. It's going to build out this poster. Then if I go to save it now, it should save as let's learn FlutterFlow. It does. It still does the .jpeg. Does it need to be image/jpg and not jpeg? What happens if I do that? I'm going to try it. Let's go here. Going to reload. I'm going to save image as. Let's learn FlutterFlow. Save. Wait. If I just get rid of you, let's try that again. Still .jpeg. Why is it doing that? Hmmm. I guess I don't really care, but that does seem odd, doesn't it? Like, it's not going to impact anything. It's my machine? Oh, no. Well, that's always good news. Just broken. Just how things work here. Yeah, no, that's fine. So I don't know why it's doing that and doesn't want to save a thing. Which one is correct? Is one of those correct? Is it supposed to be /jpeg? Look at stack overflow helping me with stuff. You should use image/jpeg. Okay. So that's good to see. So this is correct. Without the ""E"" is technically incorrect. Although, it will probably work anyway. But I could probably just ask Co-pilot. Please, help. Oh, my god. Set the file extension to .jpg with a header. What are you going to do? Oh, no. Sometimes Co-pilot is actually magic. I was just curious if it was going to do that for me. No, we're not going to do that. But this is cool. I'm excited by this because it really does add -- it just adds so much convenience. So let's ship that. We did the thing. I'm going to review my changes here so we can walk through what they are. What we did in here is we don't need to console log anymore. I don't need that in my business. Hey, speaking of Chris Biscardi, how you doing? 26 months you have been putting up with me. That's fantastic. So this is -- those changes, good, good, good. So down here, we are sending a 200 because originally we were sending a 301. Sending a 301 is a re-direct, which was breaking downloads. It works in the browser, but it breaks downloads. So the 200 is saying this is the image. You don't need to redirect. This is the image. So we can download that properly. Then to set the file name, we are able to use this content disposition and pass in the file name with the current episode slug. So probably could benefit from some air handling here, but I'm not going to do it because I don't want to -- and honestly, this isn't used for anything critical. If it doesn't work, I can always go and kind of deal with one of these on its own. So let's do fix, allow download of images. I don't know how to command enter that. Isn't this thing cool? Check this out. That'll deploy that. I like VS Code. Then if I go out to my site -- oh, got to go to teams to get that. Then we should see the site deploying. We can kind of watch that go. Then Netlify does have a dark mode. Check this out. If you go here and go to Netlify Labs, there are experimental features. We're actually -- like, keep an eye on this tab if you're a heavy Netlify user. We're starting to look at giving early sneak peeks of things in here. This is pretty nice. What this will do is it will put an appearance settings into your user settings. So this doesn't add the toggle. It just gives you the option in your settings that otherwise wouldn't be there. So when we come down here, you get your appearance settings. You can either use your system settings or explicitly set it to light or dark if you vastly prefer one over the other. But yeah, this is really nice. You know what else is cool? Okay, so let's verify this thing worked, and I want to show everybody I'm pretty excited about today. What? Yeah, toast! What didn't you like? Connection reset. So that just seems like something -- let's just retry that. I'll clear the cache and do it again. I'm not familiar with code blocks. That's one I haven't tried. I guess this is the part that I get excited about and why I wanted to show this kind of serverless local debugging process. But you know what's even cooler, if you're going from scratch, this is a new feature. So let me actually make sure I have the latest version of the Netlify CLI. Then I'm going to show you something that just shipped that I'm really excited about. While we're waiting for that to download, I'm going to show you something else that just shipped that I'm really excited about. So the Jamstack conf website went live today, if yo haven't checked it out. So Jamstack Conf is live. The team is -- they're just so good. Our marketing team does such a good job with stuff. We have this cool website, some retro elements. It's very kind of how it started, how it's going. I'm always a fan of anything that features me as a general thing. But here's what I'm really excited about. This time if you register, you can personalize your badge. So I find this so much fun. Now, I already have a ticket number, so I've already done this. I have it over here somewhere. Where did it go? It's here. So check this out. I have a badge that I've personalized. You can then personalize your badge. If you share this on Twitter, which I guess I can just do now. Have you registered for Jamstack Conf? You can get a -- sign up for free today and get your personalized conference badge. We're doing like a nostalgia theme. Like, this part is fun. You get to upload a photo of you as a kid. Look. Look at my -- oh, just so much rage and anger. And this, you could charitably call this a shadow, but what this actually was, was a chin strap goatee. Then I bleached all of my hair and spiked it up. There's a reason I'm bald today. It's because I did dumb stuff like this. (Laughter) Just absolutely abused my hair for my entire childhood, and it just packed up and left. But look, look. I'm wearing a -- this is that material that when it rubs against itself going like swish-swish-swish. It's get all these pockets and stuff on it. I have a pinky ring on, everyone. That's a pinky ring. Then this is like a stretch, ribbed -- like, I don't even know what this thing was. It was made out of Spandex or something. You can't see what I was wearing below this, but I had like JNCO jeans on. There are a lot of problems. Like, so many issues with my fashion choices as a kid. Because I couldn't pick a fashion. I wasn't a metal kid. I wasn't a raver kid. I wasn't a hip-hop kid. I just mashed it all together in a very jarring way that I'm not super proud of. This is the part that I think is really cool. It includes your personalized badge as the preview image. Like, I think this is cool. I love these types of projects. This is something that Phil worked really hard on with Zach Letterman and Justin Schwan from our design team. It's really fun, really fast, kind of pleasant to use. I would highly recommend, first of all, go to the conference. It's going to be great. Even if you're not planning on going to the conference, play with this badge generator. It's just fun. Right? I just love it. Oh, my goodness. Yeah, when the '90s is considered a long time ago. I saw something posted yesterday where somebody was saying it's the same distance in time right now between today and 1980 as it is between 1980 and 1939. Woof. That one hurt me a little bit. So anyway, this is fun. You should go and do this. The late 1900s. (Laughter) Yes, ouch. Oh, my goodness. All right. So now we have our poster.jpg, so we can get that. This is the deployed function. So what should happen now, if I save this image, it's saved as right to left, RTL support. I save. Good. And now I have that JPG. So we're in solid shape. This is great. Awesome. And we were able to do that locally. I didn't have to deploy it and check it. I was able to get it all working locally. Now, check this out. This is even more fun. So if you want to use TypeScript in Netlify, we have this whole thing for functions where -- whoa. What? Hold on a second. What version am I using here? 6.7.1. That should work. Let's npm install Netlify CLI latest. I think 6.7.1 is the latest. I'm worried that was my version of Node doing something weird. So I just switched to Node 16. I mess with my Node environment so much that a lot of times when it's an issue like that, I just worry that I did something silly. So, that's doing what I want. Then we have Netlify functions help. Now we can, like, build functions or create functions, and that's what I wanted to look at. Let's functions create. So Netlify functions create. I don't know. I learned a little bit of TypeScript earlier. I'm going to do TypeScript. We'll get a hello world function. There's a lot of stuff we could do, but boom, there we go. We'll call this one -- yeah, we'll keep hello world. So it found my functions folder, and it created hello world.ts. If I look, I've got helloworld.ts. There's a couple things I think are interesting. The big one is this is, like, TypeScript. Note that I don't have, like -- I don't have a TS config or anything like that. There's no settings for it. So I'm not compiling my TypeScript, but if I go and run this with Netlify Dev, then I will be able to -- once it gets done. Come on, you can do it. It's slow because I have to make like 15 calls to my API to not rate limit it because I'm pulling down transcripts and stuff to build the individual pages. So I think each of those calls takes a little bit of time. Some are dependent on others. There's kind of a stacking problem of calls. Okay. We go out here. Now if I go to Netlify functions hello world -- uh-oh. Hello world is treated as an es module file. Yep, that's -- oh, you know what I did? I should have done this in an empty file. How about we start in a clean project instead. We'll make a new directory called, like, serverless local dev. I'm going to move into it. So the problem that's happening is that I have, like, other functions in here that are using the CJS style. It's like exports.handler. In order for this to work, because it's the ESM, this is reliant on using ES Build, which I can't do on that project without doing some refactoring. So this is just me needing to get into a new project. So let's get init here. Then I'm going to run that same Netlify functions create. Are you going to make me do this? Okay. So let's do Netlify init. And yeah, we'll create deploy site manually. So I'm going to go on here, and we'll call this -- what did I call this? Serverless local dev. Okay. Now that I'm in it, I should be able to run that Netlify functions create. We'll put it in Netlify functions, yep. I'm going to use TypeScript. Good. Like I said, this is a brand new feature. So we haven't really tried it a bunch. It also might be that we need some additional documentation. So let's choose the hello world. We'll use that again. Now I'm going to run Netlify dev. There it is. Okay. And the reason that worked, if I open this up, is that because this is a clean install, the functions are able to run -- did it put this package JSON in here? Oh, it did. That's interesting. So it installed all the stuff that it needed for this to work. That's cool. I didn't know it would do that. So now we have all of these things that we need for this to actually work. I'm curious, if I delete this, and what if I do like an npm init yes -- now I'm curious how this is going to play out. Bear with me while I figure these things out. And I'm going to create, like -- let's create a Netlify.toml. Let's also touch like an index.html. So in my index.html, what I want to do is just create a simple website. We'll say, like, serverless is neat. Right. Then out here we'll do h1. Co-pilot knew my heart. In here what I want to do is set functions. Oh, get out of here. Node bundler to ES Build. This should use ES Build instead of a more traditional web pack approach. That means our serverless functions can be put wherever we want. So I'm also going to specify where the functions directory is. We'll say functions is going to be Netlify functions, right. Then if I come in here, I'm going to create a new one. So we'll say Netlify functions create. Let's see. Lambda package. Yeah, open an issue for that. What we're trying to figure out is how to -- so with Babel, you're taking everything and pulling it in and doing a lot of transpilation and rewrites. With ES Build, it's more of these modules depend on each other. So resolution and that kind of stuff is tricky. So as you hit edge cases, let us know. This is where we want to be. We want to be on the ES Build train because it's so, so, so much faster. We want to be -- ah, okay. So check out what just happened here. So because I had a package JSON already, it installed the function stuff in the top-level package JSON. So my hello world didn't need all that stuff. That's what I would prefer. I would prefer that everything is there. Is there a repo? Yes, it would be Netlify -- let's see. Is it CLI? I should probably do this in one I'm not logged in, in. Do we have an ES Build? So this might be a good place to start it. And if that doesn't work, you could put it in the Netlify CLI. I think our build bot is -- is this one open? This one is open, so you could also put it here. Honestly, open it anywhere, and the team will move it as necessary. If you're hitting those issues, definitely file an issue. If you have ideas on what's wrong, any kind of reproduction is always super helpful so that they can just run it and figure out what's getting misplaced. Typically what we've noticed with the ES Build it you have is that due to the way that common JS modules get written with a lot of dynamic requires and things like that, we'll see that the resolution isn't catching some edge case of dynamic requires. So it's not pulling in a file. Then that file that's not getting pulled in is missing and causes the ES Build result to crash. So typically what we're looking at is trying to find all the different edge cases for ways that people in the Node ecosystem dynamically required files or otherwise resolved where a file should be located so we can figure out how to back that out. But we're getting there. It's getting better every day. So now that we have got this hello world, we can run this. Here we are. We have our hello stranger. I think this one is set so we can get the name in there. If I set a name on this of name equals Jason, right. So I love the simplicity of this. Now we're up and running. Remember, there's no step that I'm going here to, like, build this. I'm just running it locally as TypeScript. I didn't have to set up TypeScript. There's no -- I set this Esbuild bundler, but that's not for the TypeScript. That's so I can do something like -- we'll call this boop. I want to export function. We'll call it async function handler. In this async function, I'm going to return status code of 200 and the body of boop. So now I have this function called boop that I've used. And notice this is ESM, which a lot of serverless function stuff I've written in the past has been using common JS, which is the exports.handler. But because I set it to Esbuild, I can go to boop and we get this boop back. Now I'm using ESM for everything. I would write my site, my front-end code in ESM. I'm writing serverless functions in ESM. There will be some bumps as we get through this kind of Esbuild transition where all the common JS code is moving over, but once we get through that, which will be -- you know, it's powerful. It gets really powerful. For function serving, yes, there is a built file. If you want to see it, you can go kind of look at how that works. But this one, for example, is just pulling in the source. The hello world, I think -- yeah, they get compiled down. I'm not 100% sure. I think this is just the Esbuild artifact. The thing that I like about this is look how much smaller this is than a typical Webpack artifact. It's good. It's much smaller, much faster. You'll see to build this site with the functions that are there so milliseconds, not seconds. Whereas with a Babel Webpack process for serverless functions, it might take five, ten seconds to bundle a bunch of functions. With Esbuild, it takes like 300 milliseconds or something like that. It's just wild how fast it happens. It's not JavaScript anymore technically? Yeah, this is JavaScript. This one is JavaScript. There's no special syntax or anything at all. It's just using ES modules, which is the spec. Then Esbuild will bund that will down to make it runnable. Yeah, this is a really powerful thing. And if you want to write TypeScript, which you can, then this Netlify functions package includes types so you can write TypeScript. This is actually really nice. So check this out. If I want to get, like, event. -- here's all my available pieces. I get my auto complete here. I can go to -- let's see, what's one that's interesting? Let's go to the headers and see what it gives me. That gives me an array, but it's smart enough to know that it is an array. So it'll do like the for each. Actually, I think that's Co-pilot doing stuff. Thanks, Co-pilot. But what I love about this is that it's smart enough to pull these things out. If I get the context here, which is a special Netlify thing that gets attached, then you can also see there's the client context, the function name, the version, whether or not you using Netlify identity, if you're doing logging stuff or you need to check what your memory limit is. There's all sorts of cool stuff here that you can do that I think is really powerful stuff. So I find this to be just kind of a nice flow. If you know TypeScript, if you want to use TypeScript, getting that auto complete and that type ahead, especially if you try to use something that's not set, like if I was down here and I typo and do const body equals event -- first of all, it auto completes for me. But it shows me that I don't -- it doesn't exist. If I get it right, I get -- it's a string. I know it's a string, so I can actually deal with that. So it's pretty handy to be able to do that TypeScript style dev. Again, this all runs locally. So as we're working, if I want to make more changes, I can say, like, I go out to my browser and I want to make a change. I can say hello world. I leave it blank. It says hello corgis. Let's make another change. We can say corgi friends. As soon as I get out here, refresh. So this experience of being able to debug is just so nice. Yeah, Jacob, what you're saying is the functions themselves are being run through AWS Lambda. What we're looking to do is send the lightest weight possible run time. So Lambda has different layers and requirements. It all gets a little esoteric, so I won't try to speak to exactly what our team is doing. But the goal is effectively make it as fast as possible to bundle and deliver the functions that you're writing and to kind of reduce any incidental overhead of what that bundling process would be. Parse time gets down into the microseconds, but we're looking to just kind of make this stuff as non-painful as possible for you by abstracting away all the stuff that you don't need to care about. One of the things that I think that makes serverless daunting is there's this big gap between zero and one. If you're at zero and you hear of serverless functions, you write the code you need. What do I do? You Google it and fiend out you don't just get to write a serverless function. You actually have to figure out how to get a serverless function deployed. Then what the gateway is and then how to line up -- like, how do you proxy requests from your domain to the gateway so that they get to the function and then you've got to do all this stuff around, like -- there's a lot. There's a lot that has to go into it. That's what I think -- it kept me from doing serverless for a long time. That's just as complicated as standing up a server. And I get how a server works. I can deploy a Docker ocean on Digital Ocean. That's easy for me. When I learned about the way that Netlify does it and the way that other companies are starting to kind of mimic that approach of you have a folder and you put functions into that folder and then that results in your code being deployed and it just works, that was when serverless functions started to make sense. That was when I was like, okay, this is better. Now for me to get this thing up on the internet, I just have to write this code. If we look at my website -- let me delete that part because we didn't use that. But if I look at -- like let's look at a simpler one. Let's look at my schedule. When you look at my schedule, we use a builder. We want to make a request to Hasura. So I pull in what the event is to see if you want to limit it to the next ten episodes or something like that. Then I just figure out what the current date it. So we'll show any episode that started like two hours before this moment. We make this request. Okay. All good. What we get back from this request, we just send off a status code of 200, which is http ok. That's what you get when you request most pages. We send off headers. You can get any origin can request this API. It only allows the get request so you can't post or delete this. It allows on the content-type header. And it sends back JSON. Then I just send back whatever comes back from that GraphQL request and wrap it in this builder so it caches after I use it. And that's it. That's the whole app. In doing that, I'm able to get an API up. Now I have an API that's available that lets you pick up my episodes. If I look at a formatted version of this -- let's go here. I look at schedule, and we can see the preview. You can see in this preview, I didn't have to do very much. I just made a request to my API. Now I've got this each episode is set up. It's got all the details I want. This is just kind of a pass through of the way that Hasura -- I think this comes out of Sanity. So I have Sanity plugged into Hasura as a third-party source. But this is allowing me to kind of stand up an API really, really quickly. All I had to do to write that code was know how to write this query to get the data that I wanted and send back these responses. That's a whole API. Now, that is what you do on express or a Node API or Ruby or PHP or whatever. But there's also that boilerplate part. I have this, but I also have to set up the routing. I have to set up the various stand-up and start command and what do we do if it goes down and how do we scale this thing. We got to get it in a container. We have to get that container on a service. All that work becomes -- it's like chores. It's the yak shaving that allows yo uh to write this little bit of code. So what I like about serverless functions is if all I need is this little bed of code, who cares? Just ship it. I don't care at all. I just want to ship it. So, yeah, American2050, we don't have to send an options request first. If I was going to do a post, I do have an example of that somewhere. Where would I find that? Let's go to my account. Let's see how good GitHub's search feature is. I'm going to search for options in this user. Then we're going to look at code. Let's see. Oh, I've said options a lot of times. Can I make it, like, case sensitive? No? No, that's not going to work, is it? No, it's not going to work. Anyway, you can just do a check that's like if the request type is options, then return the headers. Maybe we can find one of these. That's a lie. I know it's there. Maybe. There we go. So let's look at this one. Yeah, so if -- this is how you would do it for a post. If you need to be able to post, you can just check if the method is options and return the right headers and ok. The options request will succeed, and then the post request will just skip over that and do whatever it needs to do. But yeah, this is dope. Okay. So how is everybody feeling? We managed to fill up a whole episode, and we fixed two bugs on the Learn With Jason site. Like, I'm feeling pretty solid about that. What a good time. Let me drop this in the chat for anyone who wants to check out how that sort of thing works. Is this what we built together, Eco? Yeah, it is. Yeah, this is fun. I think at this point, maybe what we should do is look at some more resource. So what if you want to learn more? There is a great course on Explorers that is up and running with serverless functions. This is from Ben. Ben has hosted the show before. He's an excellent teacher. He's a lot of fun. This is a whole -- it's a free course. You don't even have to sign up to watch it. You can just go watch this. It will walk you all the way through getting serverless functions. Get a project initialized, get it deployed. All those good things. It's good, good stuff. Then I also think there's -- what else? What else are good resources for serverless? Probably the biggest one is this Netlify Dev. I know that I work for Netlify, but legit, this has made a huge difference for me in being able to work locally. It just runs a CLI locally, manages your environment variables, and it'll create functions for you. It's just got a bunch of convenient stuff. You can set up your -- like the Netlify Dev is a subset of the Netlify CLI, but I find I use the Netlify CLI and GitHub CLI just every day. For, you know, working on the Learn With Jason site, working on my personal site. Whenever I'm standing up a quick project, I use the GitHub CLI to initialize a repo and get everything set up that way. Then I use the Netlify CLI to set up the project and do local development and deploy it. That workflow, it probably saves me 15 minutes a project, but especially in my role where I'm doing two, usually, new projects every week, it adds up. I spend so, so much time working on my project instead of setting up boilerplate and getting things deployed, with the help of workflows and tools like this. So I think it's a really, really nice setup. Oh, yeah, functions.netlify.com is a really good one. It's got a bunch of examples. Then CSS tricks has a serverless site that I can't remember where it is. So let's Google it. Here it is. Serverless.csstricks.com. If you followed Chris, he's an excellent teacher. He has a good mind for kind of breaking stuff down. So, this is a really wonderful site if you're not 100% convinced on why this is useful. This is a good kind of argument for why it's useful. I mean, there's so many other use cases for it, too. We used it today to set up an API end point and to do the image. So those are two, I think, pretty compelling use cases. Another cool use case is, to the best of my knowledge -- Phil is going to write an article on how this thing works, but the conference here, I'm pretty sure this badge -- so this is using Cloudinary because we just use Cloudinary for everything because it saves us a ton of work. But I'm pretty sure this is all generated with serverless functions as well. So I think this is an on-demand builder so this page is cached. It's rendered by this, so we generate the -- we generate this, this image, and then we generate this text with your name. And then create a URL for it. So this, I think, is saved in Supabase, I think s what we're using in the back end. And you get a unique URL. So again, go play with this. This is fun. This is another interesting application that you can build with serverless functions because we use serverless to write to the database so that we can keep those credentials secure. So there's a lot of really fun things that you can do. It's really powerful. There's a lot of high potential there that you can play with. You know, the tools out there are getting better all the time. You've got AJC Web Dev. Redwood has a lot of cool stuff. Serverless is getting built into Gatsby and a whole bunch of platforms. Like eleventy. It extends your capabilities without requiring you to become an expert in a whole different part of the stack. It allows you to do a huge amount of additional tasks and much more powerful things that would typically feel like you need to get a server and learn all the opsy things that that server entails. So that, I think, is a good reason to dig into this and start playing and see what you can learn. Yeah, Ben is saying there was a good stream on Eleventy with Zach. Did you post that one? That could be fun to share as a resource. Drop a link if you can. While you're doing that, I'm going to do a quick shout out to our captioner. So, we've had Rachel here with us all day from White Coat Captioning. Thank you so much, Rachel. And she's here through the generous support of our sponsors, which are Netlify, Fauna, Hasura, and Auth0, all of whom are kicking in to make this show more accessible to more people, which I very much appreciate. Let's get this link of Ben's stuff up here. So here's another. First look at Eleventy serverless. So, this is definitely me being -- I'm going to say this is like 10% me being a shill for Netlify and 90% me being legit excited about this as something happening in the ecosystem. I am reasonably convinced that the future of the way Jamstack -- not just Jamstack, the future of the way frameworks are going to work, I think, is going to be built around something like this. I don't think that pure static rendering gets the job done. I don't think throwing out all the benefits of static rendering and just going full server is worth it. It's too expensive. It's too hard to scale. So this approach of default to static and have an escape hatch for a server-rendered page or set of pages, which is what Eleventy is doing here, that is the future of this path. I think that's where we're headed. I think we're going to see, you know, the tools like Svelte Kit. We can put ourselves in a position where we only render what we have to and go as far as we need to. On a given page, I might need to rerender that every single time somebody refreshes the page. Great. For that page, that makes sense. But you shouldn't have to rerender every page on your site because one page needs to be dynamic. That's what I don't like about this push back toward all server-side renderering for everything. It feels so wasteful. It's like it makes a headache. I've watched so many teams take their site down over the weekend because they tried to set up clever caching for all the pages that didn't need to be dynamic but they made them dynamic because of that one section. Just don't do that. Do static for everything. Opt into dynamic when it needs to be dynamic. An approach like this with serverless as a way of delivering those few pages that need to be dynamic, it's a good approach. I have a lot of -- I'm very optimistic about the potential there. So, you know, put me down as -- I'm not usually a futurist. Usually I'm excited about what's happening right now. But this one I feel like there's stuff coming. Anyways, how about we -- how about I stop standing on my soap box. Instead, let's maybe tear this one down, yeah? Call this thing cooked and done. So I hope everybody is excited about this. I hope you're all excited to play with some serverless functions and see what is possible. Make sure you check out the schedule. We've got some really, really exciting stuff coming up. We're going to do MongoDB Atlas. This is like databases that are really compatible with serverless. This is I think go to be fun. We're looking at TakeShape, which is a way to pull in -- you know, one of the complaints you hear about the Jamstack is the data spreads out. There's a different service for everything. TakeShape is trying to make that easier. There's an approach that allows you to plug in your third-party services into one global API. This is similar to like OneGraph. A few other services are offering the same thing. We've got Brandon Roberts coming on to talk about reactive state management in Angular using a tool he maintains called NGRX. I have no idea how reactive state management works in general. I'm really excited to learn about that one. We're going to learn about step Zen. We're going to learn about Battlesnake. I still haved no idea what that is. We're going to do machine learning stuff. We're going to build a game with TwilioQuest. Just look at this list. Look at these amazing people. Marie Poulin is going to come on. We're going to talk about Notion. We're going to look at next.js. We're going to look at observability, personalization. There's just good things. So many good things coming and happening. So definitely go and get into this schedule. You can click this button up at the top, add it to Google calendar, and it will become yours. You will be able to see episodes when they're happening. It's not obtrusive. You don't have to put in your email or anything. It just shows up. Is that a stream schedule for February? Sure is. That's because Stephanie just had a baby. So she wanted to wait until she was well out of the maternity leave before she scheduled anything. So congrats to her. I'm super excited for her to come back and teach us some stuff. Yeah, congrats, Stephanie. That's going to be great. So, that, I think, is -- I think that's a good stopping point. Who should we raid today? Anybody have a preference? Let's see who's live. I see Brent is live. Anybody else? Anybody else live? ManniMoki. I've never seen ManniMoki. Are they live now? Let's go do it. This channel is intended for mature audiences? Uh, is that just because they swear? Or what am I getting into here? I don't know. Ben has never steered me wrong. We're doing it. Let's go see ManniMoki. Bye!","[(0, 0.39435107), (1, 0.073617354), (2, 0.5320316)]",0.39435107,0.073617354,0.5320316
"So who remembers GeoCities? Thank you. Yeah. Okay. Because you’re older. No, I’m just kidding. Me too. No.Actually, I was thinking about this the other day. I love Geocities, and I actually remember that was one of the first times I really got started.I actually remember going to my first coding boot camp in fifth grade. My mom sent me to an HTML class every summer, and I thought to myself, I literally thought to myself, “When am I ever going to need to use this?”Because I just wanted to go to soccer camp like all of the other cool girls. But I went to HTML camp and theater camp every summer. And so now, I give talks on dev stuff, very telling.So this talk is your first 100 devs. That means, what does that look like to bring on your first 100 developers onto your project. If you guys have any questions for me, feel free to DM me. If you want to have the slides to this talk, it is also pinned to my handle. So you guys can access that at anytime, anywhere.So who is this for when you’re thinking about your first, a hundred developers? Oftentimes, this talk is kind of relevant for solo developers, if you’re a new developer tool, or if you’re already a startup or a project that is looking to release a new product or going to a new channel.Maybe you are experimenting with an open source platform play, but you don’t really know what that market is going to look like for you, this is really helpful to keep in mind.So why me? Why do I love talking about this stuff? Like I said, I got started pretty young, but at the end of the day, one of my biggest passions in life is providing resources and opportunities for those who want to create.I’m a child of immigrants. My parents, they immigrated here from Taiwan and they said, I remember my mom saying this to me, she said, “Well, I never had an opportunity to learn this stuff, so I really want you to learn, so that you come back and teach me.”And so, at a very young age, I realize that teaching others is just a really empowering opportunity. And not so much teaching because I’m a professional or anything, but just, “Hey, here’s some knowledge, and I want to share this with you. If I don’t know the answer, here’s the community that can help you out.” Right?So I just love talking about this because I think it’s really empowering. So what you’re going to learn in the next 15, 20 minutes is really five things.One, I’m going to help you identify what your tribe is specifically within your audience.Number two, I’m going to help you guys think about what a success metric is going to look like especially as you’re bringing in your first 100 developers.Number three is one of my favorite, is the rule of 1%. You’ll learn a little bit more about that.Four, is what does that inflection point look like for when you’re bringing on the developers.And number five, an acquisition strategy, to really consider, especially as you’re starting early on.Now, build it, will it come? You know, oftentimes as we’re making developer tools, we think if it’s highly functional, if it’s really the perfect solution, they will come.However, like the premise of Bob’s Burger, they have this awesome restaurant, and they’re there working every day, except no one really comes except that one guy. Does anyone know the name of that guy? Yeah. I don’t actually remember it, but, yeah, he’s just kind of like, Teddy, Teddy. That’s his name. Teddy is his name. Right. So besides Teddy, he really doesn’t have a lot of traffic, but Bob’s Burger is still well-loved.So number one is thinking about your tribe, right? Your tribe, what does that mean? You know, oftentimes you hear the marketers, marketing team, they’re like, “Hey, know your audience, understand your users.” Audience, audience, audience, right?But right now, I’m talking about your tribe because often we say, “Oh…” Especially those who are not as experienced, you know, like, “Oh, we’ll just market to developers.” Right? Well, developers is kind of too vague.It’s like saying, “I’m just going to market to Pokémon.” You know, there’s, like, there’s eight generations now. There’s north of 800 types, right? So there’s, it’s, like, you know, there’s only some that we really care about.Does anyone know who these are? Yep, yeah. But which generation? Thank you. Who’s your favorite? Goldeen? Goldeen is your… Okay. Yeah. I’m… I’ve never heard of that one before. All right. All right.So on the top of Goldeen, I’m dying. On top of Goldeen, like, you want to also understand what is your tribe because within Pokémon, it’s very vast, there’s different types of Pokémon, right? But within your tribe, you love Goldeen. You know what? Goldeen is the water type, right?And so, even within Pokémon itself, it’s, like, you know what? I really want to just target the water type Pokémon especially the ones that can do like ice moves, right? Like, ice move, ice move, ice… That’s their stack. Okay?So that’s something to consider is really have one tribe in mind because they’re going to be your biggest fans, they’re going to love you the most.And just so you know, there’s just really different types of developers, and they’re reached in different ways, they live in different communities. And for some, this is funnier than others, right? Yeah, yeah. See, this is all so relatable if you’re not a dev. It’s still pretty funny.But, you know, I keep rallying on having one, just one tribe to focus on first because something you really want to leverage is the 80/20 rule, right? So 20% of the people are going to bring in 80% of the business.Now, what that means is sure, you’re going to have tons of developers or fans on your platform, but there’s going to be that subset of freaks who’s just going to, like, ride or die with you. They’re going to celebrate you, they’re going to use your platform, they’re going to contribute back, right? So I’m going to bring back an O.g. example.Who remembers this? Yeah, yeah, yeah. I’m surprised that I remember this. Right? So Red Hat, what they do is they build enterprise solutions on Linux, and of course, that means this is open source, you can access this. And that was what was so revolutionary with Red Hat because they’re able to provide this open source, and they wanted to ensure that they reached a mass of people.But they also ensured that, you know, we’re going to bundle this up and deliver it to you. And back in the day, you know, it was $49, right? But nonetheless, only some of them paid.You can still access the free one, but you also get, like, installation guides, how-to manuals. This is before, like, forums and Q&As, and oh, man, like, dev talks, those days. Right? So they wanted to ensure that most people got access, but those who paid, it also drove, you know, most or all of their revenue.So step two is to think about your success metrics. You know, you know that you’re looking to bring in devs, you know you want to identify your audience, but you also want to figure out at what point do you want to achieve the 100 developers.Oftentimes when you’re working, especially in small teams, it’s like, “Oh, we have this date,” you know, “Oh, gosh. We need to move it to that date.” And sometimes what I’ve also seen is people just say, “Oh, you know, I want to have a bunch of developers,” or, “I want to grow a dev community.” I’ll come in and be like, “All right. When?” They’re like, ”Whenever.”And I’m like, ”No. It’s like saying, ‘I’m going to get married.’ When? Not when…”You know, like, it’s just, you got to plan for it, right? So pick a date, just one date. Don’t have multiple ones because if you just pick one date, you’re going to be hyper-focused, right?And then now, pick one of the milestones that’s going to be really important for you. Now, I don’t know what your project is, but different milestones where actions it’s going to be, have different meaning for your project, right?So maybe its followers or impressions, right? If you’re a fairly big company like Google, all they really care about is like, “Hey, brand awareness,” you know. That’s going to be really, really important for them, that’s going to be a clear return for them.Now, if you’re a smaller project or a team, maybe impressions aren’t as useful in the early beginnings. Maybe if you’re a dev tool, you know, downloads are really important, and you really just want to make sure you have installs, right?Or if you’re already monetizing, maybe you want to have paid users. I think charging a nickel would be really funny. You should try that out.So for this example, we’re going to go with the metric of downloads, right? So this is going to follow out through the talk.Step three is the rule of 1%. This is actually really straightforward and it’s quite surprising because I think a lot of people miss this a lot. So let’s say, again, we want to have 100 developers for your project, and that means we’re going to have a 1% conversion rate.So the rule of 1% is if you don’t have benchmark metrics yet, if you’re first starting, or if you’re already established, and if you already have users, however, maybe, again, you’re starting a open source project, something else, and you haven’t migrated them over yet, the go to rule of thumb is that 1% conversion rate. And again, with this example, we will do installs, downloads.So you said, “All right. I want to have a hundred downloads, what does that look like?” If I just have a hundred developers, is that enough? You know, are they here for just the pizza? I don’t really know.But if you think about the user journey, if you think about the user journey, right before the download, it’s like, “Ah, we have to get sign ups before they even download.” So if you work backwards, right? Ten thousand, 1% is 100. So you think, “All right. I need to have 10,000 sign ups just to get that 100 downloads.”And what’s the step right before the 10,000 sign ups? Oh, my God, right? There’s a million… Yeah. That’s not how math works, but if you imagine there’s like a zero, a zero, zero, and if you’re real sad, zero, zero, zero, zero, zero, zero, over there to the… Oh, wow, distracted.But as you can imagine, it’s a million, 10,000, 100 for that 1% conversion rate. So when you’re thinking about, “Oh, I need my first, a hundred developers,” you’re thinking, “Oh, my gosh, I might need my first million impressions.”Now, bear with me because it almost seems unattainable, right? And just as a reminder, this is only if you don’t have any, like, previous cohorts, or users, or consumer base, right?So forecasting your metrics are really important. As I mentioned before, you really want to pick a date, and oftentimes if you go in to a project, you want to think, “All right. We want to try to acquire 100 users in the next 3 months, in the next 2 months.”So what does that look like? I mean, this is really simple. It’s really breaking down to ensure that you’re on track. Every day 300 impressions, 400 impressions, 300 impressions. Right? And now again, a million is really, it’s really far out. If you look at your industry, some has either higher or lower conversion rates, 20% is the industry benchmark, 19%. But the rule of thumb again is that 1%.And what also helps is having an ability to identify when that inflection point might come to help you catapult yourself from just having a very stagnant growth.So number four is inflection point, and this is something that I’m going to cover with a case study that I really enjoy. So as we know, Airbnb, they provide housing, right? Housing opportunities, housing options especially as you’re traveling, and for the most part, you’re going to have a fairly consistent need for housing. It’s, you know, there’s always a price battle, so on and so forth.And what they saw in the early days was that it was quite consistent. What they really leverage though when they first began was there’s a huge Salesforce conference, and when the Salesforce conference came, there’s a huge influx of people coming, right? And for them, this is really their leverage, their inflection point.If you remember, Uber did the same with South by Southwest. In fact, when Airbnb first launched, they actually launched at TechCrunch. So on the TechCrunch stage, and yes, they got a little pick up, but their audience really wasn’t there since, you know, TechCrunch, there’s a lot of local folks as well or in the area. But Salesforce, you have a mass of people coming in.So what that means is as you’re thinking about growing your users, what is the inflection point in your industry? It might not be a conference, it could be something online. Perhaps, you know, like, huge inflection points so, like, Forbes, 30 Under 30. I mean, whatever that event is. It can also be just different, right, AMAs, whatever that may look like.So at that time, then there was a huge spike in demand, and they’re able to provide multiple housing options. And that’s really what catapulted their traffic, right? So something to really consider is identifying your inflection point.Number five, is your acquisition strategy. So as you’re beginning, there’s tons of ways to approach this, and one of the things that I hold true and dear to my heart is something that Paul Graham said, “Do things that don’t scale,” especially if you could afford to do so.Why this is important is that when you’re doing things that don’t scale, that means you’re usually very hands-on, that means you’re deeply interacting with your users, your developers.And if it’s only a hundred devs, I feel like, at least in my mind, it’s a little bit more tangible. I feel like it’s not as horrifying to approach, and I wanted to make sure that our team really ate our own dog food. I mean, so much so that we named our project after a dog.So what we are is we’re a developer community where you can learn different resources and also mentor one another, developers just go on. It kind of looks like Stack Overflow for now, and as you know, because we’re online we thought, “Okay. We can definitely drive traffic this way.”However, if we are going to do something that doesn’t scale and we don’t really exactly know how we’re building out the rest of the roadmap, is we are doing a series of meet-ups. We’re doing a series of mentoring sessions, seven sessions to be specific because we really want to sit down and understand what kind of developers are we even trying to help out, right?And although this is super expensive and it’s a very long and painful road, having just maybe three sessions, we can get at least a hundred developers.And so that becomes actually a lot less intimidating when you’re thinking about is it a million impressions, is it 10,000 sign ups, whatever that looks like, because at the end of the day, it’s just really important for us to understand what our user is, and how to reiterate from that experience. It’s almost like an ideal approach. Right?So with that being said, here are the five things that we covered today was, identifying your tribe, what kind of personality, identity folks are within the developer community you’re looking for because hobbyists are very different than those who work at enterprises perhaps or perhaps even startup developers, or even freelancers.Number two is thinking about your success metric and just picking one, and being hyper-focused on that one just to get you to the 100 dev mark.Number three is the rule of 1% which is fairly easy math, but it’s a grinding work, right?Number four is identifying that inflection point. That’s going to be quite important for your team, your product.And then number five, an acquisition strategy, something that doesn’t scale especially if you’re starting off early on because it’s a lot more forgiving. It’s also very community-oriented.And then lastly, if you have any questions, I’d be more than happy to answer them. I’ve been growing communities for about six years now, and I just really, really love helping people.And again, if you really enjoyed this talk or you found it very useful, you can go ahead and share it with your communities. The talk is pinned onto, I think, the first pinned post.Also, I’m going to be really dramatic because… Okay. Bye. Hold on. I am the worst because I totally forgot my stickers. If you like the sticker, I only have one. So battle royale. No. But if you retweet it, I will hand mail you. This is doing shit that doesn’t scale. I will hand mail you with, like, hearts to your address, and we will send you stickers.And if your friends retweet it, we will send them stickers. If they’re a bot, then I don’t know how to figure that out. But yes, who wants the sticker? Okay. Yeah. I saw your hand first.Audience member: My manager comes back to town next week from New Zealand, and he just got… so…Sydney: Oh, my gosh. Okay. You were also really excited, though. Like, you were first but she was like… Okay. Do guys want to…Audience member: No, it’s okay. They can have it.Sydney: All right. Also, the talk is over. Thank you.","[(0, 0.30412647), (1, 0.2323362), (2, 0.46353734)]",0.30412647,0.2323362,0.46353734
"My name is Conrad Hollomon and I volunteer with an organization called Operation Code. And we’re going to be talking about how you make it so, with your community that you run, you can make it as easy as possible and as fast as possible for somebody who might be coming from a lower level of experience, somebody who might be a little bit more uncomfortable doing open source contributions, how can you get them to be a part of your community and to be working together with others as quickly as you can.So a little bit about Operation Code. We are 501(c)(3) non-profit and we are working with military veterans, transitioning service members, and military spouses to help them learn software development, enter the tech industry, and code the future. In the background here, you have a chapter in New York City. We have various chapters throughout the country.And this is a community that is very much an underserved community. About 250,000 veterans transition from the service a year and need work. The military spouse community actually has an unemployment rate four times the national average and this is a major, major problem for anybody who’s ever served or anybody who’s in the family of somebody who served.And what we found is that, as we’ve explored this community and as we worked more with this community, what we found is that that sense of service and that sense to want to contribute to something more than yourself actually has a very, very powerful alignment with open source.It has a very, very powerful mission-focused alignment in terms of a bunch of people coming together to try to accomplish something that’s greater than themselves.A little bit of background on myself. I was a former U.S. Army captain. And we all kind of got together to help build this organization remotely actually. We all got together on Slack, Portland, Denver, Boston, we all encountered each other.We were all kind of doing stuff in our local communities to try to help and then we found each other online and it was like, why don’t we just like try to do this all online? Because we kind of started as a remote-first organization organically and then it just grew from there.So the number one thing that we want to make clear for somebody who joins our community, and our community is primarily on Slack, we have a web front end that gets people onto Slack as quickly as possible that’s a whole other like little onboarding challenge, is sending the message that this community is for you.This community is for you, you personally, you, John, you, Sarah, you, Eric. This community is for you and we are here to make sure that you feel welcome here as quickly as possible.We actually have a bot where we’ve gamified a little bit our community volunteers greeting somebody as fast as possible. They will compete with each other to try to greet people via DM or publicly as quickly as possible, asking them, “Hey, what would you like to learn? Where do you want to go today?” I didn’t mean to quote the Microsoft like thing there. That that was a little bit spontaneous.But like, “What is it that you would like to learn? What would you like to build? What would you like to create? What would you like to contribute? Where are you on your journey?”Some folks who come into our community have never touched coding but they’ve installed the Slack app for the first time. They’re on a base, they’re on their mobile phone and they’re just like, “Okay, so I want to learn about this stuff. I’m getting ready to leave the service in, you know, a few months, so I want to learn a little bit more about this.”It ranges all the way from that to folks who, you know, have just graduated a coding boot camp or evaluating coding boot camps all the way to senior engineers who may be veterans or military spouses.A little known fact is that a lot of veterans or military spouses will not identify themselves that way at work. And the reason for that is that they are afraid of how they will be perceived at their job, either because they have come from a deployment or because they are reservists where they may get called up, or because they’re military spouses where if their husband or wife gets stationed somewhere else, all of a sudden that company needs to find a new rec.So very often you will not even know that the person who you’re working with is a military veteran or a military spouse. And we really want to send the message that like regardless of where you’re coming from, this community is for you.And when I say regardless of where you’re coming from, we are not checking, we are not looking to see. Hey, we ask if somebody is a veteran, we ask if somebody is a military spouse. But we have just as many civilian volunteers who want to give back, we have just as many folks who are recruiters, we have folks who are senior engineers who just want to give back or they just want to interact and maybe share war stories or talk about that kind of thing.One of the things we really want to emphasize with anybody who’s coming in and learning for the first time especially if they’re finding out if coding is right for them, once again, is that software development is a team effort. It is a team sport and we want to get our community involved as a team as quickly as possible.That means seeing that there are folks to your left and right that are going to help mentor you, they’re going to help guide you through this process, that are going to give to you and help you through this.The acronym RTFM is banned, all right? We do not use that acronym in this community, all right? Actually correction, sometimes the manuals can be friendly so I encourage people to read the friendly manual but we don’t want to emphasize this idea like, we want to emphasize self-reliance but the community that we’re working with already has developed a certain sense of self-reliance. This is about helping them make their transition.And believe it or not, this has been one of our most powerful tools to do that. I know what you’re thinking. Like when you think of something friendly, easy to onboard, great user experience, the first thing you think of is Git, right? That’s exactly what you think of. Bear with me for a second because the most powerful thing about Git is its ability to allow a lot of people to contribute to one thing.And when you tap into that and when you show people that they can do a pull request, when you walk them through that process, even if it’s something as simple as changing a string or changing a color or something very rudimentary and very basic, the act of having a senior engineer or somebody on the team look at it, provide a little bit of constructive feedback, and say yes…When you onboard very, very quickly, it’s probably one of the most powerful things you can do to show that like, “Hey, this is actually a place where they’re going to be supportive and they actually are interested in what I have to contribute and what I have to give back.”So give new contributors an early win. You not necessarily need to have an early contributor contribute some major feature and that’s the only thing they can do. Give them something quickly that they can use to show that like, “Hey, I have contributed to something greater than myself.” Get that happening as quickly as possible.The same way that when you’re working on a website and you’re trying to like, the same mentality and the same mindset that you have when you’re trying to acquire users really quickly, when you’re trying to get their email addresses, give your contributors that.Think of it from their perspective too. They’re motivated by what they can build. Let them do that. Let them build something and contribute to a larger whole as quickly as you can. I can’t stress that enough. I even have a slide for it, right?Now I’m not saying that you should compromise on quality. What I am saying is you should offer opportunities where you can afford to accept a little bit more risk because the scope of the change is so small that it’s not really going to necessarily affect the grand scheme of what you’re working on in terms of the project.That means setting people up for success. That means you need to do the diligence on your side in terms of what you build and what you make and what you create in terms of documentation, in terms of onboarding, that entire experience to make sure that they have all the information they need to be successful in the community.Because if folks are coming into your community and then they’re leaving and they don’t feel like they’ve been provided that information, let’s be real, whose responsibility is that? Right?Who are the ones who can set new developers up for success the most? Who are the folks who can set up new contributors to be able to be productive the most? Who is responsible for that? Open question.Contributions are more than just code. Contributions are more than just code. Contributions are more than just code. If you look at contributions and you only reward folks who submit pull requests and make code, you’ll end up with a lot of code.How many people think just a lot of code is a great thing in and of itself intrinsically? I know it can certainly feel that way. It can certainly feel like you’re being very, very productive when you move really quickly and try to hit up every single one of these things.But let me tell you what I’m looking for the most. I’m looking for the folks who are willing to write documentation. I’m looking for the folks who want to write tests. Please give me more people who want to write tests. That is amazing. Those folks are Godsent. All right?And the more that you want to contribute to the success of the entire thing, you got to look at more than just code. You’ve got to look at going out into the community and writing these blog posts, you know, providing like constructive tweeting, all right? There’s lots of examples of different kinds of tweeting and we’re focusing on constructive contributions to the community. Contributions are more than just code.And alongside that, it takes a lot of different contributors to make a community. When you’re looking at the folks who enter your community, every single one of them has a gift, every single one of them has a superpower. It is the role of the folks who are managing that community to find out what that superpower is.Some of them, it might be building features. Some of them might be writing tests. Some of them, it might be onboarding people themselves. There are a lot of ways to contribute to a community but it takes everybody to make it happen. And you want to think of this.We talk about diversity, we talk about inclusion, also, think about this in terms of the kinds of people that you are communicating you want to bring in. Are you only wanting to bring in Ninja rock star engineers with, you know, 20 years of experience and Windows 95? I don’t know.You’ve heard the cliche about resumes and asking for more years of experience than the technology has even existed. Is that what you’re looking for?Or are you being just as welcoming to people who want to be effective communicators? Are you welcoming project managers? Are you welcoming to product managers? Are you welcoming to marketing people who just love technology but they want to find a way to communicate that message?How are you enabling them to be a part of your community? How are you bringing them in? I want to clarify what I mean by a contributor here, all right? If you do any of these things, you are a contributor.If you’re an advocate, you’re a contributor. If you answer questions, if you know, like to write nice notes for people who submit pull requests for you, you are a contributor. God, if you create documentation, I’m not going to say you’re more of a contributor but I’m just saying like I’m mentally thinking it. All right?If you ask good and constructive questions, you’re a contributor. If you’re providing good feedback, you’re a contributor. If you are blogging about your experiences in the community, the good and the bad and doing it in a constructive way, if you are helping people work with each other and connect with each other and grow, you are a contributor. You are an open source contributor, all right?Bottom line. If you interact with others in a meaningful, positive way to help everything move forward and help the community move forward, you are a contributor.And I want to challenge each of you to like try to represent that and try to send that message within your own organizations and within your own communities that that meaningful and positive interaction whether that be through coding, whether that be through tweeting, I guess that’s a couple of different ends of the spectrum there, but like if you interact with others in a meaningful positive way and help them become more effective, you are a contributor.","[(0, 0.5519034), (1, 0.107521504), (2, 0.340575)]",0.5519034,0.107521504,0.340575
"Is it live? It's live. Ha, ha! All right.
If it makes you feel any better, that is how everything goes.
Welcome to another episode of Learn with Jason. Today on the show we have Dan Gorelick. And we are also trying out a new setup to make everything work better and I'm working the kinks out. Let me know in the chat if you have any problem hearing things, if it's too loud or too quiet. Dan, how are you today?
Good. Excited to be here.
I'm excited to have you here. You're not getting doubling, echo, anything like that. Let me know if you are hearing anything weird today is an exciting day because as those of you who know will be fair with, I'm a failed machine. I was a touring musician for a long time. Turns out I'm not good at music. But I learned all the things I needed to do to become a developer as part of my musicians journey. I like to bring music into things, I'm a big fan of getting into music and doing as much as I can with music. I just haven't had any opportunities to like make music. And so, Dan, you make music -- now, is this professional? Is this like your full-time gig?
Or maybe I should just start by asking the question. For folk who is aren't familiar, can you give a background on you and what you do.
Hello. I love the messages coming in slowly on Twitch chat. Thanks for having me, Jason. We talked a little bit about both of our journeys into music. And I would love to hear more of that as we go on throughout the day. But yeah. I don't know. I have been playing music since a very young age and I almost went to music school. But then last minute I took the exit ramp and went to computer engineering school.
So, four years of that really... had me feel what it was like to not be doing music as much as I was beforehand. It was after I was graduating, so much of me wanted to return to making art and exploring music. And I had this question which was I spent four years exploring how software with coding. And is it possible to make music with code? So, I started exploring that intersection.
And, yeah. So, now I do many different things. I still make software, I do design things, interaction design, I like little musical instruments on websites and I also do performances making music with code. And I will say, I wasn't as much of a performing musician until I started making music with code. And then that was just a way to -- and for context, I used to play -- I still play the cello. But playing classical cello, it's harder to finds venues to do that versus making electronic dance music.
Sure.
Not necessarily EDM, but electronic upbeat music with code. Making music with code is something that's brought me back and helped me grow my relationship as a musician, as an artist. Yeah. And that's why we're talking today. Because I did a performance and you a saw it. And, yeah.
Yeah. Absolutely. I see Char just came into the chat. I'm excited because this is actually kind of a two-parter episode, sort of. Because today we're gonna make some music. And then on Thursday, Char is going to help us make visualizations for audio. And we're going to do all that with code which I'm so excited about. What I've always struggled with is when I was a kid, I had the ability to go all-in on music. And I didn't have any responsibilities, bills, anything.
So, I basically just lived in a van. I had no real possessions outside of a guitar and whatever gear was in the trailer. I lived off of like 60 bucks a month to pay my cell phone bill, get a job at a Wendy's for a week, pay the bill, quit the job and get back on the road and tour. That was incredible, and it was not sustainable. When we realized we were not going to become a famous band. Okay, I don't want to continue living in a van. I have been doing this for two years. This isn't gonna scale. Then when I started getting into how do I become an adult and financial security and these things that became more important as I became older, it became less possible to do the musical things I wanted to do.
And it just kind of became a hobby. I have all this musical gear around me that rarely gets touched. That's a huge bummer for me. I'm really excited to hear that's something that has -- you found a way to do it. And even more importantly, what's interesting to me about the way that you've approached music is you're not doing what I've seen some folks do. You live a kind of double life. You have a day job as a programmer and a night job as a musician. You're bridging the two skill-sets into something that is unique. It's -- it takes advantage of all of your different skill-sets. And produces something that's, you know, yours and like all of yours. Not necessarily like the half of you that isn't a programmer.
And I think that's really interesting. And it's exciting to me as well because, you know, like I said, I bring -- I bring that whole musical part of myself as just stuffed in a closet and I have this fantasy that someday I'll have spare time and be able to make music again. Someday I'll have all the, you know, the bandwidth to figure out how this little drum pad that I bought worked. You know? Like all those little things.
So, how did you land there? Like when -- you said that that was when you started to do live performances. But as you started getting into the music, how did you learn this was something you could even do?
Yeah. And you say ""Do,"" there's two parts to that. Thanks for sharing your journey and where you're at right now. That's helpful context. And I can definitely relate. So, I don't have a full-time job. I work with many different clients on projects. Some are music, some are web development, rapid prototyping, things like that.
And when I did have a full-time job and it was 40 hours a week or more, I did finds it harder. And part of me, similar to the Dan that was in engineering school, a part of me was kind of -- I'll use the word, this is gonna be a little bit much. But part of me was like starved from not having the outlets to make music.
Yeah.
So -- so, I guess, today we're gonna learn practically how to do it. So, yay. Exciting for that. But I guess time-wise how I do it is very much just -- yeah. I wouldn't say that making music is my job. I don't know what my job is. But I think it's just about trying to create the circumstances. How can we find the hours in the day? How can I make the activation as low as possible to just creating. How to make it so the drum machine in my desk, it's plugged in all the time. And when I wake up, hit two of the buttons and maybe get little bit of musical juices flowing. For me, I had this ah-ha moment, I have all these electronic synths and drum machines. And I leave them on the desk, not always turned on to save electricity, but as easy to turn on as possible.
Right.
One thing to explore today is making music with code. Just having a laptop. What that felt like, at a cafe, I could open my laptop and start making music on the go. It seems like we have some doubling of my voice happening.
Yeah. I have something going on with my setup where I have like -- I don't know why it's happening.
I could keep talking.
Yeah, why don't you keep on talking and I'm gonna look at my settings one more time and see if I figure out what was going on. But yeah, I'm sorry for everybody who is hearing the doubling. I'm not 100% sure where it came from. I mentioned this earlier, I just switched over my setup to be friendlier to recording so that we can do things with like turning this into podcasts and better highlight reels and that sort of stuff. However, it also means that I touched all the buttons and I only have a passing familiarity with how most of these buttons work. I apologize for the extra noise going on here.
And I will do my best to fix it.
Yeah. And during the pandemic also, that's when -- so, live code asking like a Digitally-first medium. It really works well for livestreams and whatnot. And if you're still hearing my voice doubling, it's not a phaser track. But I learned so many things on every single livestream I did. One little thing didn't go right. I had all the audio from my synth going in the left ear only. Or things like that. So, every time was learning one or two more things.
So, anyways, what we're going to be doing today, Jason is going to be piping audio from TidalCycles which is what we're using to make music on to the stream. That's added another layer of complexity for the stream as well.
Yes. And I think what is happening -- so, for folks who aren't familiar with how I run the stream. I'm on a Zoom call with Dan right now. I have OBS on the same computer. And then I'm also running a Mac that is piped into this computer that I'm piping the sound from. And I'm trying to get all of that into separate tracks as well as the overlay tracks. And the challenge that I have is that it's really hard on this computer, at least with my understanding of Windows, to figure out where sound is coming from. So, I actually don't know If the problem is coming from Zoom or from OBS or somewhere in between. I'm gonna have to debug this. It was not happening where we tested this yesterday. I feel like I different touch any buttons. But that seems to be the way it goes. So, I will keep -- I'll keep digging into this and figuring out what's going on. But this is where we are.
And it seems like some people are saying it's fine. I don't know.
I think it's like phasing. The nice thing is that there's no delay, right? It just sounds like you've got a doubler on your voice. Which is legible at least. We can all understand you. It's a little bit odd. It definitely sounds like an audio effect. However, we're gonna have to push through because I don't know how to fix it and I don't want to restart my computer in the middle of a stream.
Here we are.
Pretty sure we won't hear it in the music. That's the important part. Let's talk a little bit more about how -- I'm actually curious too because one of the things that I find most fascinating about this space is as people get into coding, you think of coding as being a very practical pursuit. It's the way that you build software that powers business. It's the way that you make a living. It's the way that you build a website to advertise your services or communicate information about yourself or otherwise do something that's like transactional in nature.
However, as I've gotten deeper and deeper into code, I've found people like you, Char that we're going to talk to on Thursday, who are using code as a creative outlet. And we're seeing more of this creative coding. Or people who call themselves creative technologists or whatever label you want to put ton. And I'm -- I'm just kind of fascinated by this in general. Because it feels like some doors are opening. At least in my mind. This is probably true for a long time, I'm starting to realize it, there are all of these outlets for being a creative using something that may have traditionally felt like in my mind a practical media.
So, when did that door kind of get opened for you? When did you start to think of code as a creative outlet?
Yeah. Hm, great question. And also, I don't hear the phaser effect from my end. But I'll be mindful that I will have this cool effect. I don't know if that adds an air of mystery or something. But I'll try to be as relatable as possible given the voice. Yeah. I think for -- my -- I guess maybe let's like zoom out a little bit and I think it's just how can we use technology to -- as like a creative outlet? And if we think about software, all software is built with code. And if we think about coding to -- as a creative outlet, it's kind of like going behind the facade a little bit of software. My introduction to making any heart with technology was Microsoft Paint. Making little like I don't even know what the pixel density was. But working with that.
And I think then it was just realizing that I could be creative and explore and have some -- I don't know what my creative expression was with MS Payment, Microsoft Paint. But, yeah, I think it started there. But as time went on, as I started to understand web Dev and as I started to appreciate the web being natively an interactive medium -- Mario Paint. I'm just reading -- I shouldn't read Twitch chat while trying -- very distracting. In a good way, though. But no, I think once I started making websites and understanding what the web is intuitively app interactive medium, it just happened as I started making more websites. Oh, this thing that I'm making is asking for people to interact with it.
And once I was able to start making music things on the web, that's when I think a lot of kind of doors opened for me. Because this whole history of being a musician somehow I was able to kind of bridge that to technology. So, when we get to creative coding, I think there's many different ways to do. And I think similar to the buckets that we can cast on many things in the world, creative coding, if we zoom out a little bit, how can I be more of an artist? And how to explore being an artist in a digital medium? And I think being a creative coder is not all that different from using something like Procreate on the iPad. And someone who uses a painting app on the iPad, you're not gonna be really amazing from the get go. You have to practice and grow your craft.
Right.
Just as you do -- and I think one of the great things about creative coding is people are spending the hours, doing the 10,000 hours learning how to code, navigate a text editor, using how to use Google to find problems and tech overflow. And so much of this bridges over into making art with code. Because where one might run into a lot of barriers who hasn't had this experience, hasn't had the reps learning how town block things when something isn't working as the documentation says and learning this is all built my humans. Nothing is perfect. All software is inevitably flawed.
Yeah. So, I think that's something where the barrier is very low to get started. But I think that for people who have coding experience, and I think with TidalCycles for making music with code, the barrier is not that high for non-coders as well. So, it's something where, yeah, anyways. Maybe I'm getting a little bit too philosophical here. But I think it's about the relationship of being an artist and put on our artist hats and start using code as a medium.
Yeah. And you bring up a really good point. Which is the most frustrating part about a lot of creative pursuits. I think Ira Glass put it as, your taste outstrips your talent. When you first start any pursuit, you know what you like. You have a sense what have good is for music. But you don't have the raw ability, you don't have the mechanical ability to make music that you think is good. So, it's really discouraging where you hear a song and grow, oh, I had this idea in my head of what a good song would be. And then you go to the actual keyboard and you can't make your brain make those sounds. Right? You don't have the ability. You have to do all this practice and all of that ramping up to get to the point that you get to just play. You know? And I struggle with this on piano. I can make noise on piano. And if I take a lot of time, I can figure out the notes that I wanted and I can put them together. But it's a labor.
But when I code, because I have done so much coding in my life, I can just play. I can sit down at the keyboard and think of what I want and I can just start throwing it together. And I am from idea to some form of prototype very quickly.
Yeah.
That has not traditionally been true with creative endeavors. But what I love is you've kind of pounds -- I'm not gonna call it a hack because I think that diminishing the impact of it. But you have found a way that you can just play with something that maybe isn't something that you've put the 10,000 hours into it. I don't need to learn piano. I can use the coding that I already know to make some music. And now I don't have to struggle to get the idea out of my head, I can just sit down and play.
Totally. And I think that's the beauty of the intersectionality of it. Where taking this thing that we've put a lot of time into and realizing, oh we can kind of mobilize this in a very different way. And I like to -- again, I always like to zoom out and think about what is our body of work that we're adding to? Am I a software developer? Am I a project manager? Sure, those are two tracks you can move on. Or what is it? An IC or a management track as the software world. Oh, these are very traditional tracks and one might think all of my skills day in and day out are going to one of the two tracks. But there are many different things we can do in this life and ways to spend our time. And everything we're doing is adding to our body of work. And use that in ways that aren't expected. Some ways to make money, sure, but other ways to make artistic pursuits that can eventually make money as well. Things like that.
So, yeah. I feel like maybe it's a hack. But it's also maybe a we're reaching back into all of our experiences and able to kind of explore. Like, oh, how can I be an artist? There's so many of my friends who say they are not artists and then I show them some creative coding tooling and then I'm amazed. It's like, oh. One of my friends he was sharing his optical illusions as a kid. And realized the impact after playing with a visual live coding language for so long.
Realizing, I didn't know where all of my tastes came from and the things I'm trying to create. I don't know. It's one of these success stories where he's a software engineer full-time. And I introduced him to tool, Hydra, and making visuals with JavaScript. And a week later, he was showing me feedback loop things and things I never thought were possible.
It's something where, how do you do this? Read the docs, read the source code. Saw things I could do and things I couldn't. Yeah. And this is maybe a little -- someone's saying ""Preach."" But this is going to be a little preachy too, and I really do believe, and maybe pandemic has -- this is one of my takeaways from the pandemic, I don't know if I mentioned that on the show. But I really think everyone is an artist at heart. We want to see our impact and share that with others. And I'm an artist and making art in many ways. And today we're talking about making music with code.
And something about choosing the different medium, in this case, codes. We can see that now art is relatable, art is approachable for a lot of folks who maybe didn't see art as approachable. And I can relate being one of those people who was in software -- computer engineering school.
Right.
For so long. Not seeing what I was learning. Not seeing how binary trees or sorting algorithms would ever be a helpful steppingstone to me understanding how to make code on the fly. Make music on the fly with code.
I love it. I think it's so interesting too because, you know, it goes in many ways. I think that what you said about when you talk to people and they say things like, I'm not an artist, right? The interesting part of this is that it's -- it's not as cut and dry as like well, I'm not an artist because I don't own a paint brush. It is not -- that's not a statement that makes sense. It's the same way that, you know, when we argue about whether or not you're a programmer. Did you build something that runs on a computer? You're a programmer. Sure, maybe it's HTML. Maybe it's C#. You know, maybe you're down in the byte code. I don't know. But in any of those situations, you're giving a computer instruction and making it do something. Same with art. People who are doing CSS art, that's art.
It's programming and it's art. And people who are making music with code. That's programming and it's art. And you are an artist. Any time that you get creative. But I think the other thing that's interesting is how that works back into your ability to do your job. Because you're talking about advancement in these IC tracks or management tracks and are you becoming a project manager? Are you becoming a better coder? Any of those things. Well, my time as the frontman for a band made me a much better communicator and a much better presenter for helping convince a whole team to go along with an idea. Or, you know, my time learning how to like structure songs helped me think about the arc of a presentation that I'm giving or a story of like the life cycle of somebody getting into a new piece of software for onboarding. Just because it's creative, doesn't mean it's not a direct translation into your day job. Thinking more laterally and thinking about getting as many different categories of knowledge under your belt as possible, all of them cross-pollinate. That's where the best ideas come from is when, you know, if you look at these really interesting ideas, it's because somebody had a lot of overlapping interests and they found a unique intersection is that hadn't been explored before. Oh, I can build that. And we all go, oh, my god, that's such a good idea. I don't believe I didn't think about that. It's because someone was weird and did all the weird things and found out all of their weird overlapped in a unique and useful way.
Totally. I think there's something about the ""Weirdness."" Like making it relatable and less weird for people. The role of being a translator almost. hey, here's really arcane byte code and open up an NES, we can mess from it and make art from Super Mario levels. There's an artist --
So cool.
You have the clouds from Mario flying by. I should find this artist's name. But, yeah. I think that's something that's really beautiful. I see some people in the chat talking about the analytical versus the creative. And I think it's really important and powerful to be putting energy towards both. In my mind the analytical is the technical abilities of learning a piano, or learning how to look things up on StackOverflow. Things like that. And I feel like -- yeah. I feel like both are important. And the -- yeah. It's this journey that I have been on. And that Char has also been on and many other people. You hosting this show, doing something that's intersectional in a way. I think everyone here, the role that we have as being the translator. Oh, I've explored these places and these are the exciting things they found. Let me bring them back and is share them with everyone.
I love that.
I think there's something important there.
I have a million more questions. But I want to make sure we leave enough time to actually see this in action. So, I'm going switch us over to desktop view here.
Cool.
And as we do that, let's take a quick second and thank our sponsors. We have Amanda from White Coat Captioning with us today, thank you for being here. Made possible through the sponsors, Netlify, Fauna and Auth0, and that's making the show more accessible. Find that on the home page, Learn with Jason.dev. We are talking to Dan, get over on Twitter and give him a follow.
And now I have some stuff. I started pull up some additional resources, then I realized I don't know enough to ask the right questions or where to pull them up. I'm going to say, where should I start if I want to get into making music on the web.
Yes. So, for making music on the web, there's many ways to do that. We're looking at TidalCycles today. There are many ways -- for the web, TidalCycles.org. You can see in the browser. If you want to follow along, you can also install it and maybe by the end we can see if you can also make some noises. But yeah. There's videos here of what different look like. Let's do the one in the middle.
Okay. Now we find out if I really broke this. Can everyone hear? Why can't I full screen this?
If you click on the YouTube logo. That will bring you -- yeah. Maybe click a little bit. Cool. I cannot hear this. But I'm okay with the viewers can hear this. So, what this is, is in the blue code there, and this is -- this is TidalCycles. This is Alex McLean typing and this is hello cat food Antonio making the visuals. I think and this is also them talking over them creating this. I can't hear.
I had this working, and now it's stopped working. It is coming through and it's getting out to Twitch. The concerning part is that I don't think you'll be able to hear TidalCycles once it starts. Which we had working a minute ago. So, what have I done? Let me make sure -- I think I figured out how this worked before. So, let me just turn these back on.
I can hear it. I can hear myself too.
That's the part I can't figure out.


The musicians looking at their screen are not --


So, this is really cool. And, you know, there's a lot of interesting stuff going into here. And question see words that I've seen before. Like legato. I know that that's a music word. And I can see that we're looking at notes like C7, D8. Those are all notes that I've seen in like if I look at a piano. Or if I see notation on things like that. So, this is really interesting.
So, let me stop this. And... I think I just made more noise? We're just gonna pretend that didn't happen. So, if anybody wants to watch more of this, you can. And yeah. So, this, then, should give us --
Yeah.
There's some context at least, right? Like high level, we're gonna write some code, it's gonna make some noise.
You have already installed this. But let's walk through what the steps look like. You can go to documentation, see install on the left. You are on Mac. I've done the installation on Mac and Windows both. What it looks like is opening up your terminal and running the script. You can see the source code. It's not installing anything bad on your computer. But what it is installing is a couple of things. And if you scroll down slowly, you can see what is the script doing do my computer? these are the different tools, some may be familiar, some might not be familiar at all. The main one is TidalCycles. It's a library working in Haskell. How many have worked in Haskell before? We can see in the chat. DSP -- domain-specific language? Domain -- D SL -- domain-specific language.
Someone who knows more about computers than me jump in.
But it's built on top of Haskell. It's Haskell with a few mods to make it musical. And the text is atom. You may have used that before. There's a package built in to do this. And then we also have Alex McLean in here who is video we just saw. Hi, Alex. And DSL, thanks. So, Adam is gonna be here and we'll be running commands on Atom. That will be sending them via socket to supercollider. Go back to the website.
Here is supercollider.
This is a thing that is separate from TidalCycles. But we're going to bring it back. But SuperCollider is an amazing open source cloud library, created by many people, hosted on GitHub, it's a way to write code in a terse way. For me, we have Alex here, so much energy has gone into how can I create music -- how can I actualize ideas as quickly as possible? That's what's resonated with me and kept me going and learning and exploring. So, yeah. So, we have these all installed this is what the installation script will do for you. Some of the things we are going to be doing today are only relevant for Mac users. I'll kind of flag those as we're going. Windows, I will say, blessings to you all for dealing with Windows audio drivers. It's a little bit easier on Mac. But there's a similar install script for Windows as well.
Got it. And whether I did this -- we did it aheadof time because we were worried about audio drivers. When I installed SuperCollider, I had to change the output rate of my -- I had to get into the MIDI here.
Audio.
And change this to 441 here because it was at 48. That was incompatible with Supercollider. It was really straight forward. This is a lot of software. I know it might feel intimidating. But I just followed the instructions here and was able to get up and running and all set and actually got things kind of running.
So, once you go through the setup, then I ran one command which like made a sound to make sure that it worked and I've stopped looking at it. Everything after the setup Dan is gonna teach us right now. So, I have SuperCollider and Atom. We have an empty project.
Close the welcome guide.
And I'm now ready, I think.
Yeah, so, going through the steps in the start title. I want to click on that for folks following along. It's right below the install. Yeah, start title. So, we're going through these steps. And the first step is to open up Supercollider which you have done. And we're going to run superderp.start. Do you have the file that I sent to you saved anywhere?
How do I get back to my recent files?
Go to file, open recent, I believe.
Open recent. Here's the, yeah. Yeah, I have a handful of utilities here. Let's see, they're all commented well. We can start and stop the server.
Yes. and I will link this in chat as well. But I have this on a GitHub gist. And what this does is for 90% of you, you'll just be doing superderp.start. But we need to go to the right audio output. I can't see different line numbers. You have a different window in the way on my screen.
Whoops. Let's see if I can -- can I fix that? Not really. Super-annoying. Let me -- how about this? I'll make this slightly smaller so that you can see what's going on.
Nice. Work smarter, not harder. Yeah. So, let's -- so, for live coding, why it's called live coding is unlike a Python script that you run, you save like hello world.py, save that, and then in your terminal, run Python script, that runs the whole file. With live coding, this isn't true for all languages, but with most I've worked with, you actually run different blocks of test at a time. Have you worked with Jupyter Notebooks or Google Collab before?
I have a passing knowledge, we did an episode where we played with something like this. Which I will just search for real quick. If you want to see how like a sort of Jupyter Notebook works, observable is like this. Where it executes code in blocks. Not as a whole file.
Yeah. Observables is awesome. Yeah. Let's see what that looks like. Here we're not going to hear any sounds. Just the setup. Get to the fun part too. Run line 12 by hitting shift enter.
Okay.
And this will list the different out devices. Which one do you want to send the audio to?
We want to send it to this one here, which is zero.
Cool.
So, this one?
Line 15, let's just change the number there in from 1 to zero. And confirm that's printing the right one.
Yep.
Cool and run line 18 and 19.
Ran 18. Ran 19.
Cool. And then so now we are saying, hey, server, go to these outputs. And now you can do super.start. If up installed or watching the bob, this is where you can run the start.
Okay.
We soot listing, and the cycles, everything is green. We're running. Good job.
All right. Theoretically speaking, this is kinds of the end of supercollider for now. Until we want to change more settings, we don't need to look at it anymore.
Exactly.
Okay.
And then what we can do now is go to Atom.
There we go.
I see that you've already created a file called test.title. So, if you're following along, you can create another file. Make sure it has a dot title at the end. Atom does not natively support dot title files. But there is an extension for TidalCycles that makes it do this. That was installed if you go to preferences, or installed packages, effort. And you can see TidalCycles package was installed here. I should note, this is open source, maintained bit community, Alex and many other folks. So, people made the -- yeah. This is one of the packages. Awesome.
I'm just grabbing it to make sure it goes into the show notes.
Cool. And then so this will make sure if you have a dot title file saved. Mind pushing it.
Yeah, sorry, so that you can see line numbers.
Thanks. Now let's do the test command. So, let's write D1, space dollar sign. Space and a sound. And then in a string, or in quotation marks, BD, the letters.
Okay.
To run this, you can do the same command as in supercollider.
Hit command enter.
Yep. Cool. Cool.
Okay. And we can -- everybody can hear that? Let me turn this up.
[Thump, thump, thump]
So, BD, using deductive reasoning, is short for bass drum?
Exactly. We hear a thump sound. thump, thump.
We're going to get close to dropping the base. Step-by-step. We can zoom in and make the text bigger. Cool. It's called TidalCycles because everything runs in cycles. So, everything will be starting at the same beat. So, that's one of the constraints of TidalCycles. You can break that constraint. But it helps everything line up. So, in the second line, let's do D2, dollar sign sound. And then let's do HH space HH.
Like that?
Yep. And let's run that.
[Thump, chick]
Cool. And let's put two more HHs in there. So, let's put four HHs and let's run that.
All right.
Cool. And then now on -- on D1, let's maybe make two of those happen. So, let's make that go twice as fast. Cool. And then we're gonna run one more -- yes, the HH is for hi-hat. So, if you do electric music things, worked with an 808 drum machine. What is it? I see Jason is bopping.
I'm ready!
Cool. I want to change the global clock. So, let's make the whole thing a little bit faster.
Okay.
On a new line, set CPS, all one word. And in parentheses, calling a function --
Oh, a function. Got it.
Let's do 1. And then just run that. Cool. So... so, one --
All right.
120 BPM. Or what's happening is everything in the string, it's gonna play both of those. And there's a musical term called quantizing that's going to evenly space them out over the course of one second. Make sense?
Yeah. So, if I wanted to, let's say we have an offbeat snare. Boom, boom, right? How would you add the space to get it to not hit on the one?
Great question. So, let's do D3. So, each of these are like audio channels, essentially. So, D3, dollar sign, Let's do sound. And a string. The rest is a tilde. So, you can do rest.
Rest and then snare?
Yes, SD, snare drum.
SD snare drum.
Nice. How is this sounding for everyone? Is the audio coming through okay?
How are levels, everyone?
[Boom, chick, snare]
Yeah!
All right. Yeah, let's keep on going. So, another thing actually before we make new lines, let's take the bass drum on D1 and let's actually make it -- instead of doing two of them, let's actually just do bass drum times two.
Like that?
Let's see if that works. Let's run it and see.
No.
Let's get rid of --
Sorry, one more -- no spaces?
Oh, so, it's actually working now. It's just doing the same thing it was doing before. Let's do bass drum times four. Cool.
Okay.
Bass drum one or two, either way. And then also -- so, I'm just gonna teach you the different building blocks. So, let's do -- let's surround the two with carat brackets.
We have very scientific nomenclature, square boys, round boys, curly boys and pointy boys.
We're using the pointy boys.
All right. We're looking for pointy boys.
Let's put the pointy boys around it. Within there, let's do two space four.
Two, four. Oh, no! Oh! Oh, I'm having so -- this is like... I'm so happy right now.
Cool. So, what we can also do now -- or, yeah, any other questions? I'll let you guide it. Any other questions as a -- things that you want to explore. Musical ideas.
This is really fun. What I like about this is that it's -- you mentioned the word ""Terse,"" right, as a way of describing things. And I think that's fascinating here is we just -- we did exactly what I would have expected to do on a sequencer. But I didn't need a sequencer. And that's really exciting. I could just say, oh, yeah, I want a hi-hat. And I just -- just get the hi-hat going. So, what if we want to add a fill? You know, like we want just at the last bar, right? That kind of thing.
Yeah, let's try that. Let's do hi-hat times 8. Let's see what that sounds like.
Oops. Eight.
That's pretty fun. So, yeah, in this case, there's a couple ways to do this. If it's a drum machine, write it out. And the most important command for TidalCycles. This is how you make everything quiet. On the bottom, maybe, write the word ""hush"" and run that. That will silence it.
Party stops.
Right. DJ, record scratch. But, yeah. Let's -- and then we can bring back maybe -- let's just bring back the D1 element first and then we'll start there. Cool. So, this is how much can you subdivide? You can make it play like 200 every second. You can do lots of crazy things. We're starting very constrained. Cool. On D2, let's type out the four hi-hats again.
Okay.
Rather than times eight. And then put the square boys was the square brackets. Yeah, let's put that around the HH. And then let's do HH times 2 in there. Let's run that. [Boom, chick, chick]
Oh, I love it. Okay. And if we wanted to make it like clever, could I do one like this? Where I want only every other?
That was my next step, yeah. Nice.
This is so great. I love this.
Cool. So, let's do something with a snare drum now. Let's do it so... let's do it so the snare drum -- yeah. What do you want to do? What kind of fill could you do with the snare drum?
[Boom, boom, chick]
Let's go with we'll do one of these and then... what happens when you do a triplet? Oh, god. Chaos.
So, let's put -- no, leave it as-is.
Okay.
After D3, do dollar sign slow 2. So, yeah, dollar sign. And then slow and then 2. Cool. Let's see what we've got there.
Okay.
How is that feeling for you?
Yeah, it's...
now we'll do it...
Every fourth.
Exactly. Perfect. I'm going teach you one more thing. This is a building block that we'll be using. Online one --
I'm gonna go full trap on this.
I love it. Maybe on the second HH let's do it -- let's put that one -- we don't actually need the brackets around it. Let's just do times -- we'll do the same thing. Let's do something with that one too.
Okay.
do a, yeah, what do you call the pointy boys?
Yeah, pointy boys.
Cool. Let's do that. Cool. All right. Cool. And then for D1 now, so, let's erase everything after BD. So, like the times before. We're gonna do a different pattern now.
Okay.
Let's do parentheses, or what do you call that? Round boys?
Round boys!
And then do 3 comma 8 in the --
Like that?
Yeah.
Ah, we can pick the down beat. I love it.
Yeah. This is not in TidalCycles, but there's academic papers on this. This is call called Euclidian patterns. Let's do an experiment, you can do command shift D to duplicate the line. There you develop and then let's just do bass drum times 3 in there instead of these parentheses. And let's run that line. Oh, and you want to have a line break between them or you can hit shift enter. Yeah. Let's run that. Yeah.
So, now we're on triplets. It's cool. It's got a feel.
It's got a feel.
It doesn't resolve. It's very tense.
Yeah. Then we can resolve by running the first line again.
Okay. Jacob asked a minute ago about how to do different verses. Because this is live coding, as the DJ, you're building a set and you're gonna move. We're here, all right, let's create some tension. Right? Now everybody is like, what's going on? This feels really tense. And when you're ready to drop the bass, you go back up here. I love this. Oh, this is fun.
Cool. And I love that we have been doing this, we're listening -- it's a relationship with the computer. Telling the computer what to do. And listening for sonic feedback to see if it's doing that thing. I think for me as a musician, that's something that -- that feedback is something that keeps me going. And I love that stuff.
Yeah.
You're not doing that on Twitch as well, and we have a live captioner here, not much of that is coming through. But it's something that I think is really cool about this.
It's very cool. So, to isolate this because Nicky was asking what the difference is. So, let's go with just this.
[Thump, thump] -- this is every third beat. One, two, three -- it's very like... every third beat. And then this one...
[Thump-thump]
It turns it into an actual repetition that feels more like 4/4 time. You get a cool feel in there. So, when we add everything back in, it's got a little bit more bounce. This is more fun than just straight four on the floor.
Yeah. And what you can do also is we have those little carat brackets, or the pointy -- I'll try to say without laughing as we continue. Online number 1, let's do the pointy boys around the 3 and let's try different numbers in there.
Let's do... let's see... we'll... this is gonna be chaos.
Not all that much chaos.
Oh, I'm into it, I like it.
What else do you want to try?
[Drum beats layin' down]
And we can just get weird on this, just keep...
Exactly. [Drum beats]
This is interesting. This round can be different from a different round. Things get interesting and overlapping and you remove some of the robotic feeling by having these separate loops that are all layered together and then I can kind of turn things off and on. And get in here and get tense. Like this is really fun.
It's getting nested. We have loops within loops. I was talking about how we have binary trees -- how is this gonna help me? This is creating a logic decision tree for how each loop is played. And you can create a very complex loop that it will repeat once every, I don't know, every hundred times by having enough variations.
Right.
So, yeah.
So, a couple people have asked about instruments, right? So, we've got a drum kit.
Yes.
Can we add a lead? Can we do bass?
Totally.
How do we take this even further?
Let's hush it and let's simplify and bring one of these in as a clock. What's to keep in mind, this is with the advent of music, you no longer need a band, with five musicians together, it's better than one person typing it out. You can breathe together and change the tempo. I think with the advent of electronic music, it means that one person can do many things. But you want to be mindful, when you start the processes, the sub-processes, they can get stale. You have the power to start, you also want to use the power to stop and use negative space as well. Sonic space.
Right.
That's not a TidalCycles thing. That's just like a Dan after a while thing. But, yeah. So, let's maybe fly the first one. D1, line 1. Let's play that, and that will be our heart beat as we explore some instruments. Nice. Cool. So, let's start on some new lines. We can organize the code however -- cool. So, let's explore. So, there are different ways to get tonal and melodic things. You can use -- and re-pitch them or you can actually synthesize sounds. So, do you know what synthesis is?
In the broadest strokes, yes. But I think for -- for me to not sound like I'm making stuff as I go, and for anybody who hasn't heard it, I would love a 101.
Cool. Synthesis 101 -- I discovered hardware synthesizers that make like music synthesis, like audio synthesis I guess a year before TidalCycles. And I was off to the races before discovering that. But synthesis is creating using -- then again, I'm not -- this isn't the definition. But it's how do we create -- how do we synthesize something? This can be audio, this can be video. This can be many things. What is the synthesis definition? I'm curious. The definition -- this is not the technical definition, but it's okay.
Doesn't Ableton have like a synth thing too where they -- learning synths. So, if you want to do like a real 101 and learn how all this works, you can get in here.
Yeah.
JASON:
But essentially what we're going to be doing is using supercollider as the synthesizer. We're using it as an audio synthesizer today. Supercollider has two processes.
Oh, I'm opening the wrong one.
We have the server running in the bottom right. This is showing what's happening with the audio. In supercollider, you can go to server on the top and hit show scope. You should see what's happen, what it's creating.
Cool.
This isn't it synthesizing, it's playing samples. We're going to say, hey, supercollider, we created synthesizers in code. And TidalCycles is going to be calling these. So, yes. So, that's like broadly -- in the world of creating lots of different digital art, you either go sample-based on synthesis. For video art as well. It's like, oh, what's our base that we're working off of? A existing video or photo? And creating shapes with math. And Char will talk about what creating shapes with math looks like on Thursday. Let's go back to Atom and explore using some of the synthesizers.
Let's do it.
Let's do D4, dollar sign. And let's say, note. And then in a string let's say C. Lower case C. And then let's say -- let's actually say C3.
Okay.
And I'll explain what this is -- or, we're using the music capital note C. So, A, B, C, D, E, F, G, and it wraps around. An 88-key piano has 88 different keys, and every 12 notes it repeats an octave. You're going to the third C. It's towards the lore end of the piano. And now a new symbol. After C3, outside of the string, let's do hashtag or pound. And let's say sound is going to be super -- sound, space, super -- and then in a string -- sorry. We're gonna say supersquare.
Like that?
Yes. And let's run that.
[Boom, boom, boom]
That's kind of loud. Do hashtag, yeah. And space gain, space 0.8. Let's run that. Cool. It was loud on my end, but if it's not loud on your guy's end. Maybe make it --
It was pretty loud.
Okay. So, now we hear a note here. So, this is asking supercollider, so if we go back to SuperCollider and look at scope. Here it is. Yeah. That's generating a square wave in addition to the drum beat. This is not -- there's much better ways to visualize this. The Ableton one is a great way to see what the different waveforms look like. Cool. So, now how do we change the notes? Let's after -- at the end of line 9, let's enter a new line.
And then let's have it all connected. This is junior organization. Haskell does care about the white space.
Gotcha.
Let's do plus note.
Plus note? Like that?
Yep. And then in a string, let's do 2. And let's run that. And you want to do command enter and run that. Cool. So what about did that do?
It took it up two steps, right?
So, if you look at a keyboard, it's just going up two little -- two keys. We're counting black keys and white keys. So, this is going on two semitones.
Got it. And then if we did something -- would it be minus note and then we could go...
Yeah. Let's try it. Oh, so, it takes the I guess the sum of all of those. So --
Oh, it does the whole thing. I got it. Okay.
What are you trying to do? What do you want to have it do?
I thought it was the same that these were if you fired one and then the other, it would change it. I was gonna have it oscillate between two pieces.
Cool. Let's -- how can you integrate the pointy boys to do that? Where would you put them?
Let's do... let's see. So, I can just set any note, right? So, if I wanted to cycle between two notes, I could do like a C and then we'll go what's third -- so, E, F, G, right?
Yeah. The third would be -- yeah with the G would be the fifth. Let's try that, though.
Right. Because I'm not counting... okay.
Let's just comment out the note -- the plus note two at the end.
[Oscillating notes] 
On line 10, you could do command forward slash and run the command again.
Right. If we want to make that for --
Cool. Now we're hearing the notes. That it's the right notes.
Right, right.
We're playing the first and the fifth. What else do you want to do? I have ways where we can run with this. But I want you to drive.
At this point, I think I don't have quite enough knowledge about what's possible to get creative. I didn't realize -- the animated emoji are so good. I love it. So, like maybe show... maybe show me how to do a little bit of like alternation. Like if we want to get into something a little more audibly interesting than like a straight cycle.
Yeah. So, this is where I use the plus notation. I like to because it's very terse. And you don't actually have to write out the note names. But it does need you have to go into semitone land. So, let's take the G3 away for now.
Okay.
And then let's -- instead of having plus 2, let's type zero, space, zero.
Like that.
And then let's remove slow 4. Let's run that.
Okay.
Yeah. So, plus note, that pattern will be cast on to note C3. If Alex is here, he can explain it with the correct terminology. But when I use this pattern -- and these are different patterns because there's ways to represent music with like language notation. what this pattern is doing is it's bringing this tempo on to C3. Let's type out about four zeros and see what that does. And you can see where this is going. Cool. And let's also do after gain 0.8, let's do hashtag legato 0.5. And let's run that. Run that.
Okay.
Is, what does that -- yeah, what does that do?
So, what we -- legato is like -- actually, I don't know what legato is. I thought what we just did would be staccato.
Oh, oh.
But I don't actually know enough about the differences to be able to speak to them.
So, what legato is doing -- maybe length is a different way to describe it. Because the length --
We just turned it down. Legato 1 is like sustain infinitely.
Exactly.
Got it.
Legato 1 is take up the whole extent of that beat.
Got it.
Below line 10, let's put a new line. This will all be part of the same thing.
Oh, like this.
Yes, exactly. And do plus note. And let's put in a string, let's put 3. So, we're gonna go up a minor third. So, it's three half steps. Let's run that.
Okay.
And let's go -- so, this is where my music theory knowledge, I know what these half steps, what these semitones are. But this might be going over the head of some people. So, please like draw it just back at any point.
So, and I think like -- hold on. I'm gonna get my -- without knocking things over. So, I have a keyboard here. Request I show it without --
We can also pull up a Google image. Either way.
We're doing this. Okay. So, here, right? We've got our -- our piano. And so, when we hit a key, if this is our zero and if we go up three, it would be -- wait. Can I do this? It would be one, two, three, right?
Yep.
Yeah.
And that's a minor third.
So, this -- if like you played these together, they would be in key, it would be a chord, right? But we're telling it, if we started here, plus three, one, two, three. And now we've hit this key. So, that's the visual.
Yeah. What we're gonna do, we can play chords, but let's alternate between them first.
Okay.
How do you alternate between the first note and the minor third for every cycle?
I'm making a guess. Like this.
Maybe!
This is gonna be chaos. Hold on.
That's cool. The nice thing about live coding --
That's not quite it.
What if you use the pointy boys?
Pointy boys. All right. So, we're gonna go like this.
Let's see.
[Groovin ']
There we go.
We're getting there. This is our bass line, if we want to alternate -- we can say after the last pointy -- let's do that. Yeah. So, five, up five steps is actually the fourth. So, it's confusing. But it's actually the fourth of the bass tone.
Do we want to go up six to the fifth?
If you want to go to the fifth, it would be seven half steps, actually. Nice. We can also do at the -- after the pointy bracket, the closing bracket, let's do divided by... three. Let's do divided by two.
There we go.
So, now it will alternate half as slowly. Or half as quickly. Okay. So, real quick let's now on a new -- let's add some higher notes and then we can make these ones do some more exciting things.
Okay.
This is pretty exciting as we're going. And then so, now on D5. Let's say note -- let's do like a C5.
Okay.
And let's do sound -- let's do all the same things. Except for like supersquare. And then let's do -- let's --
Legato, 0.5.
That's fine. And let's do plus --
Okay.
And now let's do plus note, let's do zero, zero, zero again just to see what this sounds like.
[Added a higher note on top of the bass line]
Cool. So, what we can also do is a use a low pass filter. This is some synthesis knowledge. We're going to cut away the highs.
Okay.
A hashtag after zero, zero online 14. Let's do lpf. Let's do like 2000. So, we're gonna cut away all the highs, just not as harsh.
Okay.
And we can bring the gain back up to .08 as well. Cool. So, now for these notes, let's -- within the note, zero, zero, zero, zero, let's change some of those around. Let's do -- I like using like a triad is a zero, three, the first, the third and the fifth.
Sorry... do it where, no?
So, let's do, in line 14, let's change the first -- let's change the zeros. Let's add different notes in there.
Okay.
Let's sprinkle in threes and sevens and fives. Maybe even some ten.
[Driving beat adding higher notes that are moving within the scale]
I love it. This is exactly where I was gonna take it. All right. So, now let's bring in some of the other drums because we're getting there now.
[Drums added]
Cool. Let's see -- we have the hi-hats as well. Make it a little trappy.
[Hi-hat adds in]
Cool. Now we're getting there. How is this feel something
This is fun.
Yeah. So, let's just try doing some different notes and see what happens.
And then I want to show -- oh, yeah. Keep it going -- string note -- 12 is the octave.
We can really...
Let's go for it.
[Driving beat]
I like it.
You can kind of get like chaos. This is fun!
Yeah.
[Drum beat with notes moving over top]
This is using a synthesizer. We have 15 minutes left, that's how we're going on time?
Yep, yep.
Let's explore a little bit more how we can introduce algorithms into this.
Yeah, let's do it.
So, what I want to do, we'll keep the code a little organized. Oh, thanks. Let's run line 13 and 14. Let's run that pattern. So, command enter. And after lpf 2000, let's put hashtag room 0.6. Add some echo. Make it sound a little bit nicer. Okay. So, after D5, let's hit enter and put the note D5 on a new line.
Sorry --
So, after D5 online 13, let's bring that down --
Oh, I got it. You want to bring this down.
Let's say... let's say fast space 2. And then we need another dollar sign. Yeah, it's not happy because we need one more dollar sign after that. Cool. And what we can also do is fast 2, we can add the pointy boys, the carat brackets in there too. Let's make that a string. Yes. We have to make all that a string.
Like that?
Yep. Let's see what happens.
[Notes moving slower and faster] 
Cool. Okay. Now let's add another -- let's hit enter after that and add another function now.
Okay.
So, that we can do sometimes. And then --
Sometimes?
Yes.
oh, I just got -- everyone as excited as I am very this?
Sometimes, half the time, we want it to do something. Let's use parentheses.
Okay.
And then let's say plus --
Plus what now?
Let's do plus note, sorry. Plus note. And then let's do 12.
Like that?
Yep. And then let's do another dollar sign after that.
Oh, right.
Yeah.
[Notes moving in the octave]
Let's run line number 1 again just because, you know, we're doing this. And let's run line 5 as well.
[Adding in notes]
Or line 5.
Oh, line 5, right.
Yeah. Cool. Yeah. So, what's happening here? What did we just do? Can you walk us through that?
Okay. So, we just told it to alternatingly play a bar fast and a bar at -- a bar at 2x speed, a bar at 1x speed. And then we have a random generator that takes it up an octave. So, every -- sometimes, roughly 50% of the time, it will bounce up an octave.
Yeah.
Then we take our note that runs at C5, run it through a synth, make it adjust level. Make it a little more staccato, then we do nonsense in here, cut out the lows and add a little bit of reverb.
Exactly. This is the pattern magic of TidalCycles, the beauty of it. You can take it and this is what's the idea and add algorithmically some randomness and magic to that.
I'm just blown away with just how much this made the whole thing more interesting. Little stuff like to. Are there other -- this one feel like a super power? Are there others that you lean on heavily when you're doing your own performances to get this kind of interest?
Yep. Before we do that, do we want to -- do we want to do the MIDI thing and explore it and visualize it? We only have 10 minutes. Or just leave it here.
What was that called? Dot piano?
Yeah, dot piano.com. We can bring it in here and actually visualize what's happening.
All right. So, I'm gonna hush.
So, dot piano, you can play it with your keyboard. We might not be hearing it right now.
I turned everything down because it was getting a little aggressive.
Oh, smart, smart. So, dot piano is a website created by folks at the Google creative lab. Created unassociated with them, but for the Cooper Hewitt Museum in New York. It also plays MIDI. You can plug in a MIDI controller and play keyboard. We can take the patterns we just created and send it to this.
Just to show everyone what I'm doing here, I'm like making... [Piano music] -- right? So, anything I play shows up on this screen which is very, very cool.
Exactly. And it's using piano samples, really nicely sampled pianos, rather than synthesizing them. I'm going to bring us there this. Go to supercollider and initialize a MIDI. Online 31, this is how you can bring it outside of supercollider and synthesize other instruments. Scroll down a little bit.
Here we go.
And run this right here. Hit command enter anywhere inside there.
Oh, wait.
Without highlighting it.
Oh, gotcha. MIDI --
Yep. What this is doing. It's telling TidalCycles, we have this new instrument called MIDI. This is now actually going to send this to wherever. That website is looking to all MIDIs. Let's change to supersquare. Let's make that into MIDI. Let's just -- sorry, in Atom.
Oh, in here.
We're doing lots of context switches. Let's change that to MIDI and try running that and see if that works. Let's just try running one of them.
[Drum beat]
It should be. Yep. Cool. I click on the page too to activate the sound. Click on the edge.
[Drum beat with piano over it]
Cool. Let's also increase the gain back to 1. Because the gain does listen to that. That's one of the... cool.
[Piano over drums]
So, what's happening? Does this sound familiar?
Yeah, I mean, this is so cool. So, now I have my own setup here. But if I change this to be -- let's do one of these. And maybe we'll set this one to be like 3 or 10. And...
Yeah. Let's simplify this also. So, let's go back to TidalCycles, back to Atom, and erase the one, do a fast 1 for now. And let's run that. Cool. So, another pattern I use -- let's also go back on TidalCycles and I'll show another pattern that I use. Let's change sometimes. Let's say... let's change sometimes to often. Use the word auth.
Replace the word sometimes with the word off. If I can spell.
And after that, let's do 0.25. And let's --
Like to?
Yep. So, what that's doing is actually playing the pattern twice. The second time it's up an octave. And it's offsetting the cycle. So, let's comment out that line, actually, and just see what it sounds like without this.
So, this is one pattern going.
Right.
Now let's uncomment and we can add it back.
[Piano over drums -- it is dance-able]
This part, that's what's taking it up an octave.
Exactly. We can do plus note 24. Let's see what that does.
Whoops.
[Added another octave on top!]
Cool. We can do auth 0. Let's do auth 0 instead of 0.25.
Yeah. It's exactly in lockstep now.
Go ahead.
Does the .25 somewhat randomize the notes? They start moving in different directions?
Yeah. Let's do auth .1. Let's see what that does. See what's happening?
I'm not sure what's happening. But I am sure it's jazz.
So, it's taking the note and it's offsetting it just by a tiny bit. So, .25 offsets by a quarter of a cycle.
Oh, so, instead of starting on -- so, our main cycle is tarting on the 1, but the octave cycle is starting on the 2.
Exactly.
I gotcha.
It's a very simple concept. You can see with code. And maybe we can hush it real quick as we start to wind down. Cool.
We can see, like musically, it creates very complex patterns harmonically. But with code, it's one more line that is added.
we're gonna take that harmonic string and shift it a little bit, add a phase. Kind of like my voice this whole time.
Right. Yep.
Yeah. But yeah. So, those are a lot of different concepts thrown at you. How is this feeling so far?
How are you feeling, chat? I'm feeling great. I feel like this is the sort of thing that gets me excited because it's the -- the sort of thing that I request see unlocking some doors that would have been challenging otherwise.
Where, you know, through a little bit of experimentation, learning what the patterns are, you can make music that I wouldn't be able to play on a piano. I wouldn't be able to sit down at a drum kit and make that beat. But I can mess with some patterns and kind something that sounds cool. And similarly with the synth, I can kind of pick a note and I can kind of pick some basic patterns and randomize it and just do some stuff that I'm not gonna be able to improvise on an instrument. So what about it has me feeling really optimistic. And the other thing that I'm interested in, because of what we're doing here with the live, there's a lot of instrumental input.
I'm turning gears on what would happen if we let the chat activate or deactivate certain parts of the loops. Somebody could mess with the parameters so someone just doesn't put 256 down beats. We could set some basic guidelines and suddenly we could do music that's collaborative and people could go on it. I think that's really, really fun.
Chat, what are you gonna make with this? I want to see people go and make some music. This is so fun. Can we get a W in the chat if you are gonna go and mess with some coding music? And while we're waiting for the chat -- there's Char. All right. See some folks coming in. I'm so excited.
And while I see some first time chatters, a lot of first time chatters. Thank you for hanging out. A lot of Ws in the chat. Let's call this a good stopping point because otherwise I'm gonna go all day. We have had Amanda from White Coat Captioning here with us all day doing the live captioning thing. Thank you very much for that. And that is made possible through the sponsors, Netlify, Fauna, Auth0, making this show more accessible to more people. Make sure you head over and follow Dan on Twitter. And check the show notes for links to installing supercollider and TidalCycles and all the things you need to gets up and running here. Dan, any other links to make sure people get to before we wrap this?
Yeah. A good way to follow what's happening. So, live code NYC is what Char are part of, go to live code -- or Sligo NYC. And hit enter. This is an artist's collective in New York. This is what got me started. We have a Discord here. This is one of the ways that the community grows. There's also a community in SF called SV Club SF that I'm helping run. There's an Instagram link for that. I'll share that in the Discord. Yeah, I don't think we have any -- anyways --
This one.
Yeah. There's a Twitter. All right. Nice.
There's a bit. Somewhere to lead in if you want to get into this in the San Francisco area.
In New York, live Code NYC. And the Discord is global for these, and we have Discords for both. And there's also for TidalCycles, there's club.TidalCycles.org. This is Alex's, Alex McLean, his course to teach TidalCycles. It's free. All the videos are online. Let me pull put that here. You put it. Thanks, Char, for putting AV Club SF.
What gets me going, how am I making money from this thing? Technology companies, people interested in the code because of all the implicit ways this helps in what we do day in and day out. But also what keeps me going is finding the circumstances to perform, circumstances to share work. And I think that all comes from community. I think what you're doing here is amazing. You're fostering a Twitch community twice a week, every week coming together. And it takes a lot of work. And honestly, having an outlet for people to share work and have a discourse is important.
Absolutely. Thanks so much for hanging out. Chat, if you want to do more of that, make sure you go and follow Dan on Twitter. And come back later this week because we're gonna have Char and we're gonna do visualizations. So, we're gonna get some music and make that happen. And then a whole lot more. Check the schedule, mark your calendar, you can get it on Google Calendar, follow on Twitch. By Thursday, I'm going to fix the problem with audio phasing. Thank you all for putting up with some audio glitches as we go. Dan, especially you, I know you had to listen to your own audio all day. Thank you for trooping along. Chat, thank you for hanging out as always, thank you, Dan. We're going to raid. Thank you very much and we will see you all next time.
Take care, everyone.

In [ ]:





​


","[(0, 0.31725183), (1, 0.13574636), (2, 0.5470018)]",0.31725183,0.13574636,0.5470018
"So, my name is Dmitry Vinnik, and today, we’ll talk about kindness. Nothing, you know, unique, though. The concepts will be kind of, you know, simple, you can even say cliché but hopefully, some of it would resonate with you. So, what is kindness?I’m not going to define it from, like, the, you know, Webster Dictionary or something, but I’ll kind of highlight a couple of main points. First and foremost, we have to show some empathy or, in other words, be able to relate to others, what they’re feeling like, and ultimately be able to show them compassion to what kind of a struggle or, you know, life they’re going through.But not just looking or understanding how they feel, it’s important to give back and help them whether it’s through volunteering or any sort of ways that you can give. And the simplest way I can put it, just being nice.All these main highlights, again as I said before, sounds so cliche. It’s easier to say, but it’s so hard to implement.Let’s apply the kindness to dev rel. And for that, I really like to be more specific than that and set some focus. And the focus for today and the kindness that I’ll be discussing with you guys is that we’ll discuss kindness with your community, for your community, and then a kindness towards your team and yourself.So, we’ll begin by discussing the major part of this talk will be focusing on your community. So being kind, as I said before, it’s very easy to say but it’s very complicated to actually follow especially when you apply a context, in our case a dev rel context.So, when do we have a chance to be really kind when it comes to the community interactions? Of course, it’s the community engagements. Basically, working with communities in different ways. And you might ask yourself what can go wrong when you’re working with different communities?There is this great example I always like to bring up. Jeremy Ashkenas is the famous person. He is the creator of CoffeeScript, Backbone.js, and lots of other open source libraries and frameworks, and he posted this lovely picture of him enjoying the sun, jumping into the water and then someone made a great comment just that describes the, you know, some of the, not the nicest people.This comment basically explained the, weird feedback to give to someone who’s enjoying vacation but something that we have to deal with, not very kind comment, I’d say.But even though this might look bad, this sort of feedback might look bad, you should always, always remain calm and, you know, level-headed. Never ever lose control of your emotions if you want to remain being kind. There is a saying that all it takes to undo 10 acts of kindness is just one single act of unkindness.So, never be rude, never a reason to be rude. I’m from Canada now, so I can actually say that, but more importantly, there’s this whole, this point kind of famous saying is the Art of Unsent Letters. It comes from, they say, Abraham Lincoln.When he was upset with, you know, some general or whoever he was working with, he would not just message them or, in his case, mail them a letter saying how much he disappointed in the person. Instead, he would write a couple of iterations of a very, I would say, unpleasant letters how upset he is with the person, how horrible their acts were, but he would never send those letters.He would actually hide them in his drawer. We actually have them today, we can read them if we wanted to, but the recipient never received them. We can do the same exact thing.If you got an email from your community, from the email list, write out your, you know, emotions but don’t send. But be careful, though, when you do it through the email. If the recipients are on the field and you accidentally press send, it might be not as pleasant of an experience, so be careful with that approach.It’s good to focus on improvements, again, when it comes to your community. But even though we encourage that be part of our retrospects when we work with the different dev relation teams, sometimes it’s important to appreciate the success when the project ended and really try to go for proactive feedback.This morning I saw that Google did a great thing. They posted appreciation of the WebKit team saying, “Thank you for fixing the long-standing bug,” you know, we just, all of us, it’s not that, you know, “Now we need to do better,” and, “How do we improve the project going forward?” They have acknowledged a good thing proactively to some extent. I really appreciate this kind of approach.Some people even have, you know, not Friday Improvement Day, they do, like, Thank You Thursdays, people actually have it scheduled where they can say what they’re grateful for towards the community. What sort of good things the community has done at that point.So it’s always nice to appreciate the people near you. But remember, remember, more importantly, even though with your emotions is with some, not that kind of people out, you know, out there always more good people than bad. Or in our case, I would say more kind people than not.Recently, I was in Lyon, just like, last, month. I was speaking in Lyon and during my time there, unfortunately, there was a potential, I think it was a terror attack, where, you know, where basically there was a bomb right near the venue of the conference. This message was posted about 9:00. This was a different time zone but it was as if it was, like, late evening that day right after the conference.But I, what I really liked is that we did not focus on that. This is basically a Slack for the speakers. The next message we got in the Slack channel was about the party that we were going to. Especially, I appreciate this cat smiley face that was basically posted right after. No acknowledgment of the above…The community might appear at least to be rude or unkind. One of the things would be wrong expectations, especially in the open source community, it’s a big thing where they expect you they feel like you owe them to fix a bug. That’s their own expectations.Sometimes there are no expectations and that’s what produces this sort of a mismatch of what they think you have to do for them. We have to make it as clear as possible.When you made it clear, then you can have some expectations from the community, and keeping them in check, and really have this good relationship going.The talk before me was acknowledging the same point that, you know, a code of conduct is important and not just lack of code of conduct, I see more and more that fortunately conferences now implement this important document but still, I see that some events don’t really enforce or empower the understanding of the importance of such document. There is maybe the code of conduct but there is a lack of understanding and appreciation of how important it is, and that’s not going to work well.And sometimes, again, there is lack of tact in the community or in culture that you’re working with. As dev rel people, we often have to interact with people all over the globe.I myself have a background from Siberia, right? And I have kind of a harsh way to interact, at least I used to. Canada kind of taught me the different ways of life.But I still remember when I was giving the code reviews and I would see the code line that I did not really like as much, I would say right to the point, “This is horrible. This is not how you do it.” And I was working with someone from France and they would explain me politely that that’s not the way to communicate and that’s important, they did not give up on me.Never give up on your community. Really try to empathize with them. The person I was commenting on the code empathized with me and he really tried to make my coding practices better, and this is what you should do for your community. Help them. Don’t just give up on them so quickly. Most people want to learn. They open to learn.A good example, today we had a discussion on this floor about just the public speaking and I brought up, there was in a point we were discussing of the, do we need to have introduction before our slides? And I said very strongly, “No, we should not waste time on that.”And there was a person in our discussion circle, Mina from Microsoft, and she brought up, she was, strongly disagreed with me and she was very open about it, and she explained that as a female speaker, she sometimes has to establish the credibility before she can talk and be appreciated by the people she has to, you know, give a talk in front of.And I myself, you know, I couldn’t really appreciate that because I wasn’t able to connect to the same idea. And she was you know, open enough to explain it to me and I really appreciate that but I am open to learn and most people are open to learn so don’t just give up on them.And overall, try to be human. The problem these days is because of the importance of email and instant messaging we often dehumanize our interaction.So, with all these avatars, you know, those eggs and, you know, meaningless, faceless avatars, it’s so easy to be mean. With this egg from Twitter, I can be as hateful as possible to the, especially the cholesterol and other problems. I hate this thing. And try to avoid it.If you interact with the community, try to at least encourage them to have a real avatar, their photo, because then people can see the human behind it and it’s harder to be mean to someone when you know there is a person behind. How can you be mean to this person? This very open smiley face, it’s going to be tough. It’s possible, but it’s going to be tough.But, again, it’s important in those communications when it’s not in-person but when it comes to in-person interactions, like conferences, meetups, hackathons, and a bunch of other ones, when we interact with those in-person engagements, we have to know, where do we direct our kindness?And it’s important to know that when it comes to in-person events you have to focus on your attendees and your speakers. If you have appreciation for those two groups, you’re going to have a successful event.If you have a person like Brian Sullivan, who recently have been kind of popularized online thanks to, for myself, Stephanie exposed this situation where they basically were very mean to the regards of speakers, you know, being very egocentric and want to be paid for travel and other expenses. He had a very wrong approach and he actually apologized for this idea that he had and, hopefully, improve going forward.Yes, it’s not every conference sponsors speakers but it’s how you operate, how you, you know, that you appreciate the attendees and speakers. People would know that and that’s how you have to show kindness towards your attendees and in-person events.But that being said, always be strict to the sponsors. As welcoming as you should be, you have to be careful when you give them the slots to speak.I’ve been in events, I still remember to this day, I was in India, there was a lightning talk. They gave a slot to the sponsor. The sponsor started the lightning talk by showing a promotional sales video. I stood up and l left and that’s what we should do, you have to be very strict on the idea of how you interact with sponsors. That being said, we always appreciate their help, you have to be clear on that. Again, expectations matter.And be strict on code of conduct, don’t just have it for the sake of it. Kindness should not be, you know, conflicted with the weakness. It’s not the same thing, that’s why I appreciate the JSConf Europe just a couple days, this was June 3rd, it’s just, I don’t even know what day today is, but they just recently posted this after their conference.Someone, you know, breached the code of conduct and they were very clear and, you know, fast in acknowledging the importance of following the code of conduct and I really appreciate that.So we looked externally quite a bit and it’s great but let us now look internally and see the focus of kindness towards your team. This tweet from Cory Benfield, who is a quite big in open source field and he acknowledged that throughout his work for the open source, his, you know, mental health really suffered.Himself, he said he became more bitter and short-tempered. It affected his family life and you never want to have that. Open source community should be fun and engaging, and if you really do that volunteering work and you’ve been upset and you know you feel like your life is miserable, that should never happen.You should be keeping that community kind as much as you can, and this is important to acknowledge these kind of problems and speak about them.Still, it’s hard to be kind when you are burned out. In case of Cory, it was very clear. He’s been burning out with this sort of open source contribution commitment that made him feel bad.Because we have lots of areas for burnout and it’s been established and talked about, you know, earlier today. When it comes to dev rel, the travel is, you know, very common fuel for the burnout. The odd hours, we have to work with different time zones very frequently.The constant criticism. As much as we appreciate, you know, a good criticism, sometimes I get those, you know, feedback forms, it might be 30 positive feedbacks and there would be, like, one, you know, one point out of five, like, “Uh, that’s weird.” It takes a while to kind of appreciate the criticism but still it takes a toll, so the burnout is definitely there for us.And lack of direction is also an important aspect in the area for us to easily burn out because it’s hard to measure success of dev rel hence we’re going to keep that in mind and try to figure out, “How do I know if I was, you know, the conference I went to was actually useful for the company?” It’s really hard for us and hence we start worrying and being more confused.So, what is the solution? Solution is fairly simple, is to be kind to yourself. You have to be kind to yourself and to your team. And only then, only then you can actually spread kindness.And spreading kindness, I really have to establish a couple of main points, is that never ever downplay alternatives that maybe exist in the market. Your competitors, don’t downplay them.A good example, you know, there is Selenium and Cypress.io frameworks out there. It’s basically the UI automation test frameworks and as much as I love both of those, there was a problem when Cypress when they would talk, not the Cypress team but then people would talk about Cypress, they would first begin by highlighting how slow and bad Selenium was.That’s not the way to go about promoting and talking about importance of your software. You have to highlight that Selenium brought up as testing standards as de facto QA too.You have to talk about that, you have to acknowledge. And be kind, uplift alternatives, show that your area of expertise is important, don’t just try to push down people.Never conflict employees in companies. I still remember to this day I spoke in Croatia recently. We’re sitting at a table for speakers’ dinner, there was a table near us. People who work for Oracle, you know, and Oracle as a company is one thing but then I see…Audience member: I work at Oracle.Dmitry: Yeah. And so you know, I would basically… I would sit on a table and I would hear the people hate on the people sitting right next to us, other speakers just because they’re working for Oracle. But not, they’re forgetting the great work that these guys were doing, you know.The conflicting the two, companies and employees are not always the same. You have to, you know, separate the two, and still be kind, and empathize. Don’t just think, “Oh, they’re working for this company, they’re going to be horrible.”There might be different situations, they might be great a great team with… you know, and there are great teams at Oracle. Oracle Labs are awesome.And always be open to share knowledge. As I’ve said, people want to learn. I really appreciate this book from Mary Thengvall, The Business Value of Dev Rel. It really taught me a lot about developer relations and be able to talk to others about dev rel positions.So, really, share your knowledge and experience, hence this conference. And think about delivery methods of your overall message. This slide is very famous and I tried to do some censorship but it’s still kind of apparent what happened.It basically was the Ruby conference, where they basically, the community was saying we have a number of features we want and the DHH reply, “No.” In a different fashion, you might say no or discuss it, but it’s how you deliver that actually matters. You have to be kind even with your delivery. And people would never forget this. Again, it’s hard to earn credibility, it’s very easy to lose it.So, to conclude, though, how can we be more kind? Unfortunately, there is no one answer because humans are complicated. I wish they were simpler but, you know, at the same time, it’s fascinating, right?Sometimes, though, because they’re complicated we have to let people go. Just think about the firing process of your companies. We have a coaching period when you’re about to fire someone. You try to coach them, mentor them closely because you know there is a problem.That doesn’t work, you put them on a performance improvement plan. That doesn’t work, you have to terminate them. The same goes for your community.As much as I’ve said that people are open to learn, hopefully, most people are open to learn and there are more good people than bad, even as Kelsey himself said just earlier today, there are still some, you know, not such a kind people or haters or whatever you want to call them out there, they’re just there for basically for the blood and suffering. You have to cut them out whether it’s you… but still, give it a try, try to educate and help them out.So let me conclude with a quick and short call for action. Foster respect. I didn’t mention this term as a whole during this talk but respect is implied. It’s what, basically the very basis of most of our emotions, good emotions, is to have respect because only then you really can empathize with people.And only if you empathize and try to put yourself on the spot and position of other people, you can ultimately foster kindness. That’s the only way. And kindness, again, is key. There are more good people than bad.And, again, as dev rel people, we’re lucky enough to travel or to interact with people all over the globe and we can see that even if they are on the other side of the earth, unless you’re a flat-earther, I’m not going to talk about that, but, you know, there are still people on the other side of the earth who are as kind as you would see, you know, working with you.And this conference is amazing. I see people seeing each other, they hugging, you know. Everyone, like, clapped, give a standing ovation. It’s amazing. So, really try to be kind, and foster kindness, and bring kindness to other people.With that, I really thank you all for joining, and yeah, that’s my information and stuff.Thank you.","[(0, 0.35933423), (1, 0.19340825), (2, 0.44725752)]",0.35933423,0.19340825,0.44725752
"Hello, everyone. And welcome to another episode of Learn with Jason! Today on the show, we've got Daniel Phiri, Daniel, thank you so much for being here. How are you doing today? I'm doing okay. First time I've had coffee in a while. I'm very anxious for the show. You're raring to go! So, I'm super-excited to have you on. I think this is going to be a lot of fun. We had a chance -- we were on some podcasts, some panels together. I'm excited to learn from you today. For those not familiar with your work, do you want to give us a little bit of a background on yourself? Yeah, like, back room, you told me I had to do this and I was prepared. But now it's like, ah! You put me on the spot. Gosh. What do I do? I do Dev stuff here and there. I like to build silly, funky things that I share, very rarely do. And I got into developer, I like working with communities. I really enjoy working with developer tools and just like going really into how the software industry works, at least from the developer standpoint. That's really nice. That's a lot of what I do. I do DevRel at Strapi now and still build things here and there. So -- Nice, nice. And people tell me not to be too coy about this or so. I do music production, I DJ techno. I love that stuff! Nice! I keep telling myself I'm going to get back to making music again. And it just never -- it just never happens. Someday I'll have spare time. Who gets spare time? How does that work? I have seen this joke a few times, adulthood is just repeating the phrase, things are gonna calm down and then you die. Yeah. It gets better. It's like a mix of it gets better and it is what it is, to be honest. So, I'm just learning that also. Like I'm new to this whole adult thing. Cool. So, today, what we're gonna talk about is headless CMSs in general and Strapi in specific. But so, let's start with a little bit of like the high-level, right? So, headless CMSs, I think that a lot of folks who have seen the show are probably at least passingly familiar with the concept of a headless CMS. We have new coming in today, if you are one of the lucky 10,000 learning about a CMS, what's the concept? What's the benefit of using one? I think I'll go over the concept before I get into the benefits. Sure. Oooo... what are these? We're getting booped. Nice. The whole concept of headless CMS came from evolving tools. We changed the way we build on the frontend. And so, you had to sort of improvise and adapt to the way we collect and store data. Multiple platforms, multiple like, you know, devices and just make sure that that's more like a seamless and better developer experience. And just in general, a better experience. And that's sort of like where the whole idea of headless came up. So, it's like, there's -- I mean, headless means there's a head, right? Or there was a head at some point. So, the frontend is usually what's used in this analogy as the head. And then like headless is like, okay, it's frontend agnostic in short. Meaning don't really rely on a specific frontend to display your content. And that's sort of where headless CMS content management system comes from. In the past, you had a content management system, what you served a specific platform, right? Like I said, we evolved. We got new tools. New toys to play with as developers and we sort of had to make things work. And that's -- that's what it is. It's like exposing your content management system, your admin backend to a bunch of different frontends via an API. And that's -- Yeah. The part that I get really excited about it with it is this idea that -- I come from an agency background. Back in the day, I ran an agency, we did a lot of WordPress work. And what I always struggled with was somebody would come in and say, hey, we've got a forum. We've got a store. We've got whatever. And we want to put all of these things together. And I would end up -- like a lot of times you just -- you just suffered through. Like you're trying to shoe horn e-commerce data into WordPress, or you're trying to make a blog work on Magento. Something that the tool wasn't really built to do because the frontend of the site had to be tied to the way the data was stored on the backend of the CMS. And the thing that I got really excited about was, when headless started to catch on, we didn't have to do that anymore. So, I was able to say, oh, you've got a blog on WordPress and you're managing your page content, but then you've got a store in Shopify and you manage your products there? And you've got a forum in, you know, whatever? Cool. Let's use the headless versions. We can build you a custom website and we'll just pull that data in from the platform where it makes sense to keep that data. And you get to use the best-in-class CMS. But I, as a developer, don't have to figure out how to fit together four different bespoke templating languages for four different CMSs. So, that to me was really exciting and it started to make me feel like, okay, we can start to treat the frontend of the web as a product and not an outgrowth of managing backends. I love the way you said that, you know? The frontend is like a product. Like, yeah. Because that's exactly where it came from. Everything was sort of fixed together. And one managed backend meant a single frontend. That's usually the web, right? But now more platforms are becoming like really important. I was using my smartwatch and headless CMSs can send things there. I have my mobile phone, which is practically an extension of me and I use it more than I use my laptop. There's all that headless enables. And it's a pretty cool thing to have. And one thing I like about it now, it's growing beyond that. I think this is something that happens with technologies that its initial benefits -- it outgrows its initial benefits and it sort of starts to create its own -- oh, someone is using it for this really weird, obscure thing. But it's also awesome. Oh! This is another really cool thing that it brings to the table. And now we're sort of seeing it being integrated into other systems that existed before and people are sort of asking themselves, hey, okay, we've got rid of like the whole idea of like the monolith CMS, which is what I liked pre-headless. Right. We got rid of that, but then we lost some of the efficiency that came with having a system like that. Or the features that sort of got developed because of a system like that. And headless is sort of right now, I wouldn't say playing catch-up, but innovating in its own right and building out new workflows for modern teams. Which is cool. Yeah. Absolutely. I think -- I like seeing that, you know, it feels less like there's contention between how you want to manage your content and how you want to build your website. You can make choices and you don't have to, like, accept the downsides of the frontend management of one CMS platform. Because you really like the upsides of the content management part. And, you know, so actually that brings us to what you're doing over at Strapi, right? So, Strapi is I would say kind of a unique -- a unique approach to headless CMSs, or it's one of a kind of a unique class of headless CMSs. And Edward in the chat -- Edward in the chat is working overtime for you today. He says Strapi is the most flexible and extensible open source CMS out there. When you talk about that, okay, so, open source in and of itself is very cool. But when we talk about flexibility and extensibility, what is it that Strapi is doing -- let's start with what is Strapi and then what does flexibility and extensibility mean? Yeah. That's a good place to start. As Edward says, Strapi is the most flexible and extensible -- yeah. I'll get his copy. It's open sourced, it's known for customization, extensibility and flexibility. To understand it, you have to go to Strapi's roots. Where did Strapi come from? It has its background in like an API framework, which could be a bit confusing for a lot of people because like now that was sort of evolving as a CMS. People are like, hey, I should be able to do this with Strapi. Okay. We've had to sort of tighten some certain things in certain places. It's still pretty flexible. And I should probably talk about how it's flexible now. So, there's so many places. I'm trying to figure out the best place to start to be honest. I think, one, the fact that it's open source, means its code is customizable. We see a lot of people doing a lot of really interesting things. Particularly with how we do APIs. And I'm sure once we get to demoing that, it sort of makes sense. You sort of work through content modeling and then that's sort of how you build your endpoints, you build your APIs and then that's what's accessible. And once you do that, you sort of have this code which you can open up in like VSCode and change a bunch of things. You add like hooks, you can tweak what we call these? We call them like controllers and you can build services and change how you interact with your database. And it's built on CoA. It's got a really interesting response flow. At any point you can sort of tweak how data goes into your database or how you client receives a response. And that's super under-rated. I think a lot of people use that. And I think just going a step back and talking about databases. We support a lot of SQL databases. Which is really cool. And being self-hosted means it's also super-flexible where you deploy it. I know that's not everyone's cup of tea. But at the moment, that's something like a lot of people really like about Strapi. And then even when you talk about like how you access your database, sorry, your API, we've got like RESTful APIs and GraphQL APIs and something I like about GraphQL is like, it's... it's not super-hard to get into like customizing your schema and building custom resolvers. It's so fun. Even like building like, you know, your own custom endpoints that are independent of your database schema is just like, it's really cool. And there's like a lot of really cool resources. I see Richard is in the chat. He's saying bootstrap your APIs on the user success team. And, yeah, they've done a really great job with like resources for the community and like making sure that documentation has all holes plugged. So, I don't think I've done it justice. But I don't want to talk too much on that. But it's super, super customizable. Yeah, no, I mean, I've done a little bit with Strapi. Like, we've got a couple episodes in the archive of doing different projects with Strapi. But what I think is exciting about it, just from the outside looking in, what I find compelling about tools like Strapi, is that they are -- there's no magic box to them. One of the things that strikes me a little bit with certain tools is when you log in, you're through a UI and you start like clicking buttons to make things happen. And then like you don't really know what's going on under the hood. And then if you break something, you're -- you're helpless, right? You just feel struck. What I've found to be really powerful about tools like Strapi, when you're configuring Strapi, you still get that really nice UI experience, but it's configuring code under the hood. You can see what changed. What's the schema? What does my data actually connect with? A few like Strapi, a few others, Sanity does it really well. You get code as the source of truth. As a developer, that's what I want. And I think that for developers out there looking for a really flexible CMS, being able to actually look at here is how your CMS is defined, these are how the fields are defined and how they relate to each other. It helps me reason and feel more confident that I've done something correctly as opposed to just hoping that like I understood the way that this UI was put together and the way that these things are actually talking. So, you know, it's a nice little -- Exactly, yeah. Power-up that way. I think we could sit here and talk about it in the abstract all day. But it's probably easier to show people. So, how about we switch over and do a little pair programming? What do you think? Absolutely. Let's get into it. Let's do it. What we'll do first and foremost, a quick shoutout. We've got Amanda here with us today, writing down all the things we're saying, doing the live captioning. Is she is from White Coat Captioning, thank you so much, Amanda, for being here. Made possible through Netlify, Fauna, Hasura and Auth0, making this more accessible to more people. Which means a lot to me, I hope it means a lot to you. Check that out on the home page. While you're on the home page, maybe take a peek at the store because I made a corgi duck. It's a little rubber duck that looks like a corgi. It's a party corgi that you can talk to. It helps listen to your problems and help you rubber duck your code and makes you a better developer. Check that out. I need to sell a lot of them because I have so many. Please get these corgis out of here. While you're looking at things on the Internet, please go and check out Daniel's Twitter. It is private, so, you can apply to follow Daniel on Twitter. And he'll do some filtering later on. We are talking specifically about -- Very rigorous. Rigorous screen. Please, with your Twitter follow, submit two forms of ID and references. [ Laughter ] Thank you very much for the sub, I really appreciate that. And, yeah, we're gonna be talking about Strapi today. So, drop the link in the chat for that. With that, I think, we can start writing some code. So, if I want to do that, what's my -- what's my step zero? What should I do first? Great. I would suggest going to docs and resources. Click docs and resources. Docs and resources. Here we are. Yeah, I wanted to show off our resource center. I think it's really pretty. S that really nice. I like it. It's good looking. Thank you. Yeah. So, there is sort of like a good place to start. And just like look at a bunch of really cool resources, change log and all that stuff. So, I was just going into the developer documentation. That's always where I start my projects. And we have the purple card for that. Purple card, here we go. Yep. All right. So, I -- I'm assuming I want to go to the quickstart guide? Very correct. All right. Quick start guide. Should we talk a little bit about what we're actually going to do today? So, we're gonna put together a site. What's our site for? What are we -- what are we talking about today? Is this a -- is this a blog? Is this a marketing site? Chat, weigh in if you've got something that you have been trying to learn that you want to -- that you want to see. Daniel, do you got any ideas of a good use case? Lots of wild ideas. I don't know if the scope is right, though. I would say a thought -- a sort of app. This is like, you know, the corgi rubber duck just like CRM for thoughts and -- CRM. Okay. All right. Yeah. Let's build a little -- yeah, a dashboard. We'll build a CRM dashboard for corgi thoughts. Yeah. All right. So, if we're gonna do that, I want -- am I just going straight through on the Gatsby blog? Or do we want a different setup here? Oh, no. So, at the top you see two tab there is where it says starters or hands-on. Starters give you pre-configured apps with a frontend and a backend for different use cases. We don't want that. So, you want to go hands-on. Okay. So, I'm in hands-on. I'm gonna run this quick start. Exactly that command. All right. So, I'm gonna call this one... Strapi-corgi-duck-crm. Yep. Need to trademark that. [Laughs] -- it's created a folder for us. It's installing dependencies now. Right. To do that for a bit, we are going to use the quick start flag. Usually it would ask us what database we want to use and you have to go in and set up or add the credentials for different databases. Okay. Yeah. So, we can just wait for the dependencies to install. So -- what did we choose by using quick start? Is it SQLite? Yeah. We chose SQLite. Great. Okay. That's a nice, temporary database on our local machine. Nice. There's not much setup to be honest. It's a really nice way to get up and running really quick. Yeah. SQLite is great for local Dev. It's a great way to get things just kind of proved out. It's a little -- it's a little trickier if we want to get this thing live. So, we probably won't deploy Strapi today. We can talk about how you would deploy Strapi today I think would be a good thing to cover. Let's see how far we get, right? If we've got plenty of time, maybe we'll just go ahead and deploy it. Yeah. So, that's actually something we see a lot. Once you get started in SQLite, how do we take this to production? Or if you want to use something like postgres. And we have this really cool workflow where you can work locally with SQLite and then deploy and sort of use the same content models on like a postgres database in like Heroku or Digital Ocean or other platforms. Cool. Let's see how that goes. It fired up the Dev server here and this popped open in my other browser so I just moved it over. And so, if I want to put in my information. Yes. All right. And then we'll put in a... A password. A really, really, really secure password. No one's ever gonna get that one. That one's really long. Come on. Okay. Fine. What we're gonna do... what? Oh, boy. We're playing this game, huh? So, upper case letter and more than eight -- You hackers! You dirty hackers! Okay. So, I'm in, I'll never remember that password now. So, we're in. And I'm looking at this is what I assume is the, like, the Strapi getting started dashboard experience. I see a few things going on. There's a create your first content. There's some videos. And I'm gonna ignore all of it because you're gonna help me -- today you are my onboarding wizard. No worries. That's exactly what I'm here for. I need to get a hat. I need to send you like the onboarding wizard hat so that when we do this -- [laughing] That would be epic. We need to do that. Okay. So, we are -- I think we're ready to roll here. We've got... what should we do next? We want to get some data in here, right? Yeah. But first we have to create a content type which is like, you know, a content model is have like a logical representation of the data that we want. So, yeah. Create a collection type. And -- Okay. What are we making again? A CRM? We are gonna make a corgi duck CRM. What are we storing in the CRM? I like to have logical thoughts around this. So, maybe what we should do -- so, one of the best uses of a corgi duck, right, is to talk through your coding problems. I can grab my little corgi duck and say, hey, corgi duck, my code doesn't work. Let me explain this to you. Maybe we can keep track of developers and the problems they have explained to the corgi duck and whether or not those problems have been resolved. That's two data types. That should be okay, right? Problems and developers. That is perfect. Okay. I'll start by doing developers. And let's -- do I need to do any of the advanced settings? No. That's fine. But we can look at them if you want to. Lets open them up, let's poke. We have a draft/publish system. I can work on something and save it without necessarily taking it live. Yeah. Content type and table name, we don't care about that. Localization. Localization is very cool, we don't have time to do that today. So, we'll leave that off for now. I'm going to continue. This part is nice and intuitive. So, let's think about this a little bit. So, for a title like somebody's name, I am going to say we do want that. We want the developer's name. And short text. It says names right there. Let's save that. Now, I'm not done yet. So, I want to add another field. And let's see... what else do we need in here? I don't know if we need too much more. Maybe we can -- maybe we can just add -- I think we just need a name for now. You want to go with just the name? Okay. Let me -- we have just the name. Got developer's name. And we save? Yes, let's save. All right. Uh-oh. What don't you like? Oh, yeah. See, that's the thing. This happens every time I'm live. I feel like it's a me problem. Just like refresh your browser tab. Okay. Refreshing. And it did the -- okay. So, we have our developer's type. Now I'm going to create a new one, and we'll have problems. Okay. Yeah. And so, this one -- let's just -- we'll say you can... This is -- so, that will give you an error because of the spacing. Oh. So, just like problem? Yeah. So, it's like maybe problem name, I don't know, is that too verbose? We could call it problem description. Is that okay? Or no space is allowed for the name of the attribute? Yeah, no space. Problem description. Yes, problem description. Okay. Now I want to add another field because I want to connect these. I want -- each developer should be able to own many problems. Exactly. Maybe in a future version of this, we would have problems cross-mapped if people have the same problem. But I think for this one, let's just say that each -- even if it's a duplicate, developers have can multiple problems, but problems can only have one developer. Yeah. That's exactly it. I want to create the developer one. Go to the creation type down there and we'll be able to do that really well. Before we do anything, we have the problems field. When we look at problems, what do we want that field to be called? So, I think we can name that developer so that it attributes that to a developer. And then on your right side -- it's right for you also, right? Okay. Yeah. Okay. We have developers. That's right. We have to name this field now. And -- but we sort of have to define the relationship first. And this follows like usual web mail-type relationships or database relationships. Got it. So, with this one, there is no cross-reference. Like, it would just be a problem has a developer, but developers don't need to be aware of problems. Here... has and belongs to one. So, they would cross-reference. But each developer could only have one problem and we all know that's a lie. Yep. Problem belongs to many developers, while true, is not what we're looking for today. A developer has many problems. Truer words have never been spoken. We're just gonna go ahead and screenshot that one. Yeah. And so, we could be -- a problem has and belongs to many. Or a problem could be tied to many developers. But I think developer has many problems is both philosophically and practically what we're trying to accomplish today. Absolutely. I couldn't agree more. So, I'm gonna finish that. And then let's save it. Yep. Okay. It's restarting. There it goes. And so, now we've got problem description and a developer. But then if we go to developer, we should see problem as well, right? Yep. Name, problems. Got 99 problems, but my Strapi schema ain't one. Not at all. One of these days I'm gonna make a joke so bad that my guest just quits. [ Laughter ] I doubt that. I feel like I would give you like a sub just for that. That's what I feel like. Okay. So, now we've got -- we've got developers, we've got problems. And so, we can start creating some of these, I think. So, let's -- I'm just going over to the left-hand side. I can see my things now. So, I'm gonna go in and create a developer. And first one's gonna be me. All right. So, and so, I saved this, but it's a draft. So, if I actually wanted this to be live, I need to publish it, right? Exactly. And you can turn that off in the advanced settings like we saw earlier. Okay. Then let's add another one. All right. So, now you and I, both developers, both in the system. Let's start adding problems. So, for my problems... What problems do you have? This is like developer therapy. So, there's one. And then for my developer, I'm gonna choose me. And let's save it. All right. And then I want to create another one for me. And I'm gonna say, I have so many. It's hard to choose. I can't get this silly thing to do the thing. That's a thing that I've said many times. So, let's -- that'll be one of my problems. And then let's add one for you. So, what's -- what's code problem that you want to tell to the duck? I want to tell the duck that most times my code only works on my machine. That's a good one. All right. So, let's save that. Do you have any others? Or do you think this is good enough to start? I think I have one more. This is like so much to learn. That's like problem. Okay. Publish that. All right. So, now we've got two developers, we've got four problems and if I go back into developers and look at one of these, we can see our problems here. Now, this is something that I would love to fix. How -- what if I want that to display a little more like human-readably? This is showing me IDs. Could I choose a different field to show? You could. I know how to do this, I know how to do this. Go to your collections type builder. Content-types builder. No, I think that's right. Oh, I was in the right thing? You were in the right thing. Either way, it's configure the view. Configure the view. And then there should be -- yes, exactly. You know what it is? I use richtext which is gonna break us here. Oh! You can change that. Oh, should we change it? We can. I've barely used any of the setup. So, let's go into content types builder. We'll go into problems. Nope. Not that one. Let's go to problems, here. And then I can just change this to be a... Can you? I was just gonna create another one and then delete that. Oh, that's okay. We don't need to worry about that. We can let that be. All right. Now we've got developers, we've got problems. And I mean, I feel like, oh, and we have one more thing we need to do. And that's whether telling the problem to the duck solved the problem. We need to add a Boolean field. Let's get into our problems. And let's add another field. And I want a... Boolean. Yeah. We'll say solved. And I want a default value of false. And we want this to be required. Look at that. Okay. So, now we have whether or not the problem is solved. And on these ones, the problem is definitely not solved yet. Right? Sob with these should all be set as unsolved. Oh, but you know what? I bet now if we go in here... we could -- We could change... We could reconfigure the view and show me whether or not that -- oh, nope. True and false also don't work. That's okay. That's all good. That went so fast. We've -- I mean, in the span of -- We have done so much. In a solid 15 minutes of effort here, we put together a new Strapi instance. We were able to go in and configure a relational database. We were able to, you know, modify our schema a little bit. Get some data entry done. And it's all done in a way that, you know, kind of makes sense to me. So, if I click in here and I look at my problems, I can see like, hey, here's a problem. Here's who owns it. This is all pretty good. And then I can -- oh, wait, we need to change that one from off/on to like true/false. So, let's edit the fields. Yeah. Go in here. Could you? I don't think you can. I feel like that's a Strapi thing. Oh, okay. Which I have been very adamant about on and off is a bit confusing for Boolean value. And I feel like I just need to open a PR and fix it. [Laughs] -- yes. Eddy Sims, thank you for ordering a corgi duck. I hope it solves all your problem. I need a web hook to show whenever a corgi duck is purchase sod we can have a celebration on the show whenever it happens. A million things to build, and no time. Someday, someday. Okay. So, now that we've got -- hopefully. Yeah, please hopefully soon. But, yeah, we've got developers, we've got problems. And now we can start kind of interacting with this. So, it feels like there's a few ways that we could go here. If I want to access this data to start -- well, two things. I'm gonna want to manipulate it because I want to click a button and change the solve status. But also, if I want to show the dashboard, maybe latest questions or something like that. How do we start to -- what's our next step if we want to do that? So, what we need to do now is sort of set permissions for what type of access that end users have to the API. You mentioned you, one, want to make requests and see that data. And read that data. You want to make changes, do you want to create? Or do you want to update? What we need to do now is get to settings and tweak those end user permissions. Go into settings... and -- Yes, bottom left. And roles. Roles. Yes. So, public -- because I think this is a public site. We don't need to authenticate. I think so. We can show a feed of the latest questions. Yeah. Let's do that. Yeah. This is the public, generally anyone goes to URL/that endpoint, these are the sort of provisions that I was giving it. And what I like to do here is just click any box under any of the collection types. So, let's say find. And then you see on your right, the route that's related to that plus the type of request you have been making. Wow! Okay. So, I want to find problems. Yeah. That's cool. Okay. Yeah. And if they create problems, they could post. We don't want someone to do that. Let look up a single problem. And the problem ID. Maybe find one developer and find all of their problems. All right. This is cool. I'm into it. And it looks like a bunch of other stuff that we could do that we probably don't have a lot of time to get into today. Yeah, exactly. But this puts us in pretty solid shape today, I think. Make this a little bit bigger so the text doesn't wrap on me. So, if I save this then, what I should be able to do, if I understand correctly, is I should be able to go to -- whoops. I should be able to go to what? Just local host 1337 -- Exactly. You. Okay. So, let's do that. So, I'm going to go to /developers. There we go. And I want to look up a single developer. Let's look up Daniel. And now we've got -- And my IDs too. Yep, Daniel. And here's a list of problems. And these are the ones linked specifically to Daniel. And same thing for problems because we added that. If I can spell it. Problems, good. And then let's set like one problem here. And it shows us the problem. Shows us who the developer is. We get, you know, my name, whether or not it's solved, although this one says null. Probably because we created that before we did the required field. But we can fix that really fast. And can I change all of them at once? No, that would have been cool, though. Not just yet. Not solved. So, we're gonna save that one. Not solved. And then... say not solved here either. And... There we go. Cool. All right. And then this one, actually, we can say, I need a place to share my problems. And that one's gonna go to me. And this one is solved because we have a corgi duck. Yes. So, then, if I get back out here and look at my -- at my problems, we can see now it's solved, false. I have way too many corgi ducks. That one's not solved. Can't get it to work, right? Oh, I think I forgot to actually publish that problem. That one's drafted. Oh, yeah, still a draft. There it is. I need a place to solve my problems. This one is solved. There we go. We made an API. That happened faster than I expected. I hear that a lot. But, yeah, it's something a lot of people really like about Strapi. In terms of building MVPs really quick. Absolutely. Oh, we got into like a planning meeting and then we just sort of opened up Strapi and started putting a bunch of fields together and at the end of the meeting, we had this MVP all right. And we were like, what? Yeah. There's a question in chat about doing this with GraphQL. Sounds like there's a plugin. If we wanted to show that, what's the process of adding that? Right. So, we have a marketplace under general in your left menu. Okay. Here it is. And we could either... oooo... that's new. Yeah. So, we could either just press download and that would install the plugin, or we could use the CLI. I like to use the CLI because I get to see doing everything, like installing and rebuilding the admin and then, yeah. Okay. Let's -- so, let's do that one with this documentation thing because I'm also pretty curious about this. Because open API docs are really cool. And very, very powerful. So, let's see. Installing GraphQL. Yeah. Still going. It will take some time. We have a v4 coming out. And GraphQL will sort of be default. Oh, nice. That's something a lot of people will enjoy. Or not default, really, installed by default. You won't have to -- Oh, I gotcha. Yeah. So, I mean, what I -- but what I like about this is, you know, we clicked a button, but then we know what's happening because we can kind of see here that things are being changed. It's getting inserted into the package JSON. So, we would actually be able to track that. It's pretty slick to be able to do that. Yes. So, we will -- and my computer's about to take off. I can feel it trying to escape. It's trying to hover. Yeah. I think because we used like the marketplace to install GraphQL, we could use the CLI to install the documentation plugin. Oh, wait, here we go. Restarted. Yep. Here we go... Is it still loading? There it is. There it is. There we go. So now we have -- It's installed. It's already installed. So, what should I do now? If you want to use this, you should go to localhost 1337/graphQL and then we'll get like the GraphQL playground. And we can start messing around with GraphQL operations. Beauty. Okay. So, let's write a query and we'll get developers. And I'm using control space to autocomplete here. So, let's get a name. And... problems. And let's get the problem description. This is always -- Look at that. I always marvel at GraphQL. It's so nice, so fast. And then we can pull whether or not it's solved. Yeah. Excellent. So, I mean, this is great. It's so nice. We clicked one button, got it to work. Next I want to add this documentation plugin. But let's use the CLI for that. Do I need to stop the server to do that? Yes, you do. Okay. And then you have to see, you have to like get into that -- What did I call this? Strapi something? There we go. All right. Yeah. There we go. And now you should use -- what are you using, npm? Yes. Or Yarn? Yes. So, npm run Strapi install documentation. Nice. Oh, I've never had someone use Hasura and Strapi on the same database. That's pretty cool. That's a cool idea. Hasura, if you're not familiar with it, has got some good episodes on Hasura. You should check these out. They're a lot of fun. So, here's one with Vue. Here's one -- this is Tanmai, one of the creators of Hasura. And here's one with Christian Nwamba. And all of these are super-fun. There's a lot of -- a lot of cool information in here. I'm a big fan of Hasura. I think it's great. Let's get this into the chat. So, y'all can play with it. I'll make sure these show up in the show notes as well. And while we're doing that, we're rebuilding the admin UI. Yeah. I know there's no search to be put on the website. We built -- we built a whole thing in this episode -- where is it? Where is Sarah? Here it is. Sarah taught me to build this and it was amazing. And it's sitting on a branch. I have a compatibility problem. My site is build on all of the ESM. And the Algolia stuff will work with ESM. And there's fixes to do it, but someday, look how cool this is. It would be amazing if I could make this work. Because we would be able to go, Hasura. Hey, look at all of these Hasura things. But I am definitely not there yet. So, yeah. Eventually this will be part of the site experience. We're not quite there yet. In the meantime, if you want to go search for stuff on Learn with Jason, you can do it on that episode's demo. Building that must have been so fun. It was amazing -- Sarah is a great teacher. Algolia is a great tool. And it was surprisingly approachable. Like, I feel like you like autocomplete in general. But then search indexing and stuff like that, it's -- it's a lot. And the indexing part took like one click. It was -- it was amazing. But, okay. So, we've got documentation installed. And if I want to restart -- can you remind me of the command? Was it Dev? Develop? It is develop. So, npm run develop. All right. Here we go. Yeah! There we go. Getting back into it. So, we've got our site here. And then if I want to look at the documentation, where does one find such things? So, you should have your documentation under plugins. So, just like refresh your -- I don't know -- did you? I thought I did. Let me see. Here it is. Documentation. Oh, and now there's a -- now there's a thing. Okay. So, I just needed to refresh the page. Yep. Uh-oh. Uh-oh. Do we remember the password? I remembered! Nice. Okay. So, this token, I want to open the documentation. And -- The UI. And this is all generated. Like Open API, swagger docs. So, I click in here. We can see all of the pieces. So, let's look at developers. And now I can see what all of the query parameters are. And we can -- like, we can straight test all this, can't we? Yep. Not in here, but I mean, we can put it in to the browser tab and do it. Right. I mean, this is -- yeah. So, try it out. I can just go in here and like just try one of these. Which I will put nothing in it and then I will execute and then you get a response that's got all of your things. Swagger is dope. If you have never used it, the open API spec makes REST APIs predictable in a way that you can automatically generate documentation like this. And I love to see that Strapi is using that so that I don't have to write documentation. I can just hand this over to my team and say, hey, look. If you want to know what a thing is. I wouldn't have known they needed to go and put all of these features in there. I didn't know I generated them. But Strapi sure did. And can document those properly so that my code is useful to people. it does generate a lot. You get a lot out of your first few interactions with Strapi. You can add way more. This is, again, speaking to the flexibility end and customization. Yeah. And I mean, it's -- like, it's also very cool because we can see here as well. But it's letting us choose like Dev staging and prod. So, that if we -- once we have taken this live, I could choose like, oh, I want to test this on my local server. And then switch it over and try it on the stating server or the prod server to make sure that, oh, did I keep API compatibility? Et cetera, et cetera? Those sorts of things are really nice and making sure that we are providing a nice, clean experience for the rest of our team. We're not jerking people around. Shipping surprises. Like, that's... not having to do that manually is very nice. Like, having a tool that lets you sort of make these checks part of the process is pretty wonderful. We had a session a couple weeks ago, actually, with Postman and we talked a lot about the collaboration and versioning that this specific plugin enables. I thought that was pretty cool. Yeah. I will try to look for that and share it. Excellent. Yeah. Okay. So, we've got -- we've got ourselves an API. We've got that API documented with Swagger. We've got a GraphQL version of that that's self-documenting. I think the only thing that's left to do now is actually use this thing to build something, huh? Let's do it. Anything else you want to show off in here? Any settings we should mess with before we start? I think the provider system is pretty cool. If you go to settings. Settings... On your authenticated route, you can sort of register users in Strapi. And if you look at providers, yep. Right there. Under -- Oh! So, we have all these providers that we can sort of add to register users in Strapi and use that user information to access authenticated routes. If we wanted to make a SaaS version of our rubber ducky CRM, you could set up GitHub and Auth0. And GitHub, you authenticate with GitHub. Strapi stores that in the database. And after you authenticate, you have access to other problems. And you can see what problems developers are solving and what problems are not solved. Yeah. I mean, like this is -- this is super-cool because it's -- like it's kind of nice to do this. So, I wonder, chat, what's more interesting you? Do you want to see a frontend get built with the Strapi data? Or do you want to see us do a little bit more with the Strapi config itself? Like, we could potentially attempt to go and configure GitHub auth. Or we could get in here and look at configuring so that only certain users could change data. We could grant an admin role for actually submitting new users via API. Just holler at what you want to see. Because we can also build a frontend. And building a frontend is always fun. Yeah. Config sounds great. Any other takers? Do it all! Okay. More config. I think more config is probably, you know, we've got plenty of episodes of this show where we build things based on APIs. So, let's figure out how to config these APIs. Yeah, let's do it. Where do you want to start? Do you want to start with configuring a GitHub auth? Or do you want to start with controlling access to the APIs? I think let's start with controlling access to the APIs. It gives a really good introduction to the whole idea of what you can access and what you can't and then builds up the use case for auth. Okay. Yes. Let's see here. We've got authenticated. That seems like one we would like to have extra permissions. And for this one, we would them to be able to do everything. Maybe they can't delete stuff. Like, this is a -- you can change data, but you can't delete data, right? Yeah. Yeah. That seems like a good -- that seems like a good thing to do. Anything else that we want to mess with in here? No. There's the email provider, I don't think we want to mess with anything. So, this is like tweaking the internal stuff. I think we can sort of like leave that so we don't break anything. Okay. So, now we've got a -- an authenticated user. But we don't have any users yet. Oh, I do have a user. Look at me. That's an admin user. This is a common thing that a lot of people have. And it's something that we are trying to address because we think it's super-confusing. You have people who use the admin, which is like the backend. And this is -- this role is sort of like, what access do you have for operations in this admin panel that we're playing around with now? But if we go under user and permissions plugin, then we sort of have the end user roles. Where it's like, people are making requests to our API. What -- what -- what permissions do they have? Got it. That's sort of where we do it. And so, to manage end users, we have a users collection type at the top there. Okay, okay. And that's where we have to add images. Okay. Does this have the same restrictions? I'll just use the same password so that I don't forget. And we'll just mark me as confirmed. I'm not blocked. Let me write that one more time. You see there? You could have a role. Ah. So, I want to be an authenticated user. Okay. So, I'm gonna save. All right. I have a user now. And if I... actually how would I even test this? What's the path for testing it? So, I use Hoppscotch. I don't know what's your preferred API testing service. I have -- source API. I've never tried this one. This one's my current favorite. Let's try it. Let's do that. So, we have a special endpoint. I think we have to go to settings and turn proxy off. Let me just open up mine also and see how I did it last time. Oh, no, not here, sorry, in Hoppscotch. Oh, in Hoppscotch. Yeah. We go to settings. And... At the bottom, there should be like a proxy. Yeah. That should work. Let's... proxy disabled. Okay. No. That's good. Let's not touch anything. Perfect. Okay. So, go to -- go back to the home. Yes. There we go. And change your method to a post request. Okay. And then I -- And then our URL -- yeah. It should be localhost 1337. Nope. Nope, nope. We have a special endpoint. So, I think let's like walk through the -- the authentication flow first of all. Ah, gotcha. Yeah. Yeah. So, like what this looks like is we're sending details, user details. The user you just made, right? You had a username, you had a password. What we're doing is we're sending a post request to an endpoint with the username and password as sort of like header data. Okay. And then if that's validated in the Strapi API, what we do is we get back a JSON web token. Ah-ha. Gotcha. And then that's what we can use to make like a normal get request with the jot as a header. Okay. So, do I hit like -- is it login? Is it auth? What's the endpoint for this user? It's auth/local. Local. Okay. And then down here... am I? Do a request body. Okay. In JSON. Application, JSON. Row input, rather. Let's just use row input. And open it up, exactly. And then we have identifier. And that should be your password. Okay. Nobody write down this password. This is -- Sorry, that's wrong. It should be your email. Okay. My bad, yeah. Okay. And then is it -- Yeah, then comma and then another. And then this should be password and that should be your password. Okay. Everybody's gonna go hack everything. I'm in. Yeah, I know. [Laughs] That's it? We can send it? Yep. Let's send it. Ta-da! Okay. And so, here -- There! Is our web token. So, if I go and I just like copy that. Yeah, let's copy that. Copied. Okay. So, then... And now we can sort of like open another tab if you want to keep track of this. Someone wants you to paste it in there. Open another tab on Hoppscotch. Okay. And for this one, we're gonna do like developer -- actually, I'm gonna go look at my settings again so that I can actually see these things. I'm going to authenticate, and then for developer, if I want to create one. We do post to developers. And then look at my Swagger docs to see what post developers needs. And it needs name and problems. So, we don't need the -- we can probably leave out almost all of that, right? I can just put in name? Yep. No, actually. I think because we have that relation, we might get an error if we leave that out. But let's try it. I haven't used the REST API in a while. All right. Let's see what happens if we send it in and then I need to send in a header. And that header is going to be authorization, right? And then is this one of those like bearer, like that? Yep. Okay. So, let's give this a shot. And it says? Boom! Done! Dave, you got problems? And if we go in and look at our -- oh, wait. Here we go. Developers. There it is! There's Dave! Very cool. There is Dave. So, I mean, that's -- that's great. Now, if I try this without the header... so, uncheck that. It should work because I think you still have -- oh, no, we didn't give permission -- It shouldn't, yeah. Exactly. Let's try it without header. Forbidden. Let's see what happens without the hacker. Or without the header. Not. Get out of here. There we go. Perfect. So, it does what we want. You need that bearer token or else you can't enter things into the database. But we can if we switch to over a get request, we can without the header we can go and get a list of developers and problems. All the developers, yes. That's what we want. We're kind of thinking this as like a -- yeah, Dave has no problems. He's got the password now. He's fine. He made it. Dave. But, yeah. Okay. So, now we've got authentication here when we know that if we want to actually do this auth, there's a flow for that so we would have somebody enter their username and password into a form. We would submit that form to this endpoint and that would send back a JSON web token that we can then use for making requests. Yes. All right. I'm feeling pretty good about that. Can we take this -- what would be the easiest way to make an authenticated request in a serverless function? I think we could -- I mean, if we stored that JSON web token in a cookie, we can just pull that right out of the cookie in the web token -- or in the serverless function. Submit it as a header, submit it as whatever -- yeah, you would need to be logged in. I guess if you wanted to, you could like also pass in the username and password, but that's probably not a -- I don't know if that's the way I would go about that. Yeah, you would want a login flow and then from your login flow, you would -- you would send that token with subsequent requests. Okay. So, what if we want to take this a step further and do GitHub? Go back in here and start looking. Good question. We would need to go to GitHub. First, let's look at what we need from GitHub. Look at providers. The thing with providers, is these usually work really well with a -- how do I describe this? You have like a frontend, right? Oh. You're frozen. This question broke Daniel. Okay. So, we'll wait for Daniel to get back. I think he's having connection issues. And while we're waiting for that, I'm going to -- uh-oh. He's gone, gone! He'll join soon. Probably. Here he is. He's coming back. He's coming back. Ah! There you are. My Internet has been doing this for like the longest time today. Yeah. Sorry about that. It just keeps dropping me off. No worries. We got some -- yeah. We got some jokes out of it, you know? Okay. So, you were saying that GitHub, this auth works with a client-side app. Do I need to set up a quick client side app? Yeah. What I'll do is you have like a client side app with the most basic implementation I've seen is like one button that says like, you know, login. And then that takes us to the GitHub URL and then, you know, all of that. So, that sort of thing. The flow get. Okay. Let's see how far we can get. We've got about 20 minutes to do this. We're gonna jump in here and say auth frontend. I'll get init. And we're going it create an index.HTML. And let's just open this up and we'll make a real quick index.HTML page. So, we've got this. I'm going to use the autocomplete. Are you gonna do the thing? There it is. And now I can say... log into Strapi with GitHub. That's our goal. Right? Take that. Yep. Copy it right down here. And we're gonna have a button. And that button says, log in with GitHub. All right. So, this is the -- the very basics of what we've got here. And if I just run like Netlify Dev, we should get a local server that will let us do that. And then as we add serverless functions, that will -- come on. There you go. So, here's our -- here's our site. Currently doesn't do anything. We click that button, nothing happens. Yes. So, to wire this up, what do I need to do? Right. So, we need to create an app in GitHub. So, yeah. You might have to show us your API secrets. Let's do this -- I will pull the API secrets off screen. Let's go into -- I think it's -- is it a GitHub app or an OAuth app? Do you remember? I think for this particular one, I'm not too sure, actually. It should be a GitHub. An OAuth app. OAuth? Yeah. Okay. Let's do an OAuth app. Yeah. Okay. So, we're gonna call this one Strapi off. And this one's gonna be at 8888. And the callback URL is the one they were showing us in here. Yep. There. So, let's drop that in. That's the thing. We're currently local. I think we have to use something like ngrok. Oh. I'll just deploy it, then. This is the Strapi app. We will make calls to -- I think I've got my stuff in a bunch here. Oh, I see what you're saying. We need -- we need the -- the Strapi app to be publicly accessible? So, I might have to expose the port 1337 using something like -- what do we use? I use ngrok. There's one that I saw Online that was really nice. What is the specific tool called? Does anybody remember what the one is that lets you do a tunnel online? Like do I... could I hack it with Netlify Dev? Maybe. I'm not -- probably not gonna try to do that right now. Hold on. Something like it. Tunnel 2.dev, I think. I just did like a quick search. Tunnelto.dev. Expose your local web server to the Internet. Featured on product -- okay. Let's see, can I... installing... I swear there was one that you could just drop in the name of it and you didn't have to do anything. Let's see. Install -- Naw, let's just do it. This is gonna be fun. See how long this takes. We may find ourselves out of time on this because we are -- we're at the -- we're at the 15-minute mark here. Oh, no! Well, someone said something in the chat. Npx -- oh. I had no idea ngrok had npx. Like an executable thing on npx. Okay. So, that is actually -- that installed way faster than I expected. So, let's try this. And we will do tunnelto... 1337. And we're gonna call this... Corgi doc. Server denied -- oh, I need an API key. Oh. Here we go. This is like, oh. No. It's like email. That's a lot now. It's all gonna be fine. We're gonna make this thing work. Let me get over here, tunnelto. All right. I'm -- I'm getting over here. Add a payment method? Oh, no. Yeah. That's exactly what I was scared of. Wait, I thought it would just -- Oh, yeah... What if I just don't use a subdomain and I just want it to be like... dang. Okay. Well, that one's not gonna work. All right. So, we might not be able to do this because we don't have time to deploy this and I don't want to spend the rest of the time trying to dive in and debug local tunneling since I didn't do any ahead work to figure out what a good way to do that would be. But let's -- you're installing anyway, why not use ngrok? Let's try one more. Try ngrok. Why do I have to sign in? Netlify to the Strapi API, I don't think that's gonna work. But I can try it. Port 1337... What's that? So, that's the Netlify Dev server. But what is the -- did it do a -- oh, wait. That's the wrong one. Oh, crap. What's the command? It is Netlify Dev help. What am I looking for? Target port. Oh, I didn't know about this. This looks cool. No command specified. Come on. Can I just have a no op? No, I want you to... oh, come on. See, this is -- this is what I was worried about. It will work. But we have just broken framework detection. And so, it starts -- it starts trying to figure things out and doesn't realize that we're just trying to force break it. Set the framework option to... listen to me. There is no framework option in here, of course. Which means that we would need -- yeah, this is gonna -- like, we could get there. We absolutely could get there. I'm probably not going to do it in the next 5 minutes. And that would mean that we would have no time to actually do this once we got it running. So, I think we're gonna let this one go. Yeah. No worries. So, instead, why don't we -- that's -- but this honestly is a good -- is a good -- take a note for the future. Because this could be a great thing to dig into later. How do you do local development, right? Like, there might be a follow-up episode on this, maybe there's a tutorial that could be again. But getting that local Dev environment set up with a good tunneling solution for the backend. Because the nice thing that we get if we have this site built up, which I don't have -- I don't want to create a site to do it. But if we jump into one, like the one we did -- what's one of these that's fresh? Do the autocomplete one, I think. Where is that autocomplete one? One of these is fresh. Like, what did I do yesterday? Completely lost track -- There's a -- JavaScript autocomplete. The realtime one. With this one, the way that it's set up, if I run Netlify Dev public, it will open the localhost. But then it will also show us a... wait. Where did it go? Listening, Dev server, use host to expose? All right. So, this always works until I'm trying to figure out how to show it off. And then I like don't use this enough to remember what the pieces are. It's Netlify Dev live. Creating a live tunnel. That's what it was. It's not public, it's live. Check this out. So, now we have a live version of the local instance running so that we can do checks like that. So, it's pretty slick. It's very nice to use on the frontend. If I had something like ngrok actually installed and configured, we could do it for the backend. But we're not there today. And chances are we're not going get there in the next few minutes. Instead of that, let's do this. For somebody trying to take next steps from here. Let's recap, right? What we were able to do today is we jumped in. We were able to set up the schema for developers and problems. Right? We got these configured -- The relation. Got the relationship set up between our developers and our problems. And then we were able to do data entry really quickly and we can see here the relationships that happen where we're able to add our problems and on the problems side, we can see who our developers are. And then we were able to do permissions. So, we can go into the roles. We've got our public, and we can see that if you're not logged in, you can only look up. You can't -- you can't create, you can't update, you can't delete. But if you're authenticated, an authenticated user can do everything except delete. And only the super-admin, which is me, who is logged in right now, can actually delete things. That would be a way to kind of lock down permissions incrementally where you don't let destructive actions happen in case somebody loses their database key. We were able to do that in a way with Swagger documentation. We have the whole REST API through swagger docs, it's available through a GraphQL API and we have it available through straight up REST API. We have all that data. We were able to do that whole thing in 30-ish minutes. So, that's pretty slick like how quickly we were able to do that. So, for somebody who wants to take next steps and they want to go further with this, where would you recommend they go? Well, it depends. I see someone shared a link to the deployment guide, of course. You would want to deploy Strapi somewhere. And we've got some pretty explicit guides on how to do that. I would suggest going to our documentation. It's -- yeah. Exactly. This site. The site that's on your screen. It's got a lot of really cool resources for set up and like extending Strapi. Like using more advanced functionality. I would also send you over to our YouTube. We've got some really cool videos on a bunch of different topics. And our blog has got some amazing content too. Ope! Righty. So, there's -- there's the YouTube. And then the Strapi blog is gonna be over here, I think. Yep. Where am I looking for this? On your left. It's in the resource center. Oh, there. On the left tab. Yep. So, here if you want to check out the blog. Lots of information in there as well. All righty. Yeah. So, that is -- I mean, just a ton of information. A lot of flexibility here. And all of this is open source as well. So, if we go and look at open source, we can also see, you know, this is -- here's all the stuff. You can go and poke at it. See how it works under the hood. Yep. If you saw anything that you want to change, like that Boolean flag that Daniel and I were talking about. You can go and open a PR for that right now. That's really -- that's pretty powerful stuff. I think that's really cool. Whoo! Yeah, it's really cool. We have this big v4 release coming out. So, if you want to keep track of that also, you can have a look at the commits on like the branch. Different branches on the main Strapi repo. We actually had a release today. Oh, nice. So, yeah. Here's v4. Yeah. If you have a good look of that, actually, go to Strapi.io/v4. There you go. Yeah. Looks like that's been dropped in the chat. But I'll drop it again for posterity. There's a waiting list, RFCs that explain what's happening. General overview. Love a good teaser. And, oh, video -- this looks great. I like it. The video is really cool. Well, cool. So, this -- A lot going on. Yeah. This is exciting. Is this later this year? Or what's the plan for? Yep. Nice. Very, very exciting stuff. Like we have an alpha, but don't tell anyone, that's out somewhere. We're just testing that. And we have a beta coming out early in September. But we should be stable in -- there is an engineer from my team that is there, Derek. Because I just -- End of September, he's saying. Yeah, so, like early October we should have like the first stable -- yeah. End of September. So, like, early October. This should be out. And it's gonna change so much. I mean, like a lot of what we've done was like really cool. But we're sort of like patching up a lot of the things around how we do certain things. Lots of performance improvements. A huge visual overhaul. Just making everything a lot more intuitive. Making things a bit more accessible, at least, you know -- Nice. Getting there in terms of accessibility also. There is so much. I'm actually pretty excited for this, yeah. That's -- that's excellent. Well, cool. Let's -- I think let's call that a great stopping point. If you're interested in Strapi, hit all of these things, lots of resources. All in the show notes. And make sure -- go buy one of these corgi toys so I don't have so many around. Tell it all your problems. That is as good a place as any to send a little shoutout to Amanda from White Coat Captioning who has been giving us captions all day, thank you for sticking around. That's made possible through our sponsors, Netlify, Fauna, Hasura and Auth0, making the show more accessible. Check out the show. We have a lot of fun stuff. Tomorrow we have Moriel on, right to left support. And then Ahmad Awais talking about Node CLIs, Pachi coming on to talk about CSS, ADO coming back. Look at this list. We have so much amazing stuff coming on the show after the rest of this year. Where's Tim? We're missing Tim. But I'm like just completely thrilled with all the amazing things that are coming on the show. So, make sure you go and take a look at the schedule. And definitely, definitely click this add on Google Calendar button so that you can see when the new episodes are coming. It's just going put it on your Google Calendar. there's no notifications or anything. It's for you to never miss an episode. I want to hang out with you. I hope you want to hang out with me. Daniel, any parting words for anybody before we call this one done? Just because this is at the top of my head. I saw you had Battlesnake with Joe Nash. I'm not missing that. I understand what that is, but I really want to understand. I also have no idea what Battlesnake is. And I'm really excited to find out on that episode. I'm intentionally doing no research ahead of time. To the best of my understanding, it's a kind of -- you know that phone game snake from the old Nokias, it's a developer-centric version of that game. I have no idea how it works. I don't know how to program games. This might be an embarrassingly short episode where I'm like, I'm too far out of my depth. But we'll find out. But it will be fun. I am excited. There's a lot of really fun stuff coming in here that I'm really excited about. Mark your calendars, hang out. We'll see you over on Twitch. Hit that follow button and all those things. Follow Daniel on twitter as well and hope that he lets you through that gate. Yeah, no, I definitely will. Yeah, thanks so much. I don't know if I'm a great teacher or you're an amazing learner. The show is Learn with Jason. I think you're an amazing learner. It's been my honor. This has been so much fun. Chat, stick around, we're going find somebody to raid. And we will see you next time! Yep!","[(0, 0.42422488), (1, 0.06170734), (2, 0.51406777)]",0.42422488,0.06170734,0.51406777
"It’s December 2017, it’s where our story starts. I am unemployed and I make a grand declaration. I don’t want to be a developer anymore. A bunch of you have probably done the same. And so I run around to a bunch of product manager, project manager, success architect, customer success interviews, and none of them are hitting home.And so my confidence in this big decision gives way to slight desperation and I post this on Instagram asking my friends for help. What I’m holding in my hand there is a plate of homemade hummus, not “hummus,” hummus, which I had decided to make with my friends one night for fun, since I know how much dev rel folk love recipes. Here’s the recipe for homemade hummus. The trick here is to be really patient and let the chickpeas soak for a really long time.Anyway, this post gets me a Python interview, which isn’t what I wanted, but old habits die hard. And the interview was terrible, but that’s not the point. The point is what happened afterwards, which is that I bumped into my friend and her coworker who looks me up and down and says, “But you don’t look like a developer.” And I say, “I know.” And he says, “Well, I don’t know what you’re looking for, but my previous company is looking for a developer evangelist.” “Excuse me. What?”And I do my research, and in fact, this job description looks like it was written just for me, and I aggressively send my resume through every single connection I could find to the company. Much, much later, I found out that the guy I was seeing at the time swims daily with the President. Granted a swimming pool is not a great place to share a resume because it would get wet.A few days later, I meet my future boss. The next day, a Thursday, he sends me an email with a three-part assignment of which this is number two, create a video showing how you build an iOS app using Kaltura. Now, I read this and I read this again and I read it again and I panic because not only had I never touched mobile development, I was a backend engineer, I also had to create a video to capture how ignorant I was. But I was determined to do so by the end of the weekend because I was terrified somebody would beat me to my dream job.This is way before dev rel was a thing in Israel, so I just didn’t know anything about this space. Luckily for me, Tel Aviv is facing our worst storm of the season that weekend and so these beautiful beaches that you’ve probably heard about look a lot like this in preparation and I have nowhere to go this weekend except for my computer screen.And so picture this, it’s dark, it’s stormy. My Wi-Fi is down because of the storm. I’m sucking all of the life out of my hotspot in a rush to learn iOS development and create this video. By the end of the three days, my mobile provider blocks my data usage. But I have this really awkward video of myself showing off my new iOS skills, which I then send along to my future boss with my comments and criticism about the API, to which he eventually says, “Great, that’s your job now.”Fast forward, I am Kaltura’s first and only developer evangelist. And if you think that elevator pitch is hard, try doing it in Hebrew. It’s way harder.To tell you a little bit about what Kaltura does. What you need to know is that at its core, it’s an API with a bunch of video capabilities on top of which we build all of our video products. These are things like a private YouTube that we call MediaSpace, which is used mostly for internal corporate training, or some classroom tools for universities.And a little separately from the API, we have what we call our Player. Now, this is something you touch every day. You probably don’t really think about it. It’s the frame in which you watch videos. It’s got the play, pause button, seek bar, a bunch of other buttons. And that’s exactly what we’re going to be speaking about today.Now the Player at our company has its own elite team, their own open space, their own reputation. It’s built in native code, which means you can easily embed it into HTML or mobile apps. And that’s exactly what I was doing in my interview without really knowing the difference between using the Kaltura API and using a Kaltura Player because all of the API documentation was lumped into the same place.So I started my time at Kaltura working on the API portal, documentation, tutorials, moving everything into our new developer portal. And after a year of working on this, my boss turns to me and says, “Hey, remember that really awkward video with the short hair that you created for your interview?” “Yeah.” “It’s time.” Except he didn’t say like this. I just recently watched “Lion King” and it’s very fresh in my mind.So what would the Player documentation entail? Well, for starters, we had just released Player v7. We were trying to get people to use that instead of Player v2. Obviously, 7 comes after 2, but we have to maintain documentation for both. As I mentioned, the Player is native to Web, iOS, and Android, so we’d have to have all these three segments.And here’s the real kicker, all of the documentation was split in a hundred different places, all the existing documentation. And so, needless to say, I’m overwhelmed. We have this preliminary meeting with the Player team to tell them our plans to create this Player portal. And everyone’s really excited, but the Player team has a few issues.First of all, they want their own portal, their own domain. The Player is a standalone thing. There is no reason it should be lumped in with the API documentation, which is kind of what I was going to do. Secondly, if it’s your domain, how are we going to update it when there are changes?And thirdly, most of the Player customers were OTT customers. This is on-demand streaming like television, customers that have nothing to do with the API. And it makes no sense to send them to the API documentation when they have questions.And so we went around like this in circles, the Player team wanting their own stage, my boss wanting thorough documentation for our portal, and me just awkwardly trying to make everyone happy.And we agreed on this. I said, “Okay, fine, the Player will have its own portal,” but we would link to it from the developer portal that tab at the top. So when you click on that, you would end up at a Player homepage. All of the documentation for this would be in a GitHub repo that we all have access to so that I can make changes and you guys can make changes, and so that OTT could pull in any overlapping documentation without creating duplicates.And this argument obviously took much longer than I just described it. And something I want to say about this is, you know, we oftentime have this picture of how we want things to look. But in times like this one, it’s kind of blurry and nobody’s obviously right or wrong, It’s a lot more important to put effort into building those relationships and kind of being a little flexible than in getting the things that you want.And so we make this agreement and obviously, I have no clue where to start. And it would have made sense to start with Web, but I decided to start with iOS. Because when you’re lost, a good thing to do is to start with what you’re familiar with. And I was familiar with what it was like to be somebody who had no clue about Kaltura. I just want to get this Player into an iOS app. Just tell me how to get started.And so let’s talk about this Getting Started document. What does it actually mean? In my previous life, I was a backend developer for a mobile marketing attribution company, the dark side I know and my job entailed pretty much integrating hundreds of APIs into our platform. Which means that I had the misfortune of reading a lot of Getting Started docs, or even in worse cases, going looking for Getting Started docs.And let me tell you what I found out. A lot of people don’t understand the meaning of “started.” So, there’s this rule by this guy named Ori Pekelman. I don’t know if you’ve heard of him, I first read about him referenced by Nordic API articles. He’s a CEO and API expert, who apparently likes writing poetry in Hebrew and French, so I related to that on some level. And he coins this rule called the 333 rule.Some of you might have heard about this. It states that in the homepage of your API, it should take a developer three seconds to understand the purpose of your API and then find the entry point within 30 seconds. And within three minutes, they should be able to create an account, call the API, and do something with that result.Now I love this rule, I try to adhere to this rule. And I took it a little bit further with my Getting Started doc and I said the Getting Started doc should take you from negative 10 to 100. And when I say negative 10, I mean somebody, and we’ve heard this a bunch, somebody who knows nothing about your platform, they might not even be a developer, just somebody who wants to use your platform and wants to write some code. By the end of your doc, they should have everything they need in order to create a significant action against the API and do something with that.Ladies and gentlemen, your Getting Started page is your hook. I know your homepage is a lot prettier, it’s a lot more colorful, it’s more descriptive. That’s where people might end up. But those who want to do something, go straight to your Getting Started page. And I know this because I was there hundreds and hundreds of times.Now the problem with creating something this good is that you need to do a lot of research and a lot of learning. You want to give them the bare minimum that they need to know, but in order to do that, you can’t just know the bare minimum. You need to know all of the things in order to extract the important things.And so I researched and I wrote and I researched and I wrote. And eventually, I wrote this doc the way I would have liked it to be a year before that when I knew nothing about anything. And I present this to my boss, and he looks at me and he says, “No.” And he calls me out for not reaching 100%. And he’s right because the Player for mobile has one caveat, and that is that it has no UI.We state this explicitly, the Player has no UI, deal with it on your own. And so I was creating, I was demonstrating how to do play, pause features on the Player with buttons that look like this that are made of text and aren’t actually buttons, ending up with something that looks like this, which in my opinion, looks quite good, but my boss looks at it and says, “Really? What happened to your Getting Started philosophy?”And he was right because anyone using the Player, any developer using the Player would most likely need buttons on the Player. And so at the very least, they should receive basic instructions on how to create those buttons. And it’s so easy to say, “It’s not in our product. It’s not my responsibility, sorry, deal with it yourself. This isn’t our thing.”But those corners that we sometimes cut, out of apathy or laziness, that can be the last straw that makes somebody say, “I hate today, I hate your platform. I’m never coming back.”And so I’m feeling kind of sheepish and overwhelmed. And I’m running around trying to figure out how to add these buttons. And I’m writing code and I’m getting stuck. And I’m writing code and I’m getting stuck. And I’m asking the Player team, and the response I’m mostly getting is, “Sorry, but the Player has no UI. Maybe you should try Google. Have you heard of it?”And I desperately, you know, shout out to the heavens, “Is there anybody who can help me with these buttons?” Not quite so dramatically, but you get it. And someone says, “Yeah, have you heard of Leonid, he could probably help you.” And I don’t know who this person is. I’ve never heard of him. I don’t know where he sits. I sent him a message, he doesn’t answer.The situation is dire because it’s 4:00 pm on New Year’s Eve, and no, that doesn’t mean everyone’s on vacation. It means that the following morning, we’re scheduled to start the Kaltura hackathon, which we have on New Year’s because we don’t celebrate New Year’s. And nobody talks about work during hackathon, especially not developers. And the worst part is that I’m scheduled to leave to Thailand for a remote work trip for a month directly after the hackathon.And so any chance of getting help in person is totally lost on me. Luckily, redemption comes on day two of the hackathon when I’m using AirDrop and I see Leonid’s iPhone as one of the options and I run around looking for this ghost and I find him and he’s great, and he sends me the Player buttons and shows me how to use them. So if you ever looking for someone, try AirDrop.Anyway, I get to Thailand, I get settled in. I add these buttons to my player. I finished the Getting Started doc and then I show them to any technical person I could get my hands on in Thailand. Because, while a lot of times you’re doing the research and learning in order to create this doc, other times, we’re actually the experts on the matter, who are writing the docs.And we forget all of the steps that happened in between the steps that we mentioned. And we make assumptions about expertise, and background and, you know, etc., etc. And it’s natural, because we’re in that place. And so, when you’re doing something this important, ask an outsider to read the doc, read every word, do the steps, see where they end up, you’re going to find a lot of things that you missed this way.Now, while I really wanted to continue perfecting this doc, because I had nowhere I went to go, at this point, I had to just, you know, do what you do when you have no clue where to start, which is just take everything out, like everything out, list it all out. Marie Kondo, put it on the bed, on the table, anywhere you could see it, or in my case, a Google Doc.And I just brought in all of the docs that I could find that were relevant that were updated, and I put them in this doc and I was able to kind of see what I was working with. It became a lot less daunting. And then I was able to share them with the Player team, and we discuss what needs to be obliterated, what needs to be rewritten, and what order we want to see things in.And at this point, I had to start really asking for a lot of help to make these decisions about what gets rewritten, etc., etc. And the problem with asking for help in this case is that it was kind of my project and it wasn’t a priority for the developers. And despite the fact that I spent every day for two months just going up to the ninth floor, which is where the developers sit, and acquainting myself with them and showing that I care, and trying to build this relationship bringing treats, eventually, I started getting invited to lunch, which is a big deal.Still, when I would ask for help with the documents, I’d get a very sincere, “You know, I’d really love to help you, but I don’t have time right now.” And you might get this a lot and it’s frustrating and it’s annoying and how can they not understand how important this is? And honestly, I had to stop myself from making demands in the name of my boss. You should not do this. Okay? You shouldn’t do it to developers, you shouldn’t tell anyone, “Hey, this really important person has requested that you do this.” That is not how you build relationships. That is not how you gain respect.So what do you do? Well, one thing that really helped in this situation was the idea of delayed gratification. You know, this doesn’t seem important right now, but later, we won’t have to direct all developer questions to you, because we could just send them directly to this documentation that we’re writing right now.Another thing that really works is offering to work on it together, “Hey, can we take a few minutes and sit down and work on this? It’s really important to me.” And it shows that you care that you don’t want to just hand it off, you are invested in the success of this project. And a lot of times you’ll get, “Okay, fine, but I only have 10 minutes,” which really means 30, or they’ll say, “Yeah, but let me do it myself,” because that is the way some people prefer to work.And if that doesn’t work, bring on the flattery. And this isn’t just about kissing up. People need to feel, people want to feel needed, valuable, appreciated, not just developers, all people. This is what we feed on. We want to know that there are things that other people can’t accomplish without us. And so if you express to someone that you are working on this thing that you can’t do without them, they will most likely want to help you. At some point, just be patient, like with the chickpeas.If it’s not right now, it’s tomorrow, it’s the next day, especially if you’re showing your appreciation with treats. You think I’m kidding, but this goes a long way in showing effort and care, and so yes, I will be taking suggestions after this talk about which weird treats to bring back from America.And so, after I collected all of these docs, I, you know, brought them all to my machine. I did some skimming, some editing. And then we decided to go live with just iOS. My boss wanted to start sharing it, I wanted to be able to see some progress to make it easier to continue. And I make this pull request and the response I get from Jess, who is the master of our open source and developer resources is, “You didn’t use a spell checker?”Apparently, skimming these docs wasn’t good enough. These were docs written by Israelis. They’re absolutely brilliant Israelis. But we ended up with a lot of funny words like “situtation” and “distorying,” and my personal favorite, “expaline,” then a lot of sentences that made absolutely no sense. And we must have been in a real hurry to push this because it’s quite obvious, use the spellcheck, just do it. You would think this is obvious. So I tried one in command line. Eventually, I moved to this extension called Spell Right that I really like.And eventually, iOS was live and I repeated this whole process for Web. I wrote the Getting Started, I copied over the docs. I went to town on them with my Spell Right extension, and I proudly submitted my pull request and Jeff says, “I thought you were using a spellcheck. Why are you still not consistent about whether you want to capitalize the word API?”And at this point, I decided to stop being lazy and just read every single document that I was working with. Seriously, it would have saved me so much time in the get-go, instead of going back and forth with these PRs. Read every word.Yesterday, I almost got into some woman’s red Tesla instead of my red Uber. So check your car, check your docs, every word, guys. Because if there’s one message I could take from this entire talk, it’s this, be thorough. Be thorough in your research of what it takes to get started with your documentation.Be thorough in how you want to express your platform to outsiders, and coming off as considerate and inclusive to all backgrounds.And be thorough in understanding the people that you’re working with and cultivating those relationships with them in a way that, you know, you can ask for help later, and it won’t be an issue.And throughout all of this, you’ve heard this a few times, don’t forget to have fun with it. Because, yes, this is really technical, but users want to know that there is a human on the other side of all this information.And so we created this really silly video with the production team highlighting all of the Player features. I so wanted this to be ready on the home page by the time I saw you guys, but chocolate can’t solve everything. And so if you check back within a few weeks, the developer portal would be up there with all of the iOS, Android, and Web resources.Thank you so much. Big shout out to Simba for supporting me through this talk and, thank you.","[(0, 0.33607632), (1, 0.14997052), (2, 0.51395315)]",0.33607632,0.14997052,0.51395315
"Hello, everyone, and welcome to another episode of Learn With Jason. Today on the show, we're bringing back Brian Douglas. How are you doing, man? 
I'm doing fantastic. It's a new ‑‑ it's Tuesday, so we're starting a whole new month and everything. 
Yeah, I can't believe it's already March. It's been just ‑‑ it's been too much 2022 for two months. 
Yeah, stuff is happening, and it just won't stop, I guess. 
Who is ready for naps? Give me a ""Z"" in the chat if you're ready for a nap. 
[ Laughter ]
But, yeah, so for folx who aren't familiar with your work, do you want to give us just a little bit of a background on yourself? 
Yeah, yeah. Yeah, so, bdougie is what I go by on Twitch, bdougieYO and bdougieYO on Twitter as well. Brian Douglas is my given name. If you need to Google me, I've done well in the SEO there. My day job is I do dev rel at GitHub. My actual title is Director. We are focused on encouraging folx to use features that people have never used before. People like the API and soon to be packages and co‑spaces. I have a talk on Co‑pilot coming up. Looking forward to that. Will be my first dive into that. So all things GitHub. Also, I'm a big fan of open source. So I've been working on this project, like, mostly off and on, but now really on in the last, like, six month called Open Sauce. It's a path to your next open source contribution. We've developed a couple ‑‑ I say we because we have open source contributors, like 60‑plus that have been helping me contribute and make this project work. But really just focused around encouraging open source contributions but connecting folx to repos that are doing a good job. 
Nice nice. Yeah, and, I mean, I've loved watching the work you've been doing over there. The Open Sauce stuff is super fun. Between pizza emotes in the chat, you've definitely made an impression on the community, I think. It's always fun to kind of watch what you're cooking up. And so, I mean, open source is one of those things that I feel like once you're in it, it feels very different than before you're in it, and depending on what part of it you get into, it can also feel very different. So for somebody who's ‑‑ let's start with somebody who is brand‑new. What ‑‑ not what is open source. I think we can take for granted that open‑source software is software that anybody can use. It's got permissive licensing for that. 
But what is open source in terms of its impact on our industry and community? 
Yeah. It's a very hard thing to explain open source in general, but open source at its root is the code you can view. It's open source code, but there is also some other mantra around licensing or engagement or sort of best practices and ethics. But at the end of the day, like, open source is, like, people freely giving access to their code and also community as well. And the thing that I've ‑‑ my intro to open source came from I wanted to build a project. I found Ruby on Rails as a way to do it. I found a lot of the libraries I could instill in the Ruby gems were open source and installable and available for me to build the stuff I was trying to build. Ended up building that with very little programming experience. Then I've always had that same approach of, like, if I want to build something, I just Google or ‑‑ well, pretty much Google. Yeah, eventually you'll find a stack overflow or some sort of form, an answer for the question you're asking. 
And the benefit is, like, a lot of the ‑‑ your guests here, I ended up organically finding the guests on Learn With Jason. And watching the video. And watching how things are built in the open. So, yeah, the whole mantra of open source, I'm pretty fluid in what it really needs to mean, because as a person who had a non‑traditional background who just wanted to solve a problem and continue to solve problems, I enjoy how open folx are of sharing the sort of secret sauce or the secrets into programming and libraries and packages. 
Yeah. Yeah. And open source has had a ‑‑ I feel like everybody working in web dev probably has a how open source impacted my career story, right? 
Yeah. 
And I know for me, like, open source was a huge, pivotal part of how I got anywhere, honestly. I started out by, you know, I also have a non‑traditional background and I learned from people in, like, the W3 school's forum who were just willing to donate their time and send me some code snippets. And, you know, got the real kickstart to my career was when I discovered JQuery, an open‑source project. It unlocked the door which allowed me to build my agency. I did a lot of WordPress work in my agency. That's another open‑source project. It's kind of incredible if I look back through my progression in this industry how much of it fully relied on open source. 
And, you know, as I got further in my career, too, it shifted the other way where I started releasing open source. I started working on open source. And, you know, that opened all these, like you said, you end up meeting all these people in the community that we look up to and who are building these cool things. They're all in open source. And so you end up crossing paths. And you, you know, you kind of build a network this way. And that's a whole other thing, too, because, like, open source is, like, that's sort of your job. Like sort of. I mean, GitHub is a company that's heavily reliant on open source as a business thing. 
And so how has open source impacted, like, your career and even, like, the careers of people around you? It feels like this is a pretty ‑‑ a pretty big rocket booster in your circle. 
Oh, for sure. Yeah, I would say that for my career, like, my first really, really foray into open source where I was contributing back into the system was I was trying to build a quick integration for ‑‑ with web sockets for inviting folx to my Slack room or my Slack channel. This was, like, 2014‑ish, 2015. Don't remember the year, but this was also as Node was, like, had the split ioJS and regular Node. The next‑level features. It was sort of a split in the community. Mind you, I only just started doing Ruby. So that was my first job, Ruby on Rails. I started doing Node.js because I found it was easier to do web socket‑type interactions. From googling, I found the GitHub repo that solved my problem. A wraparound specifically for Slack web hooks. Something I knew nothing about at the time. I was in a framework mindset. Everything was given to me. Never had to look outside the framework. My reach‑out to the maintainer of that project is I didn't know how to get it to run. I went to his profile. Saw his email on his GitHub profile and emailed him. Not realizing GitHub issues. I didn't know GitHub issues was a thing. The company I used for, we didn't use issues, we used JIRA. That was the other reason why that existed. 
So I reached out to him. He actually responded back to me and said, hey, actually do this, this, and this, and mind you, it was Saturday, like, midnight, and he kept responding back to me super late. I stayed up until 4:00 a.m., solving this problem, getting it to work. I was like thanks so much. By the way, I'm about to head over to a K Pop concert in Thailand. He sent me an image of him at the concert eventually. Wow, this is amazing. Open source, not only can you get code, but you can also get free mentorship. 
Yeah. 
So that experience kind of set my entire career off. Where I was never shy around ‑‑ for asking questions. I learned how to use GitHub Issues. I stopped emailing maintainers directly. Please don't do that. Don't DM folx. Do it out in the open. The one thing I learned is when you ask questions in the open, people are more, like, they're more amenable to answer you because they know they can always point to that answer in the future. If you're DMing somebody, a lot of times it's hard to get into open source or find out the secret sauce, which is Open Sauce. If you don't got sauce, then you loss, is the quote that I have on my website. 
Yeah, basically the impact that I got was, like, it has taught me that I can just reach out. Folx are accessible. As long as you're providing value. So the value is ask a public question. Not on Twitter but, like, in an issue or in a forum where people would actually answer and point back to it, like, that's valuable. 
Yeah. 
So I spent a lot of time teaching a lot of my new contributors in the project I just built how to interact with a project, how to ask questions, how to stop DMing. I don't mind taking DMs up front to make people feel comfortable, but eventually I've got to teach you how to walk. So we're gonna walk into a public channel together, ask your question there, I'll tell you exactly what question to ask, I'll answer it in public, and now everybody who is watching is like, oh, I didn't know that. Let me take that information and better myself. 
Mm‑hmm. For sure. So you actually just kind of touched on something where, like, we're talking about the parts we love about open source. But there is the kind of negative connotations of open source where you've got people who are severely overworked. They're kind of just getting verbal abuse all over the place. They're getting pulled in all directions and kind of, you know, feature demands and that sort of thing. So how do you encourage people ‑‑ or, you know, you're talking about how do you ask a question? What are some things that you definitely don't want people to do in open source land or some etiquette that you feel is 101 for somebody who is going into open source? 
Yeah, what's the ‑‑ if you want a friend, you got to be a friend. And some etiquette is usually around just being a good participant in the space. So, like, a lot of times people reach out to me and, like, I'll tweet out good first issues for my project. And folx will respond and be like, hey, is this good for beginners? And usually the answer is yes. If it's a good first issue, my thing is I want to have an answer in the issue, otherwise it's not a good first issue. How are you gonna expect someone to solve this after a couple weekends? So as far as folx approaching open source, like, being friendly but also searching to see if the question's been asked, a lot of times people discount ‑‑ I don't know if we're moving away from stack overflow life. I don't think we are. But people discount, like, checking stack overflow for questions that they're gonna ask. One of the best things you can do is actually ask the question on stack overflow, take that link and drop it in the Slack or the Discord because you have a captive audience. You have people who have answers who want to also answer those questions, but they don't want to answer them in a synchronous fashion where everybody's like, oh, you know what? Turns out I can't write test in Vite. How do I write test in Vite? The answer is Vtest is the answer. One thing that I'm learning right now because my project is written in Vite right now. That was a thing we had to talk about over and over again. Now we have the answer we can link to in the conversation, in thread, in the issue. 
So a lot of times if ‑‑ like in Open Sauce, we get to go back and forth on questions and concerns and the future of the projects or the features and what would be cool. Eventually, we got to take that to the repo. Even, like, my day job, my whole thing is, like, if you want to make a decision, send an email or open an issue, but if you just want to have, like, a conversation, definitely take it to Slack or Discord. Figure out what the variables are synchronously or async, but eventually, like, let's make this record, like, put it somewhere where it's searchable. 
Sure. 
Otherwise, we're gonna have the same conversation next weekend. 
Yeah, I think some things I've noticed just as I've been doing more and more open source is, like, when somebody comes to me with a question, there are definitely questions that I'm more interested in answering than others. That's not necessarily due to the content of the question. A lot of times it's in the way the question is asked, right? So one of the things I'm always interested in is, like, building a good ‑‑ a good sense as open source citizens of just how to not be a jerk about the way you ask a question. And I'm very guilty of this. You know, when I was earlier on in my career, I would phrase things like, this should be simple. Why isn't this working? And, you know, as the person who wrote the code that's not working and apparently is not simple, my immediate gut reaction is, okay, write something else then. Like go build your own library if you don't like this one, right? As opposed to somebody who is like, hey, I'm really trying to figure this out. Here's what I tried before. I think I'm maybe holding this wrong but I can't get it to work. Can somebody please show me what to do? I'm immediately like, oh, no, no, no, let me show you what you did. Here's the code that will actually solve this problem. 
It's such a subtle thing, but the same question asked two different ways is gonna get a very different answer, and one of them is gonna get you on my crap list. 
[ Laughter ]
Yeah. Yeah, it's the ‑‑ so, I used to do sales before switching to full‑time engineering. So career transition, learned how to code. I shared a bit of that story. There was a book that everybody in sales reads which is ""How to Win Friends and Influence People.""
I mention this with a caveat, it was written 100 years ago. Super racist, super misogynistic. Take the gems where you can. Hopefully we can find a new book to recommend. 
Read it with a sifter. 
Exactly. I raid the book and I read it quite a few times. The gems I took from it is how to, like, in engineering, you've got to convince other people your code's the best or convince them that your code needs to be merged, so you're constantly always trying to sell your code. So in the inverse where you find issues with the code that's been written or you find issues with the library, the inclination, really, at first is like, man, this thing sucks. I can't believe these developers did these. This is gonna ‑‑ let's go use this other newer, flashier JavaScript library. But my approach and the thing I try to redirect folx into is, like, don't dog the person who wrote the code. Like it's better ‑‑ leading a horse to water, that whole analogy. That's basically what came out of that book, which is essentially, like, take the problem and then make the person who you think you're trying to convince think it's their solution. Like you come up with the solution. But be of value. And, like, usually what I do ‑‑ I have a YouTube video on my YouTube account called ""How to Get Your PR Reviewed.""
And the way I set up the structure of my PR messages. If you're not thinking about what you put in your PR or what you put in the issue, you're doing it wrong. You got to start with, like, talk ‑‑ basically SCQU is a my structure. Situation, complication, question, answer. Turns out you can't write test in Vite because you can't use jest, you have to bring in Babel, which defeats the purpose because Vite is so nice and lightweight. The complication is a bit of that, like, I tried doing this on this specific use case.
Doesn't work. Here's the question is how can we write test in Vite? The answer which we eventually came to is Vite Test.
Had no idea it existed. Somebody came through with the answer. What's the step of implementing it. In my PR, I'll walk through that in my PR message, and we can then look at my code that answers, like, all those answers and the complications, you can now see the story of the code. 
Mm‑hmm. 
It's the same thing with issue. If you don't have ‑‑ if you don't put an issue but you don't have the structure of why you're opening this issue. I had an issue open about Progressive Web App, making the project a Progressive Web App, and very, very brief and terse issue opens. Like, uh, could you give me a little more? Can you show me some value because I want to see someone's actually invested in the problem. Otherwise, I've got to close this thing because I don't have the bandwidth to convert this thing to a Progressive Web App after converting it from Astro to Vite. If you can show you're invested in this problem, if not, it's a won't fix. Sometimes as a maintainer, you have to be a bit terse and a bit sort of, like, basically lay the hammer down on some stuff that's low effort. 
Right. 
That can feel like the questions you don't feel like asking because it just wasn't set up properly. Like that's the stuff I'm trying to teach my core Open Sauce community, how to go interact with other projects. I had one contributor who opened up a discussion on Remix, like, eventually they decided not to move forward with his solution, but, like, able to set up the stage enough that they can get the issue read. And get, like, some sort of conversation going. That's success. Because, like, once you start opening up issues that look valuable to other folx, I can go into your GitHub account and actually look at all your open issues and check that out. So if I see that you've opened the same issue about adding a ‑‑ to three different projects, then I'm just gonna ‑‑ like the value of that Goss down. I'm gonna see you're essentially spamming projects with the same sort of pitch. 
I would prefer, like, if you just come to me as an earnest contributor. I'm happy to, like, work alongside you. Give basically the same value that I got when I first contributed to my first project. Of the person responding to my email. Like I'm totally down jumping on a Zoom, pairing, answering questions, but it really has to be sort of, like, again, if you want to be a friend ‑‑ sorry, if you want a friend, you got to be a friend type of deal. 
Yeah, I think that really does sort of point at a lot of the issues that I've personally encountered where, you know, I ‑‑ if somebody is coming to me and their participation in a space is low effort, like, you know, I've never seen you before and you just came here and you asked me for something. The thing you asked me for, you don't have a good description for what you want. You're just telling me, like, I need this. I have no incentive or motivation to show up in that space. Like, you know ‑‑ 
Yeah. 
How do I know that you have any investment whatsoever in this project? And, like, you know, I've been burned before where somebody comes in and they're like I have this problem. I go and fix the problem and go back and say, hey, here's the solution to your problem. I migrated off to this other tool because you were too slow. Cool. That's a great use of my time. Thank you for not telling me any of that. And, you know, it's very, like, you know, that's ‑‑ I think that's where the burnout for open source maintainers comes in, is the ‑‑ if we as the consumers of that open source aren't going in with that sense of empathy and saying, like, look, I'm trying ‑‑ you're doing something I like. I'm getting a lot of value out of it. And therefore, I want to ‑‑ I want to be part of the community that improves it. I maybe don't have the time or skill to fix the thing that needs to be fixed, but I want to give you enough of a roadmap that you understand that, ""A"", this isn't some, like, like you said, I'm not just spamming repos and, ""B"", like, I'm invested enough that I was willing to at least, like, run through the problem and create the reproduction of, like, hey, here's where the bug happens if you run this code. You'll see it. 
You know, like, anything that points me as a contribute tore the fact that you spent more than two minutes saying, like, it's broken. Fix it. 
[ Laughter ]
Right? 
Yeah. 
Yeah, it makes such a big impact on my own sense of, like, engagement with a given set of issues, is how earnest and helpful people are being versus how demanding and you said terse. I think that's a good word. 
Yeah. Did you ever do test‑driven development back in the day? 
I have done test‑driven development. And if anybody ever asks, like, for an interview or something, yes, of course I do test‑driven development. But no, I don't do test‑driven development. 
Okay. Yeah, the whole mantra around TDD is fail fast. So you write a test and you get the test to pass. And then you move on to the next test. And I think it's the same thing when approaching projects and even contributors too as well. So, like, I'm looking to get you to exit out of the project as fast as possible. So, like, I'll ask the question, hey, are you willing to put this, like, contribute to this? Do you want help? And I'll show you the ropes of, like, how to get this plugged into the project. If the answer is I don't have time, it's like, cool, awesome. You can now move on. I'll move on. We'll keep the issue open for a bit but, like, perhaps this issue's gonna get closed in a couple months because I just need to know how invested you are. 
The other thing that I usually do, because a lot of my projects are sort of React‑based and have some sort of UI component to it. My first question is, like, hey, have you signed up for this? Have you logged in with GitHub on the website? So, like, the Progressive Web App question, I actually have a video I'll be publishing just when I walk through the PR and, like, how to make a good contribution. Because I reached out to the person in DMs. I was like, hey, thanks so much. I would love for you to contribute, but also this is kind of, like, a ‑‑ it's a pie in the sky idea. Like we also ‑‑ we only had 48 people sign up for the thing. So we had 48 people, users on the platform. Low chance that any of those 48 folx are gonna need a Progressive Web App. If they did, they probably would have mentioned it. My question to the person who opened the PR, have you actually logged into this thing. Have you logged in on the web? Can you provide metrics or speed tests? We're using Astro. It's extremely fast. Yes, Progressive Web App would be great but also it's not a paved path for Astro. If I were to implement that, that would be more weekend cycles and lunchtime development than I would spend on something that my 48 users aren't using. So... 
Yeah. You know, that's actually a really good point because something that ‑‑ just as, like, a point of career literacy as well, is, like, if you can't connect the problem you're solving to actually need, then you're kind of ‑‑ you're just playing, right? 
Yeah. 
It's fun to play. I build stuff for no purpose all the time, but I'm also not bad when nobody uses it because it wasn't built for that purpose. It was built to entertain me. And I think sometimes if you're not thinking through who does this benefit, why does this need to exist? You're building things to entertain yourself, but under the impression that it's gonna be very useful to lots of people and then, you know, it can ‑‑ it violates your expectations when you, you know, put it out there and somebody is like, who is this for? I don't know, but it's definitely useful. It kind of hurts your feelings when you realize you built something that was ultimately useless, right? 
And, like ‑‑ 
Yeah. 
‑‑ useless things serve a great purpose, but you want to be clear in your own planning, like, am I building this because it sounds fun or am I building this because it solves a problem? Hopefully, the answer is both, right? That's the best‑case scenario. But it's also perfectly okay to build something useless to learn and then just stick it on a GitHub repo somewhere. Hey, I built a useless thing. Use it if you want, but I don't know what it's for. I have a bunch of those if you go through my GitHub. 
[ Laughter ]
Yeah, I have a ‑‑ I currently own socialcarding.com. And it's not useless yet. I built it because the site I built, we embedded social cards as the cards on the side. You know what would be really cool? Instead of going to Twitter card preview or whatever it is to see if the social card works, I'll build my own. So I have that now. I've used it a few times, but it actually got really helpful when I needed to save the social card image for something else because I can download images from it. It's a quick and dirty Next app. One of the things I wanted to bring up too as well around this approach of approaching open source and even, like, providing value is the title of the stream was, like, finding good first issues. Or something in the description I gave you. 
The one thing, the secret sauce is actually opening issues. If you're looking for good first issues, the best good first issues is you using the tool or the library. Finding a limitation when you're getting started. It could be onboarding. It could be installing. It could be setting it up into whatever X, Y, Z project it is. Just go use it and open up the issue if there is an issue. What usually happens is, like, hey, here are some screenshots of how I got stuck. Maybe there is something I'm missing. But here's the issue. And usually what happens, every experience I've done this with, the maintainer comes through or some contributor's like, oh, yeah, actually, this is the fix. Here's the line of code. Here's what I would write. If you want to fix it real quick, like, open up a PR. 
I've gotten countless numbers of contributions where people just gave me the answer. 
Yeah. 
In coding interviews, in boot camps, like, the mantra is you have to go find your own answer or you got to do it on your own. Don't look at the book for at least two to six hours. Once you get to the six‑hour mark, now you know you're a developer. But at the end of the day, like, most maintainers are, like, the good first issues are the things that they just don't have time to do but they could do in, like, 30 minutes. So I've basically gotten my contributions to things like React Native, it came through because I was an early user and had a problem. Someone gave me an answer. I was like, oh, cool, I'll just open up the PR. And now I'm in the ‑‑ I'm in the vault as a React Native contributor one time because somebody gave me the answer. 
I love that so much. It really just does point to the fact that, like, there's no ‑‑ I feel like people look at open source as ‑‑ sometimes as, like, a strategic thing and networking thing, a career‑building thing, and like all strategic and networking career‑building things, when you start peeling back all the layers of strategy, it just comes down to, like, be engaged. Be helpful. Like be kind. And you'll advance. That's really, like, every, you know, like, go out, participate, show up, be helpful, ask good questions. You know, act in good faith. Like all of those things are just being a good person at the end of the day. 
Yeah. 
You show up and you are treating people with respect and you're trying to be helpful and, you know, you're just doing things that are interesting to you. And that combination of treating people well and doing things that you're interested in is going to lead to growth. And if you, you know, like you said, if you're using a project and you find an issue with the project, going and opening that issue is gonna, you know, first of all, you're getting in touch with the people who build the project. You're gonna get an opportunity to contribute. That's great. Good for your career. It gives you a little more insight into how the thing works. Well, now you're a better developer. That's good for your career. And all you really did was chase an interest. And, like, try to be ‑‑ 
Yes. 
‑‑ helpful. And I think that's the solution. 
The one more secret sauce tip. I used to play high school football back in the day. I was in the newspaper once. I'll share an image on Twitter when I find it, but the ‑‑ I played wide receiver. The one way to get yourself in the game is, like, standing right next to the coach. Because usually what happens is someone gets a longshot, throw it down the field, and CNN they're tired. Usually what happens is that person gets pulled out and whoever is standing next to the coach gets pulled in. The other analogy is I spent the last two weeks with my kids because my wife had to go deal with some family issues. For years, I've been second‑string quarterback when it comes to parenting. And then out of the blue, I'm pulled into first string because obviously I'm a parent. I'm the dad. I can do the work. And obviously passed with flying colors. Both kids are still alive and happy. But what I'm getting at is the ‑‑ in open source, it can be just sitting in the Discord watching conversation happen. And, like, you don't have to, like, say, hey, I'm here. I want to be a contributor. Tell me exactly what to do. Put me in, coach. It's just, like, literally just standing there. As you see the questions being asked, like, take note of the questions that the ‑‑ the constant questions that are continually being asked, and eventually you'll find the answer because they'll be given eventually. 
And the one best contribution you can probably make today as an open source potential contributor is, like, write a blog post. AJC Web Dev, Anthony, sometimes he's hanging out in these chats as well. He would sit in different Discords, specifically the red board community, and just, like, be super helpful. He does this other series on dev.2 where it's, like, a first look at Vite or a first look at React version 18. He'll just be the first person to write the blog post for whatever technology that comes out, and, like, give the first look. Walk through the onboarding. Walk through the documentation and give some feedback. 
Unbelievably valuable. Like I've talked to ‑‑ I've seen Dan's tweets as well for React. A lot of folx just don't even use the next, latest releases. Like they wait until everybody else has done it, which means as they ship new releases for, like, Vite 2 or Vite 3 or V3 or whatever, you can be that person to test it out, provide some feedback up front. As long as you keep showing up and providing value, you could ‑‑ not join the core team but be sort of, like, first person pulled in when conversations are happening or first person to pull in when RCs are being chatted about. 
So, like, there's so much opportunity. And it's just ‑‑ there's something in the chat about life is 80% showing up. Like I think sometimes if you're available and you have, like, some cycles, showing up in community is valuable. And do it while you're at work too as well. I would not shy away from contributing and being involved in open source while you're waiting for a test to pass or you got some down time. 
For sure. Yeah, I think, like, you know ‑‑ and a lot of companies now ‑‑ and I think the number is growing. Are starting to really embrace the impact of open source. And, like, how important it actually is. And in some cases, like, with GitHub, it's pretty obvious that that's a strategic move. Like open source is built largely on GitHub. And that is a great ‑‑ what's the business word? Synergy, right? 
Yes. 
But then if you think about, like, all these companies that, you know, their not software companies, but they build on open source, they're using React every day. They're using Redux. They're using NGRX and Angular and all these tools that are open‑source tools. So getting involved with that as part of your day job is helping your day job, and it's helping you kind of make ‑‑ you start to have more influence and more ability to, like, direct things because you'll have a better understanding. So it's a great career growth move, both community wise because being active and, like, helpful in the community is just a great ‑‑ I mean, that's why I know you, right? Because you're somebody who is always visible and super helpful and ready to jump in and help people progress. And so, you know, now you're, like, one of the people that I think of first when I think about good community building. 
And I don't think that you did that strategically. I don't think you were sitting somewhere with a whiteboard like, all right, how do I become an influencer on social media? You know what I mean? I think that's just who you are, and that genuine engagement shows up. But also it worked. Like we've got people at work that they're not necessarily on Twitter, but they are super engaged in open source. And they are now, like, really influential in the way that we architect things at work. They really drive our roadmap and they drive our internal tech decisions because they know what's going on and they're plugged in. They've got these back channels open. 
So, you know, whether your aspirations are community focused or career focused, being just, you know, like you said, show up and pay attention. You don't even necessarily need to, like, actively participate. You can just be an observer. There is still huge opportunities to just grow from there. 
Yeah. And the one thing about being at work, too, as well. I constantly have the sort of concern and question around, like, open source, it feels like it has to be your free time, it has to be your nights and weekends.
And, honestly, it doesn't have to be. If you're in the state of California, you could do open source all day, every day. The company can't tell you no. That's in the state of California, but there are other ways you can sort of have the conversation with your manager, your team of just saying, hey, I actually want to participate. I found the bug. I'm gonna go contribute back. Because what I found in my first‑ever engineering job, just giving talks and participating in the local community, I was able to recruit more people on the team. And it's the same thing when I worked at Netlify. Giving a conference talk on stage was actually a really good recruiting tactic, once we got to series ""A"" and, like, our network was tapped out. Just be being in the field made it super helpful to find other people to work alongside of us. So, like, you could provide value, not only to open source, but also to the company that you work for by being a contributor and a participant in the community as well. 
Absolutely. Yeah. So, so, so many good things to come out of this. All right. So I could talk about this in the abstract all day, but I'm really excited to actually dig into some of what you've been building. So let me switch us into pair programming view here. We'll go to camera 2. All right. And so ‑‑ 
All right. Here we are. 
Before we ‑‑ are we ‑‑ no, okay. Sorry, I got, like, a weird echo there. Okay, now, before we get started, let's do a quick shout‑out to the sponsors. We've got Jordan here from White Coat Captioning doing the live captioning today. Thank you very much, Jordan, for being here. That is made possible through the support of our sponsors, Netlify, Nx, and Backlight, all kicking in to help make this show possible, honestly. And we are talking to bdougie today. So that is bdougieYO on Twitter. Make sure you head over there and give a follow. Let me drop this in the chat. And really, that's kind of what I got, to lay the foundation here. 
So you're talking about ‑‑ you're talking about doing a lot. I can see a link here to Open Sauced. So Open Sauced is your project that's really kind of built around this, right? 
Yep. 
So how, like, how does one get started here? If we're talking about, like, really moving in? 
Yeah. So, usually, the ‑‑ so, Twitter's great to follow as well. I'm not as active on the Open Sauced account. Every now and then, we'll do events. I'm hoping to pick up events moving forward, hopefully closer to summer. But the best place is actually the Discord. So, like, if you go to opensauce.pizza, there is a link to the Discord. More than welcome if folx are interested in finding out good projects, first good issues or just talking about Open Sauce in general, feel free to join there. Say hello. Again, if you want to be part of the community, definitely get involved. Say hello and provide insight when I ask random questions or drop a PR for review. Would love insight there. But the one thing I wanted to talk about because I've actually ‑‑ one of my first appearances on Learn With Jason was when I first started taking opensauced.pizza seriously. I mentioned it on a whim ‑‑ actually this site. At the end of a stream. Oh, yeah, I've been doing this thing. Latest by our CRM for contributing to projects. Since then, I've developed hotopensauced.pizza. Eventually, we're going to merge everything under one umbrella. Making design and also infrastructure decisions. We might utilize Redwood to centralize everything together because it's becoming a beefier project. 
Hotopensauced.pizza is essentially finding trending projects. When I say trending projects, this is only for Open Sauce users. So there's obviously change log nightly and GitHub trending, but hotopensauced.pizza is for anyone using Open Sauce to track their contributions and saving repos for later. Those are the projects that show up on this list. There are a lot of JavaScript questions and awesome for beginner‑type projects here. Then we have some of the staples within the industry, like free code camp. Shout‑out to Zach, full‑time open source contributor or maintainer at this point. So that's what this is. 
This is really cool. Yeah, it's been a while since I've seen all this. I don't even remember there being login functionality when we originally talked. 
No, when we originally talked, there was no login, yeah. 
So, how does this work? Let me see. I'm just gonna jump in here. I'm gonna log in using my GitHub account. Makes sense. 
Yep. So we're using Supabase for auth. Which is also go true under the hood. 
Go true is an open source that started at Netlify. Now Superbase is using it. I think they've done a ton to improve it. They've been super active on that. 
Yeah, it's awesome. Sorry, go ahead. 
Well, I was just gonna ‑‑ I'm poking around here, getting a sense here. So if I'm in here and I'm like, oh, yeah, I want to up‑vote, Eleventy. 
You can go to my votes. You should have 11ty now. We actually have the issue up for profile pages. You'll be able to see this on your profile in the future. But for now, this is the lowest ‑‑ what do you call it? MVP of profile pages right now. 
Mm‑hmm. And so these ‑‑ are these, like ‑‑ 
They're the most recent, yeah. 
And you're pulling this, you said, from, like, I am ‑‑ so I am an Open Sauced member. 
Yeah. 
Now. Because I've logged in. So if I go and make a pull request somewhere, the project that I opened a PR against would show up in this list? 
Yeah, eventually. We're not that far yet. 
Eventually. 
At the moment, we're just tracking star data. So if you've starred a project after logging in, like, that will show up on the list. We do have a Cron that is very slow, just for rate limiting purposes. So it might take a couple days to show up on the list. But we're basically going through seven members at a time, checking their latest stars, adding it to the list if it's unique. 
Yeah. This is ‑‑ this is very ‑‑ this is ‑‑ I mean, this is fun. Like I love ‑‑ I love the discussion that, you know, you're just kind of building a good way to let a community of people who are engaged share the projects that they're excited about. And it's, like, it's such a simple idea and it's so good. 
Yeah. And it's the ‑‑ the whole notion here is, like, it's one thing just looking at all of GitHub and saying, oh, cool, I can find cool JavaScript projects or I can wait until the newsletter or someone tweets about it, but there are active people who are looking to get involved with open source and there are also folx who, like, are levelled up and have now become, like, stable contributors to certain projects. My idea is, like, I only want to talk to the people who are learning how to do open source and then graduating from that path to then go back and teach the people behind them. 
So that's ‑‑ that's basically the future of this. Is that we will have ‑‑ if you go into the GitHub repo and ‑‑ I don't think you can see our project table because ‑‑ actually, you go. If you go to GitHub.com/opensauced. If you go to the actual org account. 
Okay. 
And then click on ""projects.""
There should be a project for 1.0. Okay. I guess you have to be part of the org to see it. Apologies on that. If you go back to opensauced/hot, you will then be able to see the issues. We have a couple issues marked for planning. So that first one. And actually, the second one is profile pages. Yes. Yeah. So this is where ‑‑ this is our quick mock‑up of what profile pages will look like. I like the idea of being able to highlight stuff like your blog posts that you've created for a project. So if there's, like, a project, what projects has ‑‑ I keep picking on Vite because it's top of mind but, like, if you wanted to do a quick blog post, hey, here's how to do a quick thing in Vite, submit that to the community and then we'll highlight that. So we'll have opportunity to, like, tweet that out, get more readership, but also this will help elevate other people who want to get involved. So I've got a plan to eventually create a forum. So, forum being the dev.2 parent company in platform. We started the process of doing an Open Sauced forum, but the challenge there is moderation. 
So I actually backed off a bit until I can confirm, like, having moderation in the forum first. 
Yeah. 
But we're planning towards that eventually. 
Nice. Okay. So let's see. We've got ‑‑ yeah, some issues here. Man, yeah, all right. So this is ‑‑ and this is cool, too, because it's pulling in GitHub data and also you're gonna layer in, like, your own, like, non‑GitHub contributions to the community. And that's ‑‑ yeah, I like that. This feels like something that ‑‑ go ahead. 
Yeah, sorry. I was gonna say ‑‑ so I was the technical lead on the stars.github.com site. If you are a GitHub Star, say what's up because you can see this, but it's behind a login. If you logged into the stars site as a star, you could actually submit your contributions through blog posts. So, like, it's the same idea, except it's gonna be more broader for Open Sauced. I probably should tell the Stars Lead that I'm doing this. Basically, it's the same idea of how we showcase Stars' work and what they're doing in the community and what they want to showcase. Same thing with Open Sauced, except it's open for everybody. You can submit. Specific to ‑‑ contribution specific to projects. As much as I'd love your intro to open source stuff, you can definitely share that. If you're contributing to a project in a way that is gonna benefit broadly. So, like, first looks or, hey, I found my hairy issue. Here is how to connect this thing to that thing. That's kind of the stuff I'll be sort of sourcing and reaching out to folx to submit for. 
Nice. Very, very cool. All right. So looking at this, we're in the hot and ready here. And ‑‑ 
Yeah. 
‑‑ if I'm looking for one of my first contributions or I want to get involved and actually kind of do something, where do you recommend somebody goes? 
Yeah. So at the moment, it's ‑‑ there's no feature in ‑‑ the intention that we want to have. 
Test, 1, 2. 
We also just lost our caption foray second. Did my internet just tweak. Everybody, did y'all just lose the signal for a second? 
You did flash for a sec. 
I think I might have had a weird internet hiccup. So, sorry for that, everyone. But it looks like we're back. Jordan, are you good? Yes, Jordan is good. Okay. So, sorry, everyone, for the weirdness. Who knows what's going on. It's raining super hard in Portland today. So I guess we'll just be happy that the lights are still on. 
[ Laughter ]
You've got a good mic to not be able to hear that rain outside. 
Yeah, I have a lot of ‑‑ so many post‑processing things going on on this mic right now. Okay. So you were saying ‑‑ 
Yeah, we're probably a few ‑‑ quite ‑‑ [ lost audio ] notifications in the project about things. And then clicked ‑‑ click the first icon. That basically says you've read the code of conduct. So now you're unlocked. 
Which I now have. All right. 
Yeah, it's pretty standard. 
Project share? 
Project share is where our project notifications are going. Right now, we're sort of piping through ‑‑ every now and then we'll have someone share their project, but we're also looking at our cool/GitHub projects. Which is a wealth of information of, like, hot and trending projects. It's actually more submission based. So if you didn't know about this, definitely follow that Reddit forum. Because you'll find some early, early projects trying really cool things out. 
Very cool. Very, very cool. Okay. And so is there, like ‑‑ you said something about finding good first issues. Is there a place where people share those here? 
Yep. There is also GFI ketchup, which I think is under the open source org. I should probably do a better ‑‑ it's a new chat that I was testing. So it's not organized properly, probably. 
Do I need to go to the roles for this? 
Under the Open Sauced org ‑‑ oh, you know what? I need to unlock it. I was testing it and we were testing it with contributors only. So let me just open it up real quick. Good catch. 
We're launching live, everyone. 
[ Laughter ]
Now I'm, like, struggling to remember how to add roles. No, looks like the ‑‑ oh, there we go. 
Anthony's in the chat saying hello. What up, Anthony? 
Okay. Now you should see that pop up now. So just below. There we go. 
There we go. All right. 
Apologies on that. We literally ‑‑ I just launched it yesterday publicly, the actual integration. So just the other thing I mentioned in our email beforehand, but I've got the Ketchup app, and what it does is actually when you label an issue good first issue, it's the only feature we have right now is good first issue. It will actually pop it into this Discord with the intention it will be a notification on hot.opensauced.pizza. Right now, we're testing the integration and then we'll connect it to the app itself. 
This is super cool. I'm a big fan of these kind of multi‑platform notifications. I feel like, you know, whenever I want information, like, I would probably, you know, I would mute mobile notifications, but I like having a Discord notification channel because it doesn't ‑‑ my Discord doesn't make noise because I basically stay in the streamer mode at all times. 
Yeah. 
And so, like, I can just browse this channel whenever I want, as opposed to my phone vibrating when I get a notification, or, you know, you do, like, Slack Ops or email or all those sorts of things. Everybody wants their content in a different place. I like that it looks like you're kind of set up from the get‑go to put it wherever somebody wants to get it. 
Yeah. Yeah, and if you click on that issue itself, you'll see the project that's actually powering this, these notifications. It is a ‑‑ so this is the issue I marked. The next thing I'm gonna do is actually I'm gonna mark PRs for ready for review. I really believe in crowd sourcing PR reviews. My success in this project but also other projects I maintain is a lot of times ‑‑ and the reason why people go to Reddit and other places to notify people of their projects is because it's hard working on stuff alone. Because you lose interest or there is less excitement. If you can get someone else to look at the code you're writing, even if you're the only one writing code there, it's been extremely helpful when trying to figure out some weird ‑‑ I remember years ago React router, every single year I had to relearn how the world works. Just tweeting out and being like, hey, how do you do this in version 5? What's a new hotness? I don't have time to keep up with all the changes. So I'll just tweet out. Not everybody has 10,000 followers like myself. Weird flex, but, like, I could tweet out a PR and be like, hey, can someone take a look at this PR? And I'll get reviews. I love that I can do that. What I'd love to do is give that to all Open Sauced users.
If you want a PR you want to get reviewed, mark it a label, ready for review, and get another notification to the Open Sauced Discord. Any project that has installed the Ketchup app will send notifications to Open Sauced. The goal is eventually to build up enough of a content stream of people who need review for PRs, but also good first issues, but also identify what cross‑collaboration opportunities are. We're working down a path of ‑‑ we're gonna eventually have enough context and data for folx to jump into open source. And a really good first contribution is reviewing PRs as well. Just want to throw that out there. 
Absolutely. You know, I talk about this every once in a while it comes up, but one of the things about learning to code is that a lot of it is immersion, right? And you learn the basics by studying and you learn the more ‑‑ I don't even know what the right word is. The, like, the nuances, the art of it, I guess. The instincts. By watching people who know more than you or who have more experience or different experience. Because they're going to do things and they're not even going to be thinking about it. It's just some little automatic habit they picked up years ago, and you'll watch them do it and you'll go, wait, why did you do that? They'll say, oh, because of this, this, and this. And you'll go, oh, my goodness, I just learned something huge. I feel like that's the same reason I watch cooking videos. Is not necessarily because I need somebody to show me how to make whatever dish it is, but I want to watch an expert chef and see the little things that they do differently than I do and why their food tastes better than mine, right? 
And PR reviews are a great way to get that, like, hey, why did you do it this way? A lot of times when I do PR reviews I, like, I celebrate stuff. I'm like this is, like, what a great section of code this is. It's so much cleaner than I would have written it. I ask questions. Like this ‑‑ I don't get why you did it this way. What was your reasoning here. And then I learned something. Then there is the stuff you catch that's like I'm pretty sure this is a bug. That's the truly useful ‑‑ then it becomes a two‑way street, like, I'm helping but I'm also learning and, you know, I feel like you pick up a lot of little stuff like that. Yeah, the thought process. That's what Imati has just said. Yes, the thought process behind why people build the things they way they build them is so, so valuable. 
Yeah, you're missing an opportunity if you don't go through that process. Mention it enough it actually entices people to actually look into. Oh, yeah, yeah, you made this approach, turns out Fetch is embedded in Node. Why not go ahead ‑‑ I have a big pet peeve which is, like, why ‑‑ never ask the question of, like, why didn't you do this or why didn't you do that? Because a lot of times they chose the path because that's the path they discovered. And usually the ""why not"" is I didn't know. Instead of being like, why didn't you do this? Hey, great job. Also wanted to mention there are cool features in Node that are now embedded. Hey, just wanted to mention in addition to the great job you did, if you wanted to clean this up, here's a quick snippet or sample or another place in the code that we're doing it this way. 
As I was mentoring newer devs on my team, I'd always try to approach the problem ‑‑ sorry, the question of, like, hey, you did it wrong. As opposed to, like, hey, you did a great job. I also want to show you another cool way of, like, approaching it. So that way everybody feels like they're all learning in the process and it's less about, like, condemnation. 
Yeah. Yeah. Like I've heard the term on ops teams of, like, blame‑free problem analysis, right? Where you're not saying, like, you did something wrong. Or this was your fault. But, rather, you're just trying to understand how it can be better next time. And this is ‑‑ this is very different from, like, you know, that's in the context of, like, there was an incident. Something went down. But I think in PR review, you can bring the same spirit in there. The goal here isn't to show somebody how smart you are or show who's the better developer or worry about who made mistakes or who didn't, but, rather, to just say, man, these computers sure are neat. I'd love to learn more about doing more neat stuff with them with you. 
[ Laughter ]
Yeah. Yeah, yeah. One of the skills I found out early on is writing blog posts. I was pretty prolific in writing blog content when I was a junior engineer. I've sort of fallen away. Better cadence on the GitHub blog recently. But for years, I spent a lot of time not doing it. What I'm getting at is convincing other people in your PRs that you might the right decisions or why you made those decisions. Sometimes you can take that context and go write a blog post and share it somewhere publicly. It's a weird flex because you can get validation outside the company you work for, but that validation can help support decisions made moving forward. If people are like, uh, I don't know about this Typescript thing. Maybe we don't want to invest in this project now. You write a blog post and everybody's like, hey, yeah, I did Typescript and we got all these wins within the first six months. That becomes a great validation to be like, okay, team, we're gonna invest in Typescript. Let's rewrite the entire app. Hope you don't do that. Don't do that, please. 
[ Laughter ]
Yeah, sometimes you just got to burn it all down and start over again, right? 
Yeah. That's exactly why I feel like ‑‑ 
Around promotion time, right? That's when we start from scratch. 
Yeah. Or when you have ‑‑ 
Don't do that, chat. But, no, I think ‑‑ but you're absolutely right. That's something I hadn't even considered that's just an excellent point. Is how much discussing your code helps you understand your own reasoning and improves your ability to communicate in a way that, you know, if we talk about, like, I keep looping these back to career. And I know that's not really the heart and soul of what we're talking about today, but thinking about career advancement, like, once you get past senior engineer, all of the advancement after that is based on how effectively you work with other people. Like senior is, like, can I give you a project, walk away, and you'll get it done? Great. Yes. That's senior. Staff, principal, so on, those are, like, hey, can I give you an ambiguous problem and you can go convince a group of engineers to follow you or you can design an architecture that will survive the marketing and product reviews and make it to production in tact. That's all people. That's all communication. And being able to reason through your code and thinking about why did I make the choices I made. And, you know, how can I ‑‑ can I have conversations about the code non‑defensively, like, if somebody questions my decision, am I upset that I got questioned? Or am I stoked that somebody's invested in making it better? 
And, you know, each of those things ‑‑ and, yeah, being able to pull out blog posts. What a ‑‑ that's killer. That's such a good idea. 
Yeah. Yeah. And I hope you don't mind, I saw Charlie dev dropped a question about a major tech company and PRs being scrutinized. 
Yeah, go ahead. 
It's the investment of the code and putting it in. This might not be a great answer. Definitely ask a ton of people and other people at companies as well. Chat, also jump in if you're interested in providing your own anecdote. I've been spending a lot of time watching Paul Graham and, like, YC conversations on YouTube. Actually, specifically, like, Peter Thiel, for whatever reason, showed up in my feed. I've never seen him talk about anything, but decided to start watching some, like, pitches. But what I've learned from VC pitching for start‑ups is that you have to de‑rest the investor. Because they just want to know like, hey, will you successfully make this thing happen or are you gonna take the money and go twiddle your thumbs and buy an office in San Francisco ‑‑ lease an office, rather. So, like, with code, it depends on, like, how mature the team is or how junior the team is, but at the end of the day, you're, like, de‑risking, the rest of the team and your manager and your company by them accepting your code. Because usually in the concept of open source, I've got some pretty great contributions, like this driveby distributors. And a couple of them came by recently on my newest project. Then I have to make the decision, like, I've never seen you in the Discord. I've never seen you on Twitter. I don't know who you are, but yet you've given this awesome code. I 100% guarantee you're gonna disappear. This happens as well ‑‑ 
I made a TikTok about senior devs going to F.A.N.G. companies after mentoring junior engineers. Over and over again you see your senior dev leaving to go to a better company and now you're it. A lot of times in open source and even in companies, you want to make sure the code you're accepting and you're considering is gonna be maintained. Moving down the road. So if you're making some, like, heavy‑hitting decisions, that could be challenging for a team to even, like, wrap their brain around, which is why you can sort of de‑risk by write a blog post or de‑risk with helping out with documentation or de‑risk by having syncs based on the decisions you're making. Hope that's helpful. It's a whole other can of worms based on, like, level, skill, gender, bias, and stuff like that. I hope some of the thoughts I shared was helpful. 
I think that's, yeah ‑‑ and I also think, like, there's a difference in a PR review where I've noticed that there are people who are just extremely thorough in their PR reviews. And they're doing it from a place of constructive feedback. And they see themselves as mentors. They see themselves as stewards of good code and all that. And then I've also had people who are really, really intense with their PRs as a form of, like, gatekeeping. Because they feel like they control the code and want to make sure it's done exactly their way and all that kind of stuff. So I think that, you know, for Charlie here, the question that I would maybe start framing things from is, do you feel like the PR reviews are coming from a good place? And if the answer is yes, then, yeah, you're probably just getting, like, a great amount of team support. 
If it feels like people oar trying to keep your code from getting into the code base, then there is another set of questions to start asking around that which is, like, you know, why? Are they nervous about you? Are they unwilling to let anybody's code go in? Is it only certain types of code that will come in and cause problems? Like, you know, where are their triggers? Because sometimes it can just be, like, I know when I was at IBM, there were devs that I thought had it out for me, and when I dug into the history, I found out they got burned super hard by, you know, some project that another team got involved in, and then that team got moved and they got left with a bunch of code they didn't understand. They had to work really long nights and weekends to get it back to a point where it was functional. So they were super protective as a result. Had nothing to do with me, but I was feeling personally attacked. We were able to back that out and figure out how to work together. I had other people who straight‑out had it out for me. They didn't want my code in their codebase. That's what it is, right? It's important to dig in and understand where the motivation is coming from for those really intense PRs so that you can navigate it from more than just this doesn't feel right, but more of, like, okay, I think I understand some of the history and context and motivation for why I'm getting these types of PRs. 
Because then you can make better decisions. Like you said with de‑risking, de‑risking is such a powerful thing for somebody who is nervous, who feels like they got burned by code in the past. And then there's a different kind of de‑risking which is, like, the I'm not here to try to take over your project de‑risking. There is the I'm not here to try to bring you the future de‑risking. I'm just here trying to get something done. You know? There's all sorts of interesting ways that you can discuss and talk about the code you're trying to do that can, you know, help people get on the same page and feel like we're just trying to build software. We're not trying to ‑‑ we're not playing Game of Thrones here. 
Yeah, there was another notion back when React was kind of taking over in the mid‑2010s about résumé‑driven development as well. And, like, a couple of us on the engineering team, like, we ended up leaving a couple months after this, but we did ‑‑ we did do, like, some heavy‑hitting React tries and changes and stuff like that as we were interviewing other places. The start‑up was going under. We saw the writing on the wall. So we did do a bit of résumé‑driven development, too, as well. Do that in open source. Like go find an open‑source project to contribute to. If that's the case. Which I think is undersold opportunity if you're at a company and like, oh, man, we're still on Angular 12. I don't know what the version of Angular is. I want to go try the new Vue. The best place to do that is find a project actually using Vue, go make a contribution, and see if you like it. See if you can learn something from that experience and stick around so you can learn outside the job. Do it on Fridays. Do it during lunch. I'm gonna continue to say this. I'm a big fan of writing open source code at work because I think there is a value can provide back to the company. 
But if you are concerned about your manager or whatnot or time you put there, have that conversation. Or come work at GitHub. 
Yeah, right? I mean, this is the thing, is it is probably one of the wildest job markets I've ever seen right now. 
Oh, yeah. 
So many opportunities. If you want your job to look a certain way, you've got negotiating power right now. And I think that companies are pretty willing to work with us. Because, you know, it's so much more expensive to hire somebody new than to keep your existing talent. So if you're the existing talent, just, you know, be reasonable, obviously. Like you don't want a Lamborghini as a company car, but some time to work on open source 10% of your time, that's a perfectly reasonable ask and one that a lot of companies are willing to support now. So it's one of those ‑‑ you can definitely advocate and make that stuff happen because, yeah, I mean, a lot of us, we got kids. We got families. We got stuff we want to do that's not on the computer. And you shouldn't have to give up your nights and weekends to do the things ‑‑ this is all advancement. It all benefits your company, right? It's not like you're out here ‑‑ I'm not trying to learn how to play the drums on the company clock. 
Oh, thank you for the gift subs, Charlie. I appreciate that. 
Yeah. 
But yeah. So I think, you know, there's a lot of opportunity out there for just advancement in so many different directions. Like, you know, as a communicator, as ‑‑ in your career and all of those things, and, yeah, I'm very much ‑‑ like I don't ‑‑ I understand where people come from with the résumé‑driven development thing, but I also, like, it kind of feels like all development is résumé‑driven development. You're ‑‑ the work that you do ‑‑ 
Yeah. 
‑‑ tells people what kind of work you want to do. And if you're, you know, like, in your company, if you ‑‑ if you want to do more, like, UI design‑style work, get involved in those projects. You show the company that that's what you want to be and they'll think of you first when you ‑‑ when you take those projects. And, you know, the joke I make is that doing ‑‑ like performing well in your job is like winning a pie‑eating contest where the prize for winning is more pie. So when you think about what you're taking on and what you're gonna excel at as a career, you know, as a developer, make sure it's a flavor of pie you like. Because the more of it you do, the more of it you're gonna get, right? 
[ Laughter ]
Yeah. That's actually a great analogy. And I don't know if I ‑‑ I feel like I've heard that analogy before. Maybe it was from you. 
It definitely didn't originate with me, but I say it a lot. 
[ Laughter ]
Yeah. But yeah, I stand by that, too, as well. Like definitely make sure the pie that you're getting in return and as a reward is the pie that you don't mind hanging out with for the next two to four years until you're fully vested. 
Charlie is suggesting Reese's cheesecake. Chat, what's your favorite kind of pie? I think cheesecake might be the one. Cookies and cream cheesecake, a good dulce de leche. I think I might only like cheesecake. 
Is pie a cheesecake or a different form of dessert? 
I don't know. It's got a crust. Who knows. Yeah. Apple pie. Pecan pie. Ooh, that is a good one. Man, now I just want pie. 
Yeah, in Oakland, we've got a ‑‑ I'm, like, blanking on the pie shop, but got a great pie shop, Piticery. They actually went remote a bit during the pandemic. They ended up ‑‑ they went remote and showed up in Whole Foods so they're doing pretty well. They make a really good pecan pie. If you're in Oakland, Piticery has a great pecan and also rhubarb, if you're a fan of strawberry and rhubarb, that's an excellent choice as well. 
Okay. Now I just want pie. All right. I'm getting called out for calling cheesecake pie. Look, they're all ‑‑ at the end of the day, they're all sandwiches. 
[ Laughter ]
So let's see. What should we ‑‑ what should we talk about next? Chat, do you have questions for Brian about open source? Like what are you working on? What are you building? And, you know, where do you want to go next? Let's hear about it. Brian, while we're waiting for the chat to think and type, what ‑‑ like what else do you think somebody should focus on? So we looked at, you know, we've got the bot here on Open Sauced's Discord that's showing good first issues. We've got over here on ‑‑ we've got the hot.opensauced.pizza, if I can find it. Here it is. That is showing, you know, active repos, up‑voted repos. We've got the ability to sort by the most up‑voted. Great. Yep. Keep on ‑‑ wait, did I ‑‑ oh, I up‑voted it by joining. Got it. We've got some good projects here. Vite, that's a great project. Let's go. 
We've got Open Sauced itself. 
Yeah. Yeah. Open Sauced, it's a legacy platform and it's really to track projects. So if you're looking for data on repos of good ‑‑ if you want to find good first issues directly at the source, you can filter there. You can also find out contributors. My whole thing is, like, you want to be able to find out who are the people to reach out to? I will eventually make that easier moving forward. Of, like, some ‑‑ I can do some creative things in the GitHub API. All this is open source. Like code's available and readable as well. I want to do some creative things. If you approach a project, what's some sort of data that is not being sort of surfaced when you walk into a project? And how to contribute. So I want to have, like, a ‑‑ we eventually have a score on repos based on approachability. So kind of, like, walk score. If you're living downtown Portland. 
Oh. 
A walk score of 99. But it would be interesting to have, like, a walk score for repos. So there are some repos that you probably don't want to contribute to. So I would say, like, projects like ‑‑ I don't want to point out any ‑‑ there are some projects ‑‑ you mentioned NGRX. Actually, Brandon gave a talk about NGRX when they weren't taking contributions, how they basically set the project up to say, hey, thanks so much. We're working on a big release. You can open issues but please no PRs at this moment because we're focused on this release. There are situations where ‑‑ and it's okay for projects and maintainers to do that. Not every project needs contribution. That should be also clear when you walk into a project. 
Man, a walk score for OSS repos is such a good idea. That's brilliant. That's really thing that I'm looking for, right? I'm always looking for, where's the project that if I show up, people are gonna be resective, supportive, I'm not gonna get yelled at for trying to help, I'm not gonna get treated like I'm not very smart because I ‑‑ because I didn't know all the answers. Like I want to ‑‑ I want to go to projects that are, you know, invested in getting contributors. And so having a place that shows, like, yeah, these people merge PRs regularly. They're good at code review. Nobody's giving them a, boy, these people are jerks score or whatever that button is. 
That's brilliant. Brilliant. I want that real bad. Please ship it. 
[ Laughter ]
Yeah, yeah. I could probably ship it in, like, a couple months. I've got all the ideas and stuff, like, up here. I'm slowly creating issues. If anybody wants to jump in there. Even the algorithm for how popular projects are, it's an issue if you want to see how that works. I tried to borrow from, like, TikTok and how the For You Page is. It's very similar. If there is a clear connection where someone also on Open Sauced also likes the same things that you like and they recently liked it. There is also a recency score as well of how recent, like, you approached a project. 
Flies. 
All that sort of attributed in the algorithm. I'm open to suggestions as well. If folx want to add, like, hey, this would be cool stuff to put on the profile that's gonna be shipped hopefully in the next couple weeks. But, yeah, the walk score is a thing that I ‑‑ it's probably closer to the summer that I'll get to it, because I'm really focused on user, individual contributor experience right now. So, like, what things can you highlight as an individual contributor for open‑source projects? And then I'll be working on the maintainer experience. So as a repo maintainer and a project ‑‑ just general projects, like, a walk score will be something that we'll highlight pretty up front and center. 
Cool. Very cool. All right. So we got some questions from the chat. Rollers is asking, how do you pick an open source project and not feel overwhelmed? So sounds like this repo score would be part of that. In absence of that, what are your houristics now? 
It really comes down to interests. Nothing gets hacked over fast, but the approach is let's get everybody through the gate as fast as possible. And once the gate is closing, everybody walks away and they go back to their daily lives. So it's kind of like Burning Man. Like everybody's into it. But when Burning Man's over, you, like, go home and call your accountant and go make a VC pitch or whatever. So what I'd like to do is, like, make open source more ‑‑ not sustainable in the sense that let's go get money to projects. Because I think that's a problem that other folx are focusing on. But more of, like, how do you approach a project and easily find issues or easily feel like you're a part of the community? And it really comes down to, one, step one is probably use the thing. So ‑‑ and I'm not a fan of, like, how everyone also approaches open source. Go find good first issues. Go look at your package.JSON. I think those are good steps. Go have a conversation. Find the human element of open source. If you were to try to get a job at Netlify today, you'd probably want to interview there. You wouldn't take an offer without meeting anybody from the team or who you're gonna report to. You're gonna talk to somebody. Not every project is built with the same people. So, like, you are valuable to that project. 
So, like, show your value and your interests by saying hello. Opening up issues as opposed to looking for issues. But then participating in the conversation. So, like, we're openly talking about the future of Open Sauced in public channels. If you have any interest or conversation to provide or any insight ‑‑ because, like, we're making strategical decisions on infrastructure and tools, like, we're gonna radX for our UI. Our current design system is all hand‑built and very slow to get people ‑‑ to teach them how to contribute. We want to build on top of established solutions. But during that conversation, what we did is we had a Discord chat and we walked through all the stuff that people tweeted at me. Again, 10,000 followers, so I tweeted out, hey, what design system tools are you using today? Trying to move off Tailwinds potentially, but what would work with Tailwinds today? So it came up as a solution. We'll move with that and discuss if Tailwinds gets removed or stays with the project. 
So, yeah, participation. Joining the community.
It's always hard, you walk into a meet‑up or go to a bar and go stand on the wall or go stand next to somebody you know and you don't come out of your comfort zone until you're comfortable. 
Right. 
So sometimes it is gonna be a bit of ‑‑ you're gonna have to be a wallflower for a bit until you're comfortable reaching out and saying, hey, I've seen you around. Thank you so much for the project. Had a couple of questions. Can I open up issues? Like what is the protocol? And sometimes that protocol is listed directly in the contributing ‑‑ for Open Sauced you can read through it and have an idea of how you contribute. Our onboarding path is the triage team. If you want to be part of the triage team just say, hey, I want to be part of the triage team. We add you on. Now you can label issues. If you see issues that need to be labeled or get more context or information, your respond is just to respond to issues. 
And also as new features get shipped ‑‑ we took this from the Node.js team. They have a release team. As we do PRs, I just ask the triage team to basically review the deploy preview on Netlify and just find if there are any edge cases or any weirdness. So funny enough, when I looked at opensauced.pizza, when you had it open, the pizza is really off‑center. That's our canary to know that something is broken. That pizza is way, way off. So something in the design changed or some update happened and now it no longer is absolute. It's, like, floating pizza in the wrong place. So, good first issue right there. 
Yeah, absolutely. And maybe one other thing to add, Rollers, would be look at projects you're already using. I always feel overwhelmed if I try to jump into something new, but if I ‑‑ like I'm using ‑‑ I'm working with 11ity a lot right now because I moved over one of my sites to it. And when I go to, like, read issues and look at the open pull requests and stuff, I actually can kind of see what ‑‑ I understand a little bit more about what's going on because I'm familiar with the terminology and how the system works, but I remember back in the day, I tried to jump in and help on Jest and I didn't know anything about Babel. I didn't know anything about, like, Jest. Somebody just said, yeah, we got this issue. Oh, I want to get involved in open source. I'll help with that. I just hit a wall. I eventually had to go back and be like, I'm so sorry, but I have no idea what I'm doing and I don't understand the code at all. That was a mistake on my part. 
Yeah. Yes, it's a mistake, but it's also knowing, like, when you hit that limitation, knowing when to come back. So it's the opposite of what you'd probably do at a job. Don't bother the senior engineers until it's a real problem or something is really broken. In open source, it's actually better to basically raise the flag earlier. Because, like, usually, most contributions do happen on weekends. It could be, like, next Sunday until you can get back to it. So it's always better to give, like, a status update. Like, hey, I did some research. Turns out I have no idea how this parser works. Here's what I found. Anybody who has time this week, like, just let me know if there is any good documentation on the parser. If you want to write something up quick, like, let me know. But I constantly try to ‑‑ when I'm contributing in other people's projects, constantly throw up, like, flags and updates and, you know, update, hey, I tried this thing. In the same comment. I'll edit the comment and basically add an update. Like, yeah, does not work. Let me know if you have any insight or anybody else or you want to point me to somebody else I can chat with. But the opportunity to get mentorship but also connect with other folx in the community and the project, and then you'll individually rub shoulders with somebody who is doing this full time. 
Then they have, like, unlimited access to somebody who can, like, unblock you. 
Yeah. 
Absolutely great. There are so many hairy issues I did. So, Open Sauced, there is a Supabase database. I had to do so much stuff to figure out how to keep it free. 100,000 requests or 100 million requests before you start charging. When I was setting up Netlify Functions to handle the swag shop. Because I didn't want to pay for a $25, like, serverless ‑‑ well, a function service that I could pay for. I'm like, oh, you know what? Netlify Functions I can make it work and coerce. I'm DMing folx like, hey, how could this work? Let me open up an issue. Point people to the issue. And actually Sean who is at Netlify now, working with the Netlify Graph. Also was somebody, hey, I opened up an issue, @SeanGroves. Hey, by the way, how can I get this to work? He'd come through in a couple days. Oh, yeah, take a look at this. Actually turns out it's our bad. Let me go ahead and ship a new release and it will work for you. I'm like, dude, could not even ‑‑ you're unblocking me by the time I wake up, which is super awesome. 
Yeah. So many good experiences with Sean and just open source maintainers in general who are that engaged. That is a good point. The only real issue with Open Sauced is every time I access, I want to eat pizza. 100%. 
[ Laughter ]
All right. So we have time for one more questions and there's a really good one from Charlie that I wanted to ask you. What are reliable ways to find open source issues that relate to the careers we're after? So, like, if a front‑end dev wants to help with marketing sites or, you know, as I mentioned, getting into design. How are you ‑‑ how would you recommend going about locating those to build that experience? 
Yeah. So this is, like, I'm very tactical about my approach. I'm very intentional about this. So, like, maybe this is too on the nose. But, like, there is React‑a‑thon happening this May. I usually go to whoever is sponsoring. If I'm looking for future growth opportunities and looking how can I level up my career in a way ‑‑ at GitHub I'm not working on full‑time engineering problems anymore. I'll usually go find something that is cool, something out there, somebody using it and usually stalk that project. Usually I find people sharing it by what they share as sponsors at conferences or in guest speaking opportunities. 
Who was it? The syntax at FM, usually one of their sponsors is something I'm intrigued enough I'll find an example or a sanity project that is leveraging tools that I want to get involved it. I know I don't want to build another side project and maintain it for a couple of weeks and decide to walk away from it. I'll go into one of their templates and be like, how did you do this? The Next conf, I spent a lot of time trying to dissect how they disconnected their Discord live into their actual conference website. Which now it's a repeatable thing you see everywhere. Oh, yeah, it's cool. So I reached tout Lee and was like, hey, Lee, is that open source? He's like, no, not yet. But a week later, it's open source. So I was able to, like, dig in there and be like, oh, cool, this is how this is gonna work. So I built a prototype for GitHub that we never ended up using because maintaining stuff is quickly ‑‑ if I have to maintain it, it's like, you know what? Actually, didn't work out and we're gonna move on. 
[ Laughter ]
But, yeah, being intentional and finding the companies and projects and engineers that are doing stuff you want to do. Stalking a bit of their projects. Which originally, that was Open Sauced. It was a way to stalk projects without alerting them through GitHub issues or mentions. And hopefully that's a step in the right direction for you. 
No, I think that's ‑‑ yeah, I think that's great. And I think, you know, you also bring up, like, if you want to work on, say, marketing sites, all these open source community projects, like, they need, like, every open‑source project needs a marketing major. Every open‑source event is looking for help with running their website. Go do that kind of work. That builds a résumé. You can go leverage that with companies, too, right? There are tons of opportunities to get involved in this stuff. You'll look around and a lot of this is community effort. Even the Netlify logo was contributed by the community early on, right? So these are things where somebody was like, I want to get involved. They get involved. And it, you know, it really does ‑‑ it lives on and it makes a big impact. So that's a really good way to do it. With that, man, we just breezed through 90 minutes. It doesn't feel like we've even started yet, but it's always so much fun talking to you. I feel like we can go for hours. Do you have any parting words for the chat? Just to send us off at the end of this episode? 
Yeah. If you ‑‑ if you want a friend, you got to be a friend. So reach out to me. DM me. I actually answer DMs pretty regularly. I don't ‑‑ this week's a little crazy for tweeting, but I will respond to you. Answer questions. As long as you promise to go join a community. So, whether it's Open Sauced or whether it's this Discord or the Party Corgi Discord, go get involved somewhere, chat and be valuable there by just, like, emojis are a really great way to show value without feeling like you have to go outside your comfort zone. So a like, heart, favorite would be ‑‑ would go a long way to make impact in other people's communities. 
Absolutely. Absolutely. All right, y'all. So this episode, like every episode, has been live captioned. We've had Jordan here from White Coat Captioning all day. Thank you very much. That is made possible by our sponsors, Netlify, Nx, and Backlight, all kicking in to make this show possible. And we've got a whole lot of good stuff coming up on the schedule, so please go and check this out. We've got, let's see ‑‑ I'm out on Thursday, but next week, we're coming back with some automatic image creation from a Figma template. That's gonna be a lot of fun. We've got Cassie Evans comes back. We're gonna do more animations. That is always a blast. Please mark your calendars for that. We're gonna be putting even more on the schedule, so stay tuned. With that, we're gonna go find somebody to raid. Let's see. Who's live? Let's go see ‑‑ let's go see Michael Jolly. How about that, everybody? So, stay tuned. We're gonna go raid Michael. We will see you all next time.
","[(0, 0.42026597), (1, 0.090936676), (2, 0.48879734)]",0.42026597,0.090936676,0.48879734
"I am new to dev rel, actually, I have a new title this week, head of developer community and… Thank you. Thank you. And you guys are one of the best, like, kindest, most welcoming community to join. So thank you. I’m learning a ton here.So, yeah, I’m head of developer community at Karat. Up until this week, I was director of interviewing. Karat is a company that focuses on interviews. We just do interviews, technical interviews, not sourcing, not recruiting. We do interviews for other companies. And so, for the past year, I’ve been, along with a fabulous team, in charge of hiring, and onboarding, and managing hundreds of interviewers. And so, that forms the basis for this talk.So I want to talk about how we can hire and retain more people who are underrepresented in tech. And before I get into that, I’m going to have to talk about standards. So this is a quote you may have heard before, “I care about diversity, but we’re not a non-profit. We can’t lower the bar.”And it’s a sentiment that I’ve thought a lot about. And my conclusion is, it’s not very helpful, right? Because it’s framing people who are underrepresented as being under-qualified stereotypically as a starting place, right? It’s creating this bias in the speaker’s mind and anyone who hears this that, “Oh, if you’re outside the norm, you’re going to have to prove yourself.”And my experience anecdotally is just that the opposite is true. That people who are receiving a lot of discouragement actually get really qualified to, you know, prove themselves and also tend to have a lot of professional and social skills to, you know, they’re just used to dealing with difficult conversations and situations. But the important thing here is just that this quote is just not helpful.This mental model is not helpful, right? It’s not inspirational, it’s not motivational. It doesn’t actually help us make better hiring decisions. You know, it’s just not helping us connect and grow with the people that we are working with.So I want to give you all a better mental model. This is a street, right? So, like, you know, here’s someone walking down the street, steps down, crosses the road, steps up the curb on the other side, continues on his way, right? Simple landscape works for Mr. Walking.It doesn’t work so great for some other people, like, here’s this baby carriage. You know, it’s going to have a hard time with that curb. You know, actually, it is possible for this landscape to work. Right? Like, that’s great. You know, you just take this classic very efficient circular wheel, and you squeeze it and contort it into this other shape, and, like, it does degrade the performance a little bit. It’s, like, you know, not a pleasant ride anymore, but, you know, it works, right?So what I’m trying to say is this landscape does work for everyone if you try hard enough, right? No, I’m not gonna say that.That’s ridiculous. Like, why don’t we just use ramps? It’s a wonderful solution, you know? And the cool thing about ramps is Mr. Walking here, like, he can still cross the street, right? It doesn’t make it any harder for this situation, right? But it does make it easier, safer, more comfortable for a lot of other people to use the sidewalk across the street.So back to mental models. What I’m talking about here is, you know, we have this minimal viable pathway that we started with. It works with the narrowest, you know, smallest number of user groups, like one and a half users.And what we want to do as leaders and as managers is, you know, we’re striving for a high-quality pathway, right? Something that’s accessible for the most, you know, the most number of people. We want to have the biggest pot of people that are coming in and that we’re hiring, and that are productive in our organizations or in our communities.So, you know, whoever’s having the hardest time, who’s ever facing the biggest challenge, like, that’s what we want to focus on, right? Because if we can make things better for them, we’re going to make it better for a lot of other people too. So, you know, let’s not be scared of those challenges.Okay, for the rest of this talk, I’m going to look at five different milestones in a career pathway and look at, well, what’s one thing we can do to raise that bar and bring more people forward with us? Cool.So I’m going to start with recruiting. So this rectangle, this is representing all the people who might, want to work in some particular role that we’re hiring for. And, you know, there’s a line somewhere where, you know, some people are qualified for this position, some people aren’t yet qualified. That’s fine. That’s just how the world works.Okay, here’s where things get interesting. You know, here’s the circle of candidates who are actually applying. And, you know, what might jump out to a lot of us at first is, “Oh look, there’s a ton of candidates that we’re having to spend resources on who aren’t qualified.”You know, and that draws our attention to, like, what our job descriptions look like? Do we need to make something in bold, maybe increase the font size of our requirements, really make it clear?Like, you know, how do we cut down on having to spend our time with those folks? And this is an important challenge. Actually, one of the reasons Karat exists is to really help us, you know, to help companies, you know, with their pipelines.But there’s another problem here that we want to look at, which is that, and it’s a more invisible problem, right? It’s all the candidates that we don’t see, that we don’t even get to make a decision about, right? Because they’re not even applying.So one of the ways we can raise the bar when we’re recruiting is to do more outreach, less screening out, right? I’m going to get to interviews later. Like, that’s a different part of the process where we get a chance to make decisions, you know, and decide, you know, who moves forward.But when we’re recruiting, when we have job descriptions, for example, like the people who are reading those job descriptions, they’re making the decision, not us, right? They have their own agendas, optimisms, their own cultural context about, like, what requirements really mean in a job description, you know?So that is a challenge we have to face, but we want to be really careful to make our job descriptions clear, accurate. But invitations, everything about recruiting, it’s like we want everyone to come to this party. How can we make everyone, including specific people who maybe haven’t always felt welcome, like, really speak to them and get them to come, so that then we get to make the decision later about what, you know, what those next steps might be?Cool. So now we’ve got lots of great people applying to work at our company or join our community. How do we interview them? What can we do to raise the bar?So one thing we might be concerned about is equity. This is the idea that every candidate is as equally likely as every other candidate to perform their best and demonstrate their skills, right?So here’s an example. We want to hire a DevOps engineer, right? Like, someone who’s very comfortable using Chef, has written some cookbooks before, we get some candidates. And this is great. You know, the two people in the top row, they are experienced DevOps engineers. They would actually be qualified for this position. That’s nice.On the bottom row, whoops, we had some actual chefs. Job description wasn’t that clear. And so, an equitable interview process or, you know, a good interview would successfully figure out, like, who had the DevOps skills and who didn’t, right?And being able to determine what, you know, what are the things we want to look at that’s going to lead to this, you know, accurate assessment of who’s going to be successful. That’s the signal. That’s what we want our interviews to focus on.The opposite of signal is noise. Say inadvertently, it turned out with our interviews that, you know, on the left side, I was just hoping it was mirrored. Good. On the left side, you know, these two gentlemen, they have highly connected professional networks. They’ve interviewed a ton and accidentally, “Whoops, we’ve made a positive assessment to move forward with this chef, not a DevOps engineer, the actual chef.”And, you know, he’s going to have a hard time in this position, right? So that was a false positive. And, you know, that’s very visible, and a lot of companies try to protect against this. You know, you don’t want to be making bad decisions. It can look expensive. You don’t want to, like, overprotect against this, right?Because the other problem is that there was another DevOps engineer who we declined. We made the negative assessment, that was wrong, a false negative, and now we have to spend more time, and money, and resources continuing our hiring process.And, you know, we’re not building our teams as quickly as we could be. So that’s also expensive, but it’s less visible. So what can we do in the interview process to make sure we’re, you know, we’re not missing, you know, those missed opportunities. You know, we want to avoid those as well.So it’s really important to look at the signal, enhance the signal, reduce noise. And one of the ways we can do that, especially to avoid false negatives, is to look at candidate experience.So candidate experience, it’s really important in interviews, right? Hey, if someone has a nice experience, even if they don’t, you know, succeed in the interview, they’re going to tell their friends, they’re going to say nice things about you on Twitter and Glassdoor, that’s really great. And third, they’re actually going to perform better if they’re doing well.When we get nervous, when we get anxious, we have weird social interactions that stress us out. Maybe even when we’re up on stage like this, it impacts how we think, and it impacts our body. I’m, like, really thirsty right now. Right? And so, people, you know, like, your mind actually slows down when you get stressed, you, like, stop taking in input and processing things as quickly, you forget things.So helping people have a good experience actually helps them perform their best. It’s not a cheat code, they still have to, you know, demonstrate their skills and pass the interview. But, you know, you’re able to, you know, get a good assessment that’s equitable.It’s also important for interviewers too. You know, when an interviewer is able to connect with a wide variety of people that will actually cut down on bias and help them do a better job.So one of the things you can do is look at intentional communication. So everything we say and do during an interview is going to fall into one of these three kinds of communications, right?Rather clarifying what the candidate should do or providing encouragement, you know, being an active listener, you know, engaging with them, being supportive. Maybe we’re giving hints.This is, like, a tricky thing, right? Because if you tell the answer to someone, you’re reducing the signal because they’re not showing what they can do, you know? But sometimes someone gets stuck, and we feel like we’ve exhausted the signal in this area. We have 20 minutes left in the interview. Let’s move them over here to see if we can keep going, explore, you know, something else.So, you know, for an interview program, one of the things you want to do is to make sure that all your interviewers know exactly when and when not to do each of these three things, and how that impacts or doesn’t impact the assessment. So everyone’s on the same page. Cool.We’re doing these great interviews, got all these candidates coming through, but we still have to make hiring decisions.So one thing we might be concerned about is consistency. The outcome of each interview depends on the candidate’s abilities and not on external variables, right? Like, how a candidate does in an interview, it shouldn’t matter who the interviewer is, right? It should just matter on who the candidate is.You know, here’s a candidate, wants to get hired, here’s all the people who could interview them. You know, one of the interviewers, one of the engineers actually is the person who referred that candidate, you know, another engineer. They were up all night, on call, there was an emergency, they’re having an awful day today, super upset.Someone else, they just got back from vacation, they’re, like, not sure what’s going on. Is this a junior or senior role? Like, what questions should I ask?But ideally, the program sets all these interviewers up for success, they all come to the same conclusion. That would be a consistent, you know, interview process and consistent hiring decisions. You know, and if they don’t, that would be bad. That’d be something, consistency that’d be kind of weird, right? Like, this candidate isn’t changing.So most of us can’t use our time machines to go back in time and re-interview a candidate with a different interviewer just to check what the situation is. Are we consistent or not? How do we improve?So what we have is we have these interviews, we’re trying to make a binary decision, yes or no, do we move forward? And the thing that sits between those two is the write-up. And so, the way we can level up our hiring decisions is to really get explicit about our write-ups and make structured write-ups.So we might start with, “Okay, you just come to this debrief with like whatever’s in your head or some random paragraph.” No, we usually try to specify like, “Pay attention to these dimensions, you know, assign stars to these things.” We get a little bit of that apples and oranges issue, like my three stars is your four stars. Okay, so let’s get even more explicit. Let’s have some checkboxes and radio buttons and, you know, write down what we’re actually observing.If we have this really nice rubric for every candidate that’s coming through an interview, but we still have to come to this yes, no decision. And so, we want to provide guidelines. Any interviewer or engineer should be able to, or dev rel, whatever the position is, right? You should be able to look at this rubric and come to the same conclusion about whether or not this person should move forward in the process.At Karat, we’ve done over 30,000 interviews. So we actually use an algorithm to take the observations that are coming out of our interviews to figure out, you know, what the recommendation would be for a specific role.And that gives us really nice data. Like, all this structure, once we have reliable, consistent interviews, we now have structured data, we have signal low noise, and we can then analyze, you can look at our questions and, you know, calibrate them against each other. We can, you know, look at adverse impact, how are men coming through our interviews versus women.And so, we can use all this information to then inform and improve the interviews themselves. We can look at, you know, the quality of different sources, all sorts of things.Okay, so we’ve just hired all these great people, we’re feeling really pumped, and now we want to set them up for success.And this is a situation you may have found yourselves in before. You have a really nice team or a really nice community. It’s kind of small. Everyone’s, you know, communicating well, sharing knowledge, equal contributors. You do a bunch of hiring, you’re growing, everything’s going well.But then you get to this point where you realize there’s a few people who are really loud, kind of making all the decisions and essentially informing other people of what they should do. And other people who may have been quite senior in your community previously, very strong contributors may have stepped back. They’re kind of, you know, not contributing as much anymore.And, you know, to some extent, hey, I’m a manager. I like making decisions and telling people what to do. So, you know, that’s not the problem or it might not be the problem. But the problem here is that it’s unintentional, right?There was this vacuum that some people perceived, and people who were loud, like, stepped in and stepped forward and other people stepped back. And that wasn’t, you know, it wasn’t necessarily the case that they were good decision-makers or good facilitators of the community, it just, you know, felt like they needed to fill that space. So to really raise the bar to enable everyone, fill leadership vacuums with intentional leadership.And two things you can really do to impact that are define roles explicitly, this is what it means to be a mentor. Like, “this is how you become a mentor, this is what it means to be successful.” Or, you know, “this is how you become a reviewer, and this is what it means to be successful.”And, you know, as management or leadership, you’re trying to provide some oversight to make sure people are on track and doing good things, getting rewarded for, you know, if they’re doing good things, you know, getting promoted.And define how decision-making works. My favorite is Sam Kaner’s, Facilitator’s Guide to Participatory Decision-Making. It’s a really nice look at how to make sustainable agreements. There’s lots of different decision-making rules, consensus, majority rule, person with authority makes decision with input, and it looks at how and when to use each of those things.But, yeah, so you want to recognize when people are doing great things and then, you know, promote them to fill those vacuums.You know, the good thing here is that we’ve just gone through a bunch of best practices for, you know, helping to assess people, and hire them into a role. It’s very similar when you want to assess someone and move them forward in a career path or even to, like, a role that might just be, like, a badge.So just to summarize, invite proactively, right? Shouldn’t just be the squeaky wheels, who are getting raises, or promotions, or, you know, who, you know, and is turning you into like a reviewer in a community.Look at signal, you wanna enhance the signal, reduce noise. And use explicit assessments. You know, in code reviews, sometimes those are just random paragraphs, but there might actually be a little bit of a more structured form that someone could be filling out, so that you’re collecting data about how someone is doing and, of course, fill vacuums intentionally.So I want to look at that explicit assessments. I’m nearly done with this talk, but just to play devil’s advocate a little bit. You know, at Karat, all of our interviews are recorded. So every interview has a second interviewer, a more senior, you know, intentionally-filled leader or interview reviewer watches every interview or reviews it in some way to give feedback.And that review is structured itself, so we’re getting data about how aligned each of our interviewers are, and, you know, how are they doing on candidate experience or, you know, following certain guidelines.And we had an interviewer say, told me recently when I was asking for feedback, she was like, “You know, some people might think this is a little creepy.” But I was like, “Phew.” But I trust leadership because I know they’re looking out for me. Instead of having to advocate for myself, which she was very uncomfortable doing.She, you know, she’s outside of the norm. She’s a person of color. That’s not a reason to not, you know, want to self-advocate, but she wasn’t comfortable doing that, and she felt like my trust has increased because I was proactively promoted. People were looking out for me.And so, I hope that is a takeaway from this talk that really talking about management and leadership as a relationship between people and how can we create healthy relationships where, we’re proactively taking our power with responsibility, to bring people forward and really look out for folks and help them stay on track. And then celebrate and reward them as they do good things.So that is my talk. Thank you so much.","[(0, 0.23343885), (1, 0.1418577), (2, 0.6247034)]",0.23343885,0.1418577,0.6247034
"Hello, everyone, and welcome to another episode of Learn With Jason. Today on the show we're bringing back Brandon Roberts. Brandon, how you doing? 
I'm good, Jason. Glad to be back. How are you? 
I'm doing great. I'm happy to have you here. I am dealing with a little bit of audio lag today, so I apologize to everyone in the chat and for you for having to put up. Looks like I'm doing about two seconds. I'm going to do my best to not stomp all over the conversation today. 
So for folks who aren't familiar with your work, didn't see your previous episode, do you want to give us a little background on who you are, what you're about? 
Yeah, I'm Brandon Roberts. I work as a dev rel engineer at Appwrite. I came on the show a previous time and talked about state management with NGRX and Angular. So that was a pretty fun episode. Yeah, glad to be back here to share again. 
Yeah, I can't wait. I think this is going to be a really fun one because we're going to be talking about building apps, building back ends. So can you maybe just elevator pitch for us, what is Appwrite? 
Yeah. So, Appwrite is a back end as a service. That's the elevator pitch there. Back end as a service. It's all open source. It's self-hosted. If you're familiar with Firebase and that sort of project, it's similar to that. So a fully, 100% open source -- we call it a 100% open source alternative to Firebase. But yeah, it's self-hosted, gives you a lot of things out of the box, and I'm sure we'll get into some of those. Database being one of them, and authentication and other things. 
It runs as a set of Docker services. So you can run it anywhere on your machine. Basically, anywhere you run Docker. You can run it on your own stack is one of the things. It's all driven through that kind of take. So, yep. 
Nice, nice, nice. And so, you know, when we're talking about an open source alternative to Firebase, it conjures a pretty powerful image. You might think people reach to Firebase for all sorts of problems. So it's exciting to have an open-source version of that because I think we're all -- you know, we want it. Everybody loves open source. 
So I think one of the things that always helps me is just to start kind of thinking through, like, where does a particular piece of technology shine. So if I'm coming to Appwrite, what's, in your opinion, an ideal use case of Appwrite? What am I going to build that's really going to show off the best of it? 
Yeah, I think that for Appwrite, it's a few things. If you're wanting to manage users or store data in a database, store files, there's a collection of things that you could use for Appwrite. But like I said, anything with user management. 
You could think of, I guess, a simplified example would be building a part of Netflix. Netflix, itself, is of course a really complex application. But it has some of those core things you could use to build something like that as far as authentication, user management, storing data, storing images, and having that kind of real-time access to it. 
So with that kind of foundation there, it kind of bridges that gap to get you up and running quickly in something that you want to -- a lot of things that you want to build that kind of have those user interactions or user flows. 
Nice, nice. Yeah. So I know, the chat is calling out I'm having some audio sync issues. I do apologize about that. I'm trying to figure out what's going on with those. But I think we might just have to live with them today. 
So yeah, I think -- I mean, that is always kind of a really interesting problem, figuring out what's the right tool for the job. So when you're talking about something like a Netflix and the things that you can build inside of that, I just -- so one of the things that you're bringing up here is this idea of like admin dashboards kind of. I'm a user. I need to be logged in. I need access to my things, as well as public things. So that is honestly one of the things I think is most intimidating. 
I was just talking about this yesterday. People who are learning new -- who are new to development, when they first start up, it's very easy to see the first couple of, like, steps on the road. You write some HTML. You see the page update. You're like, oh, man, I'm a wizard. I can make the computer do whatever I want. 
Then you do some CSS. Oh, man, I can make this look however I want. That's amazing. Then you start doing JavaScript. It's a little more abstract. You want to do your ambitious app idea, and almost everybody lands on I want to build an app where people can log in. 
The gap between I'm going to edit this HTML and see something change on the screen I'm going to have an app that somebody can log into and have a user account, like, it's just an enormous and very demoralizing gap to have to cross, right. What I think is interesting about tools like Appwrite is that it feels like that gap is narrowing. Like, you still have to learn how to use the JavaScript and how to do those things, but you're not thinking so much about, like, storing user sessions or validating tokens or the really complicated stuff that comes in with trying to do this sort of work. 
So have you -- like, are you seeing people using Appwrite as a way to learn? 
Yeah, I definitely think it is being used as a way to learn. Like you said, there's a bit of a cliff there when you go from -- like, I don't even like, myself, implementing authentication for projects like that just because there's a massive amount of information you need just to do that correctly. 
Even as a new user, you kind of look for those opportunities to get going quickly because those are the quick wins, as we call them, where you want to use a certain service or certain tool that gives you a certain set of functionality so you can do that and kind of move on to the next thing. That's kind of where Appwrite shines, is giving you some of those APIs and things that you can use quickly but also being built on technology that's proven and out there so that you're not necessarily having to relearn a new thing. 
If you take apart the pieces, you'll find familiar territory there. So, yeah. 
Nice, yeah. I do like that. I think one of the things that is maybe a criticism I've seen levied against Firebase is that it feels a little magic. You install this SDK. You can't really look under the hood of the SDK too much because it's all kind of proprietary stuff. It works, but you're like I don't know why. Or you decide you want to make a small tweak to it, and you can't because it's all part of this sort of mystery box of software. 
So I do like the idea of if the tool is open source -- and open source doesn't always mean easy to work on. But I do like the idea that you can at least go all the way into the package and figure out what's going on and how that all functions. 
So I guess what do you see as, like, the biggest hurt toll overcome? You know, we're talking about this big cliff between first project and building something more ambitious like an app dashboard. For a learner, what do you see as the biggest hurdle, and how do you think they should -- you know, what's a good way to start figuring out how to overcome that? 
Yeah, I think the biggest hurdle is, most of the time, making the choice of which pieces are you going to put together in the puzzle. Because like I said, there are so many choices out there, frameworks. Any number of frameworks to choose from. Any number of technology to choose from. So there's definitely that hurdle there to get over, that mental hurdle to get over there. 
Then, like I said, trying to find the tool that kind of fits what you want to achieve and even what you want to build today and even what you want to build later on. I think for new people, that is a skill that you kind of have to learn also. And you kind of have to learn that by trying, to work with new things, work with different things. Of course, open source has been out there forever. So it's always been there and available, but even just getting open source itself is a challenge that you have to -- it's a skill you build over time, I guess is what I'm trying to say. 
So picking the right tool, planning that out is something I would tell a new person to kind of hone in on. That'll help you when trying to just build the right -- pick the tools to build the right project. 
Yeah, I think that's a great point. And it actually dovetails into a question from the chat. How do you plan a project? And that's such a big question, right. So I think for you specifically, you were talking about choosing tools and everything. 
How do you make -- what are the heuristics you're using, you know, as a developer to choose between one tool or another and to limit the scope and make sure that you don't get into a situation where you're going to start this project and then realize, oh, god, I don't have the nine months I actually need to build this. 
Yeah, I think -- yeah, that's a good point. The things that I tend to lean towards are those things that I don't want to deal with. That usually relates to, like I said, if you're new, then you're going to want to dive into everything. Then you kind of find out the things you like to do versus the things you don't like to do. 
So when I'm picking a tool, it's usually I'm picking a tool that solves a problem that I don't want to deal with right now or I'm not necessarily looking to drill in, like you said, nine months to build my own solution. Or even whether I choose to run it on my own, you know, computer or run it somewhere else. 
I think those are choices that I look at. So it's time to ship, I think, is the biggest thing there is how I go about trying to plan a project. Like what am I trying to build? How long do I reasonably think it's going to take, you know, given the constraints that I have? And actually, I kind of gave a talk on this recently. It was talking about, like, open source in general, like what decisions do you make given time constraints and resources and ramp-up time. All things that I kind of take into account when trying to plan a project and think about the things that are going to impact those timelines. 
If it's a side project, there's always infinite time. But when you're trying to get something out the door, that definitely constrains you in a way. 
Yeah, yeah. No, I think that's -- I kind of have the same general approach of thinking about, like, how much time do I have and what I do need to eliminate from this project for me to finish in this -- you know, I want to do this in a weekend. Probably not going to implement the full, like, rating and comment system that I had in my head in a weekend, right. 
So scale it back. Scale it back. What can I actually do? And I think, you know, that's also part of are you trying to make this a business, are you trying to learn, are you trying to, you know, teach yourself a new concept? Are you trying to, like -- you know, what's the goal of the thing you're trying to build? And just scoping down appropriately so that, you know, if it's a business, yeah, put a little more into it. If it's a learning project, I don't know, maybe don't worry about the stuff you're not trying to learn. You don't have to get that part right. 
But yeah. So, okay. I think -- I have so many questions about Appwrite and how we get started, but I think it's actually going to be easier to just show how this works rather than tell. So why don't we jump on over into that view. 
All right. So here we go. We're over in the pair programming view now. I'm going to start by doing a quick shout out. We have Rachel doing the live captioning today from White Coat Captioning. Thank you for being here. That is made possible through the support of our sponsors. We've got Netlify, Nx, and Backlight all kicking in to make this show more accessible to more people, which means a lot to me. 
We are talking to Brandon Roberts. If you don't already follow Brandon, you should go make that happen. 
Yeah, appreciate that. 
And we're talking today about Appwrite. So let me drop a link to Appwrite in there. And that is everything I know about what we're doing today. (Laughter) 
That's why I'm here. So we can drill in. 
Absolutely. So what should I do first? What's my first step? 
Yeah, so the first step to getting up and running with Appwrite -- well, the prerequisite is you need to have Docker installed on your local machine. So that's a step that you can find through the information on the Docker website. 
So Docker lets you run containers on your machine there in different services. We'll just kind of -- you can share a link to that. I'm sure we'll have a link to that in the chat here. 
Once you have that up and running, there's a command you can run through the Appwrite documentation. Now, I've gone through and done some of this legwork already, but we can show how you -- after you have Docker set up, you can go to the Appwrite homepage and find the command to get Appwrite up and running on your machine if you have that there. 
Okay. And I'm realizing I don't have Docker installed on this machine. So I'm furiously downloading it in the background. 
That's okay. I set up one that we can use for this show. But if we click on the get started there on the Appwrite homepage, we can show the command you would need to run to get it running locally. But yeah, I have an instance set up that we can use for today. 
So if you go up to the top there, and getting started, that button there. You click that, and it'll give you -- the get started there at the top. It'll give you the dialogue. And this is the Docker command that will get Appwrite up and running locally if you have it on your local machine. It has the different commands for your particular operating system. 
So if you wanted to use that, you could. But like I said, we have one that we're going to use for today that I already have up and running. And just a quick item. We also have one-click setups that we have on our doc site also. So if you're wanting to try it out and not install Docker on your local machine, then you can try those out also. And those will be under the installation docs. 
Nice, nice, nice. 
Yeah, because we're always looking for integration with other -- in other areas also. 
Very cool. Yeah, so the Docker install. And here's Digital Ocean GitPod. Very nice. 
So the ability to self-host is always there. But for those who don't want to run it on their own server or have that maintenance side of things, you can run it somewhere else. 
Nice. Okay. 
We can go to the -- I shared a link with you on the instance we have running here for our Appwrite that we can take a look at. This is just the initial console. 
And so this is the one that you -- you're hosting this on your own project. So you've spun this up and deployed it so we don't have to run Docker on my machine today, which is probably a good thing. If I try to run Docker on top of OBS on top of everything else we're doing, I think this thing is going to fall over on me. 
Yeah, we definitely don't want that. We want your machine to stay running smoothly for this. So, yeah. 
Okay, great. So we're looking at an instance of Appwrite. Once you've gone through the steps of deploying -- or setting up Docker or deploying Digital Ocean or whatever the process is, I'm going to be looking at something like this. This is the Appwrite console. 
Yeah, I've done a little bit of setup here, but you would set up a username and password as your root account for the Appwrite instance. After you get past that part, then you come here to the dashboard where you can create projects for Appwrite itself. 
Gotcha. So I'm assuming the first thing I want to do is create a project. 
Yeah, we can create a project. Click the create project button, and there's a couple of options here. Each entry project has its own unique ID. You can generate a unique ID by just leaving the default there. Or you can click the pencil there by the side of that input box and choose your own ID, if you want to do it that way. 
So we can choose -- we just enter vote for the unique ID for this project. Then for the name, you can just give it a description there as far as -- a plain-text description of what the project is. So we can just call this Learn With Jason or voting. Whichever way also there. 
Yeah, Brandon is a dev advocate for Appwrite. That's what we're learning about today. Now we're creating the project down here. 
Yes, it should have created the project there. Yeah, click create. Okay. I guess it just took a second there. So there's the list of projects. This will be the live voting app project we're going to look at today. 
So you can have as many of these Appwrite projects in your instance. It gives you these features and functionality out of the box there. A few of those being database and storage buckets and also web hooks there and API keys, if you wanted to connect to Appwrite from another server. That's another good use case for it there. 
Then we support multiple platforms. These things we're looking at in the project area. Then when we get into the app part of things, we'll also see that. 
So you can add different platforms. Like I said, as you mentioned before, if you're doing like a web SDK or even support for Android or iOS or other frameworks we don't have specific SDKs for -- I think we have 12 SDKs so far. But even if you didn't want to use those, you can also roll it. But these are just some of the platforms we support out of the box. 
Nice. 
So next, we can look at the -- we can create a web app here. I think it already has one for local host. 
It does, yeah. 
And for this, what this platform does is if you're building a web app, we want to avoid our nice friend that always tends to come up and bite us when we're trying to connect from web app to like an external service. So you can add local host here so it'll know to bridge that gap and not give you those errors. 
What we normally do is set that to local host. Or even if this were your own deployed application, you could use that, too, for that. And it'll just be the host name itself and the name for it. That'll help that connection there. 
Okay. So this was already a web app. 
Yes, yes. That was one that was already there, yeah. So you can have multiple ones. Like I said, if you wanted to connect from different sites or different domains that you have hosted there, then that works also. 
Gotcha, I understand. Okay. So I didn't need to create this one? 
Right. We could have just left the local host one there as it was. 
Gotcha. 
So next, we can go into the database area here and look at the collections and create one of those that we'll need for the voting app here. Let's go back out to the -- or if we click the plus at the top, let's create a new project. I think we have some leftover in here. 
Oh, like it picked up the -- 
Yeah, it seemed like maybe there was some data that was previously in there. Clean those out. But, yeah. So you just created a new project. 
Heading back to the console here. 
Yeah, then that way we can see down at the bottom -- yep, so now we have an empty project there with a platform that we can add from scratch for a local host. 
Now we're in database so we don't have any collections there. If we click on add collection, this is a similar thing. You can give a collection a name or have it be auto generated. So if you want to just type in something that's more human readable, you're free to do that. And we'll use this later in the application itself for that side of things. 
So I saw, kind of cheating ahead here, you had listed item and vote. So the items are going to be the things that we're voting on, and votes will be when somebody says I like this. They'll be voting for an item. 
Yes, that's correct. 
Okay. So here is our thing, our items. 
So after you create a collection, then you can kind of choose the permissions that the collection has. Whether it be -- you can have it to where you can have permissions for the entire collection itself or just the -- or each individual row. You can have a row or a document level permission in there. And these are pretty flexible in that way. You can set them to be for a specific user or even a specific team or different groups of people. However you want to group that functionality there. 
Question from the chat. What database is this using under the hood? 
Yeah, good question. It's using MariaDB under the hood right now. But part of that flexibility is that it doesn't just support MariaDB. But if you want to use a different database solution, you could use that also. 
Very cool. So do I need to set any permissions here? 
Actually, you do have to set some permissions. Because each -- out of the box, you do have to authenticate to access any of this data. For this particular one, we're going to set the permission in the box to roll and colon member for both of those. If you wanted to make this more granular, you could. Roll is a keyword for that. And member just means any authenticated user. Those are the conventions there. There's also a link there that people can visit to learn more about how to do that side. More about the permissions and how you can set them for different groups or teams. 
Gotcha. 
After that, we can scroll down some and click update to update the permissions there. Also, those permissions will be set for those items. Next we'll go into the attributes because that's where we'll -- this is where you'll kind of model out the things you want to store there. 
And there are some of the attributes we have out of the box that you can define. It's a pretty good selection of choices there that we'll choose for that. So we'll go to the string attribute there for the items. Sorry, trying to see which one we got going here. So, this is for the items, correct? 
Yep. 
Okay, cool. So for this one, we'll use a string attribute and name this string image or image URL for that side of things. And this will be just one word. 
Oh, sorry. We can cancel this one and use a URL attribute instead to kind of match what we want to put in there. 
Is this like what I'm going to -- and this is what I'm going to, like, call from the API. So I want to name it like a variable. 
Yes. Well, this is the collection. The items will be the collection. And this will just be one of the fields in that collection that we'll list out in the app itself. 
Gotcha. Okay. So create that one. 
So we have that one there. 
Do I need any others? 
No, that'll be good for this one, for the items. And we can go ahead and add some entries to that database there. So if we go to add document there -- let's see. I may have to send you the link here. I just chose some stub images that we can use for that. So I sent one of those over. 
We'll just create two or three of these and use a different seed value for this one. This particular service just, like I said, generates randomly. 
Oh, so this just grabs -- 
Yeah, it just generates a random. That way we can use that to display the list of things that we'll vote on. And like I said, we could have put any image in there. 
Wait, am I doing -- I'm putting in some values, and it's giving me the same. 
Yeah, you have to choose. If you put in a different value for the seed, it'll give you a different image. The Appwrite one is the seed value. So if you change that value. 
Oh, I got you, I got you. 
It'll generate you another image. 
I understand. All right. Let me add a few of these here. So we'll get one. 
Yeah, we can go ahead and create about two or three of those. That will just bring you to the edit document there. 
Okay. So add another one. We'll call this two. And let's add one more. 
Yeah, one more will work. That way we'll have a good set of images to vote on there for that. So I think we're good. So next we can create another -- we'll go back to the database and create one more collection for the votes. 
Like I said, same kind of deal here. We can add votes and give it a name. Then we'll go through and add the -- or set up the permissions for that collection, which can be the same as what we added before. Yeah, so then we can go to attributes and add a couple fields there. 
We just use a couple string attributes here for tracking the particular votes. So we can call that one the item ID because we're trying to use it as a reference, kind of a reference field for the other -- for the items table. Yeah, we can do that as required. 
Then after that one, we'll add another string attribute for the user ID. This will just be the user that's logged in for the vote there. That can be required also. 
Okay. 
Then we'll create those two. And that'll be it for as far as our collection goes. We got items, and we got votes to kind of track the votes there. Now I believe we can switch over to the app side of things and look at how we can vote on -- use this data to submit a vote for one of those particular images. 
Yeah, let's do it. 
Yeah, so I believe I have a -- we can use this to -- I created a sample project here so we can clone that project to get that up and running, which is a pretty straightforward React application we can clone for this. 
Okay. Do you have the link to that handy so I can drop it in? 
Yeah, sure. I'll drop that link there so we can drop it in the chat there. And that'll be, like I said, the app we'll use to get up and running here. 
Okay. So I'm going to just fork this over to Learn With Jason. And then we'll start -- 
Yeah, once we get to here, like I said, it's pretty straightforward. It's an app we can clone and get up and running. Eventually, like I said, you could end up deploying this to Netlify, if you wanted to. That way other people could access it. But yeah, we can roll with that either way. 
Yeah, let's see how fast we can get there. Let me see. Let's open this up. 
Not sure what your preference is for yarn or npm, but you can use yarn to install the dependencies there. 
Okay. Yeah, we've got a yarn lock. So I'll use yarn. 
Okay. 
Then let's poke into the package JSON here a little bit. All right. So this is a Vite project. You've got the Appwrite SDK installed here. 
Yeah, and like I mentioned before, we have SDKs for different platforms. And the web SDK gives you a library you can use with Appwrite in your web app. So yeah, just had that installed there so we can use that. 
Nice. Okay, so I should then be able to run yarn dev. This'll start our project up. Let's head over here, open it up. Now we've got the basic setup here. Am I safe to assume this doesn't work yet? We got to go in and add the pieces? 
Yes, that is correct. 
Cool, okay. So let's poke in the source code a little bit here and get our feet under us. We have the standard main.jsx. Nothing out of the ordinary is in here. 
Yep. 
So then, let's see. 
Yeah, we have two components in this app. One for the log-in page and one for the vote there. Like I said, pretty straightforward setup there with React Router and some CSS for styles and things. 
So, this is the one we're looking at right now, which is that log-in form that has nothing hooked up to it yet. Then we've got this vote form, which it looks like we're expecting eventually to get all of our items and whether or not we voted on them. 
Yes, that's correct. So yeah, just some HTML we can use in there. The first thing we want to do is connect Appwrite to the project that we created in the Appwrite instance. So if we go under the source folder, we can create a file called api.ts. And this'll use the Appwrite web SDK to set up that connection. 
So if we want to import Appwrite from the Appwrite package -- and it'll be as an object import with the brackets, and it'll be in upper case from there. 
Got it. 
So next we want to set up the end point that we'll connect to. And we can do this through creating an instance of Appwrite itself. So we'll export a const. We can name it API. And set that equal to new Appwrite. A new instance of Appwrite. And we don't have to pass anything to that itself. Yep. 
Okay. So next we'll set the end point. So we can use the api.setendpoint method to tell it where to connect to, basically. Here we're going to use the one that we already have up and running here. And I will send you a link to that in the chat here. 
Do we find that in here, like if we're looking for one of these? 
Yes, that's correct. If you go to the project and go to the settings, if you click on the settings icon there under the project name -- or sorry, there at the top. If you go to the home, yeah, you'll see the API end point. You can click on that and copy that into the project. Yes. So we can just use that one. 
The next thing we'll do is set the project ID, which is the same one that we entered before to create -- when we created the project. And I know we did this a couple of times. But the project ID is there also, right above the API end point. 
Got it, got it. Okay. 
So if we go to the next line and do api.setproject. 
Okay. 
Then use that. So essentially that's what we need to connect Appwrite to be able to start using the web SDK in your application itself. Just to set up an end point and set up a project. You could also use it if you wanted to use it on a server. Like I said, you could set an API key. But we'll stick with that for now. 
Okay. 
So next we can go to the log-in form. The log-in form is what we'll use to authenticate -- we'll just use an anonymous authentication here, which is supported by Appwrite. We already have the log-in method here. Just standard syntax. So the next thing we want to do is to create a session for the user. 
And just to note here, these are promise-based APIs. If we want to use async await, we could use that. What we're going to use here is -- we'll create a session variable and store the results of this in that variable. 
Then we can use await and then api.account. Then create anonymous session. We see some of the other -- create anonymous session should be there at the top. You can just call that one. 
That's nice that you've got that flexibility in there. 
Right. And the next thing we want to do is to set the user -- and you have a callback there to set user. We want to pass that session to the set user function there. 
Some of that part was set up already so we can have that set at the top level. In case you want to wrap your entire application in some logic there to do that. 
Right. So just to walk through this really quickly, we're using standard React state. We have an empty user to start. And if there's a user, we show this vote component. Otherwise, we show the log-in -- I guess we show the log-in form no matter what. 
Yeah, if you go to the homepage, it'll show the log-in form. Then we can use that to log in there. And we can add the -- like I said, if you wanted to have a use effect there in the app component to check whether that user is already logged in, then we could use the API. We can use that API there also. So when we get to the vote page. 
Okay, gotcha. 
So after we -- 
Cool. Okay. 
After where set up the log-in with the anonymous session, then we can navigate to the vote page. 
Okay, great. 
So essentially, that's what we would need to connect the authentication, anonymous authentication method from Appwrite to our application itself. 
So theoretically speaking, we can -- let's console log this session, and let's just give this a try, right. Like, we're here. We should be set up. I'm going to go to my console. And I'm just going to put in a name and log in. 
Yep, and we can go back -- 
Oh, yeah. All sorts of cool stuff. It can show what browser I'm using. That's nice. Cool. Okay. I got you. 
Yeah, a lot of that information out of the box there. One thing we could do is also capture the name. Like I said, we're using an anonymous authentication there, but if we wanted to update the name, we can go and do that also. But we can use that how it is for that part now. 
So yeah, after we log in, we navigate to the vote page. We have credentials there. And like I said, if we need more use effect in the app component to check whether we're already logged in, we can set that user when the app starts up. 
Yeah, so if we have time, we can go in and do that. I think for now, I just want to -- okay. So we've shown authentication, which this is pretty excellent that it's that quick. And I know we're using anonymous auth. Chat, don't get too up in arms about that. 
The speed with which we were able to just quickly set up the basics of authentication to just sort of prove the point, right, is really fantastic. Now we're looking at a vote page that you need to be logged in to see. So if I go in here, there's probably something I can clear in my session that'll get rid of all the things. 
Yeah, if you go under -- we can actually do this in the console itself, in the Appwrite console, if we go back there. And you go to users. You can see that you'll have a user logged in there. You can click on that particular name that you used to log in for that account. And it'll actually log that person out, out of that particular session. 
So if you go under activity, I believe it is. Sorry, maybe under sessions. Yeah, you can actually click the logout button to clear that session. That person will be no longer logged in if they try to access or try to use that method there. And it'll be cleared for that. So now we don't have -- 
See, now that we're not logged in, it won't let me see the thing. I go here, log in again. And now I can see the thing again. I mean, it's just nice. It's nice to be able to prototype something like this out. We're not dealing with any super-secret information. We just want to show how it works. So you can see the power, chat, I hope, of how fast you could prototype something using Appwrite, given that we're less than 30 minutes into this and have already built a full log-in flow for this app. 
Yeah, definitely. And I've used auth before, and I'm glad there are things like Appwrite to handle this for me so I can move on to the next thing. 
Yes. Okay. So I think the next thing, speaking of which, is going to be to load these items in. 
Yes. So if we go back into the vote component here from Appwrite, in here is where we will load in the items from the collection there. And we can do this with a use effect that takes a callback there. Yeah, just empty array. Pretty straightforward there. 
We can use the API again. You can use async await here or whatever your preference is there. Sorry. If we use the -- if we put the async on the use effect itself, whichever way you want to do it. 
Does that work? Doesn't it yell at you when you put an async on this one? 
Yeah, I think it depends. It may not yell at you here, but if it does, then we can work with that. So if you use the items equals API and then we have the database property here we can use to query items from the database. 
Like I said, we have multiple ones here. Basically crud operations that you can use to get documents. These match up with kind of what we modeled in the collection there. 
So the collection ID will be the one that we entered in there. So we go to database and items. And you can find that under settings. 
So I need to change this. Oh, it's under settings too. Okay, yeah. Collection ID is item. There's my copy/paste. 
Yep, so we have the item there is. And then we can set the -- then that'll give us the -- it'll give us two things. It'll give us document, and it'll give us an account of those items in there. So you can use items.documents to set that to the array there. 
And we may have to modify -- I guess depending on what we name the -- if we scroll down to the HTML there, there will be an image. It should be an image anchor tag there. There it is. So image source. 
Image URL. 
Yeah, we just have to update that to match. 
Make that into what I called it. 
Yeah, what we had there. And I think the other parts are there already. 
Let's psi this and see what we got. 
Hey, look at that. 
Nice. Nice and easy. 
Yeah, so we were able to, like I said, list the documents from our items and bring those in, just querying those from the API. You can also have more specific queries. You don't have to get all the documents every time. So that's there also. But that's just part of the additional API that we can use for that. 
Cool. Yeah, okay. So we've got -- go ahead. 
No, that was it. So we got the list of -- 
So it looks like from here then we've got the -- uh-huh. The list of images is going to give us -- we have to choose one of these. Then once we've chosen one, we're going to vote on it. 
Yep, click on one of those, and then have the vote. So we already have the items loaded there. So to select the one that we want to click on, we just need to add a click handler to the image itself to set that. So if we just go down to the image and have the callback there. We can use the set selected to the item, and it'll be the item dollar ID. Yeah, that'll work. 
And like I said, this is just to kind of connect the things there for when we actually click on the item to select it. 
Mm-hmm. And it looks like it's got a class name for selected. Item ID. If the item ID equals selected, which now we're setting that. So theoretically speaking, we should see the UI kick in here. So I'm going to reload. 
We may need to -- well, it's probably because we don't have the effect in the app to set the user when you reload the page there. So it's probably still keyed off of that. So let's go back. We can probably tweak this quickly. 
If we go back to the app component in the application itself, we'll just add a use effect here. Then add the -- use the API import. That can be simple there. Use api.account.get. That will give you the current user, if they're logged in or not. 
Nice. 
We can do the same thing here. That'll be a promise that's returned by the .get. So whatever the result of that is, we can set that to the user -- set the user to the result of the data that comes back from that. 
So after that, yeah, we can just set user from the account.get. And do we need -- I was going to say, we may need to put in a wait in front of the API for that. 
All right. So now we've got the account loading. So theoretically speaking then, when I go to vote, it shows up. All right. It does what I want. Now when I click, I get my selected item. 
Yep, and like I said, the way we had it set up to where the user had to be set when we refresh the page, if you wanted to have that wrap your entire application there. 
So yeah, we got our items loaded here. Now we can actually go on to actually vote on one of the items after we have it selected there. We have the submit here and the vote function that doesn't have anything in there. And we can use that to submit the vote to the collection for that particular item. So for here, we can grab the -- we can actually use the API again to create a document for this. 
So if we use the API -- like I said, it has methods on it to create and work with documents. So we can use api.database here. And create document. This will give us a collection to work with. But this will be the votes that we want to use. Like I said, if you generated a random -- or unique -- ID for the collection, you can always go into the console and figure out what that is. 
Then the document ID is going to be the unique ID for that particular record. So in this case, we'll have the -- we can use -- and we also have a pre-defined string that you can use here called unique. So if we add a string here and use the word unique with -- like you're calling the unique function, you can use that inside that string there. 
So that just signals Appwrite that it should generate an auto unique ID for you, for the data we're going to enter there. So the item ID is going to be -- 
And if I remember correctly -- 
Yep. 
Selected, right? 
Yes, we got the selected one you set when you click on the particular item there. Then the user ID is information we don't have yet in this particular -- well, actually, we do have the user. 
Because we passed it in. 
Yep. 
Okay. So we've got our user. So this should do the thing, right? This'll -- 
Yeah, as far as -- 
Do we need anything else? 
No, as far as creating a document, we should be good there. As long as we named the fields correctly, or to match the data that we have in the votes table. Let's try it out. 
All right. Let's do this. So I'm going back here. I'm going to vote for this one. And let's go see if it happened. 
So we go to votes. We may just have to reload the page there. Yeah, so now we have the -- (laughter). Is that the ""I got this thing quickly"" dance going on here? 
Yeah, the first-try dance. Ah, first try. (Laughter) 
Cool. So yeah, like I said, we kind of covered going through the voting, how you can connect to the database and submit items to the selection there. Of course, there's many different ways you can play around with handling the vote itself and that sort of thing. 
But as far as a baseline, we have the items that we want to list, and we can vote on a particular item. So the next part is we can look into adding some real-time data to this. But I guess we can maybe inspect if you want to poke into that some more or how we got here, I guess. 
Well, I think I feel like we're at a -- the most exciting part to me of these SDKs, like Appwrite, is how quickly it makes it possible for us to not only prototype but get that real-time stuff in there. If we get that, I can actually deploy this and let the chat go and vote. 
Sure. Let's do it. All right. So the next part we'll do is kind of hook up the real-time part of the voting. We have an API for that. So we can put that in a use effect here outside of the rest of the voting area. Or the vote component, excuse me. We can open that up, empty array. 
What we want to do here is subscribe to the API that Appwrite provides to listen to collections. So just kind of at a high level, Appwrite -- all these kind of system events are going on, and we can actually listen to those events using the .subscribe method here. 
I'm noticing I just -- I always appreciate it whenever a tool is well typed. Because I've been able to autocomplete my way to success here. You know, I know you're here guiding, which is why this is working so well, but it's nice because I'm not having -- you're not having to spell things for me or say like, oh, yeah, no, you got to use this method instead of that method. You point me in the right direction, I can autocomplete through most of the code, which is such a nice feature of well-typed SDKs. 
Yeah, definitely. The web-based SDK definitely has all the types for all the rest APIs, all the things you would normally interact with. So it definitely aids you there. I definitely like using that as opposed to the APIs yourself, which you could do. But when you want that autocomplete, definitely a bonus for that. 
So for the subscribe, the things we want to listen to next. 
Just the collection name? 
Yes. And this could be one or -- actually, there's a structure to the thing you want to listen to. It's kind of modeled after the things that we kind of talked about earlier. So it'll be collections, then a collection name, and .documents. I believe in this case, you named it votes. Yep, then .documents. 
So that'll be the first argument there. And like I said, it could be one or many things there. Then the next one will be the callback that has the data for that particular event. This callback function will be called with that particular event that happened there. 
Nice. 
Like I said, we have documentation on all the kind of events that happen and the way you can structure those. So what we want to do is actually listen for when a new vote comes in. That'll be a particular event that will get modeled here. So if we add an if case here for data.event and then set that equal to database. The event will be a string. So set it to database.documents.create. 
Okay. Sorry. Database.documents.create? 
Yes. That'll be the signal whenever a new item is entered into the collections, or votes, we'll get a notification. 
Sorry, I had an audio blip and think I lost you. You said database.documents.create, and I'm not sure if this is actually correct. 
Yes, that's correct. We just need to get whatever the -- whenever a new vote is added to the database, then that's what we'll get for the item there. 
Okay. And the item -- 
We'll want to set up the votes here. I think there should be -- I think Co-Pilot is already setting up what we want to do here. It knows the things. 
It gets very helpful. 
But yes, what we want to do is update the votes object that was defined there up top with the latest ones that come in. So we'll have to use the call back for the votes there. The callback will give us the current votes. Then we'll want to update that with the one that came in. 
So we'll do old votes. Then data. -- 
Well, the one that we want to update is the item ID. So it'll be like data.payload. I believe it'll be item ID. Then we'll want to update that item in the key there. Or that'll be a key that we'll need to update there. So this'll be individual updates. 
If that record exists, then we want to increment it by one. But if it doesn't, then we want to set it to one. 
Ooh. Okay, okay, okay. So I'm jumping the gun here. So what we want to do is we've got our old votes. 
If that's there, then we'll increment that value by one. 
Then we're just going to set it to be plus, plus. Otherwise -- 
Then otherwise, we'll just set it to -- 
We'll say old -- 
Yeah, old items this then we can use data.payload equals item ID. Assuming that's the first one that comes in. But like I said, we want to show how the particular -- how we can get this data in real-time. 
Yeah. Okay. So, that feels right. Am I right? 
I think you have the equal and the plus, plus here. I think that should work. 
Okay. Is that right? Should I just plus equals one this? 
Yeah, I think that will work. I think that works also. 
Might be less complicated than what I was doing. So, okay. 
Yeah, then the subscribe method does return an unsubscribe. So if we wanted to clean up this subscription after you exit this component, because that's usually a good thing to do, we can just store that in a variable there and just return the callback. It just calls that function. If you call that function, it'll just unsubscribe from that live connection there. 
Okay. 
Yeah, so the -- I believe the -- yeah, so that'll give us the data that comes in, in real-time, as far as votes. Then we'll need to display that in the UI somewhere. So we can add the -- you know, have a vote count there. So we can use votes and use the item ID for that particular one or have it be zero if there haven't been any votes in yet. 
Okay. So theoretically, assuming I didn't typo anything, that should work. But it's not loading yet because we don't do the initial load of votes. Is that right? 
Right. Right. We would need to -- yeah, we could go and fetch the initial set of votes also. And load those in before we set the items in the -- yeah, pull the votes and then set those also if we wanted to be whatever the current counts are before you start voting there. 
You know what, I'm not going to stress about that right now because we have like ten minutes. So I want to -- I actually just wanted to deploy this. So that we can let the chat go vote on it. So we'll git commit and say live voting should be working. Let's push. 
Yeah, we'll see how many. Like I said, if everything works, we'll get some people to interact with the voting. In real-time, of course. 
For sure. All right. Let's do this. 
So this is what you see every time you come into the dashboard. 
All right. We're going into Learn With Jason. Then this was called -- what was this one called? Appwrite. Got like 300 repos in there now. Now it's nice and slow for me. 
Let's see, yarn build. That looks right. So let's deploy the site. And because it's Vite, this should go real fast for us. 
Yep. Everything is fine with the build there. 
And we didn't have any environment variables or anything because we just needed the project, which is public data. We didn't need to keep that secret. 
And like I said, if you wanted to, you could set those -- put those in environment variables. When you deploy, of course, you have those in Netlify for the project ID and the prod URL versus development URL. So all that's there. 
Shout out to Vite for putting together a build system that's so fast. All right. So here's our public voting app. Let me throw this to the chat. Chat, go vote. I'm going to head in. 
Oh, I think one thing we'll need to add -- yeah, we're probably going to get bit by our buddy here again. So we need to add the host name to the platform there. You can just add another web app. You don't have to put the whole fully qualified, just the host. That way we'll be able to connect to it. 
All right. Let's try that again. Still yelling at me. I should already be logged in, which should mean I can just go to vote, and I can. 
Yep. 
And look. It's already happening. People are voting. Where you at, chat? Get in there. 
Thanks, chat. Appreciate you. 
And let's see. I'm also -- I want to kind of watch the real-time connection here. 
Yeah, and it's just a standard web socket connection underneath there. And like I said, all these are available without the web SDK API. So if you wanted to connect them directly, you could do that. Or build your own thing on top of that. 
If you're getting that cannot create an anonymous user when logged in, head over to /vote. We didn't put in the redirect or anything. We just wanted to give that a shot. So if you're getting that error, just go to /vote. If you hit /vote and it's blank, you need to log in. 
But so this should be showing us some messages. You can see them coming in here. So, lots of events coming in. Type, event, document, create. So, I think I might have made a mistake in what we're watching to update things. 
Oh, okay. 
But this is pretty slick. We're seeing the events come in. I clearly screwed something up because we're not seeing the counts update live. But you can kind of see just the immediate power of how this works without having to -- like, I don't know about y'all, chat, but I've tried to set up web socket before and build my own server-side web socket event emitter and all those things. You can actually see it if you run the commands on the show. You give it one of these, right. 
This here is me writing my own little stand-up thing to make this all function. It's really challenging to get that to work, and I still feel like the thing I built only works about half the time. So how nice is it that this just works right out of the box, and the part that broke is my code where I'm trying to parse this data and get that all plugged in together. 
So, something we can fix pretty quickly. I think Brandon has this built up in a way that actually functions so we can also link to the working code. 
Yeah, there's definitely -- I'll give credit to you. I'm pretty sure it's just a small tweak or something. But yes, there's a branch on the GitHub repo where you can see the full working solution there. 
Yeah, really, really nice stuff going on here. So if we go back to this one, this is Brandon's version. Then we've got a complete version that you can go and look at. So let me drop this in here for y'all. 
Okay. So I mean, my buggy code aside, this is pretty dang impressive how quickly we were able to make that work. Oh, look at that. Okay. So I think what I did is I somehow got it to only update when you click on a thing to vote. Because it stayed zero until I selected. Then it showed. So I've got a bug in there. It's something it sounds like we could go figure out. 
But regardless, we were able to build something that is actually working. It's doing what we want. Just got to fix our UI because, you know, you let me write a UI. What did you expect? Brandon, for folks who want to go further with this and try more, what resources do you recommend? 
Yeah, so definitely check out the documentation at our website. I'll drop that in here so we can share it in the chat. Oh, you already got the page up there. So check that out. That'll be the main place that you can see for documentation, all our APIs. We also have a Discord, which is linked there from the site. Definitely check us out on GitHub. We have a growing community there. Discord, Twitter, and GitHub, like I said, are the places that we frequent. We're always around, so definitely check us out there for that. 
Great. All right, y'all. Well, this has been an absolute blast. If you're not already following Brandon, you should go and do that for sure. And let me just give one more shout out to our sponsors. We've had Netlify, Nx, and Backlight all kicking in to make this show possible, and that includes the captioning, which is done by Rachel today from White Coat Captioning.
thank you, Rachel, for being here. 
While you're checking out things on the site, give a look at the schedule. We've got a lot of really good stuff coming up. We're going to build an esbuild plug-in next Friday. So it's a different day. I'm traveling next week. We're working on something cool at Netlify. More details on that later. But I'm going to move the episode to Friday, and that's going to be with chance from the Remix team. We're going to build an esbuild plug-in. That's going to be an absolute blast. 
Make sure you go over and either add on Google Calendar or use this follow on Twitch button to make sure you get updated whenever a new episode is going live. You can also subscribe on YouTube if you prefer to watch these after the fact. But I do appreciate all who show up live. It's much more fun when we've got somebody to talk to. 
With that, we're going to call this one a success. Brandon, any parting words for the chat? 
Yeah, I do want to give one quick plug here. We just raised our series A. So definitely want to celebrate that. But yeah, thanks to all the chat for coming through. Like I said, you can find a link to that on our site also, about that. So we're hoping to do some exciting things there with open source and continue that. So, thanks for having me, though. Yep. 
Yeah, congrats on the round. Thank you so much for showing up today. This was an absolute blast. Chat, stay tuned. We're going to find somebody to raid. By the time you come back next time, I'm going to figure out what the heck was wrong with my audio and hopefully be moved into my new office. Thank you so much for hanging out. We'll see you next time. 
See ya.

In [ ]:





​


","[(0, 0.45720974), (1, 0.129011), (2, 0.41377926)]",0.45720974,0.129011,0.41377926
"Big pleasure to be here, I am very proud to be here today. And I started working with software development 28 years ago, I used to write Clipper, dBase, POR, C++, VB, and then Java. And then I started doing developer relations in 2001, during the gold Java times. I went to 15 different JavaOnes, and then I never stopped doing talks and doing community stuff.And now I work as a technical evangelist for AWS in Latin America. So, I have many colleagues, we have fun doing cool demos, like, bringing robots to the stage, playing ukuleles to make the robot movie, and things like that, so, crazy stuff. And, also, I am a comm owner, this is Alexa, my comm. So, very nice.So, about live demos, I love live demos because it’s a way to create a, kind of, magic connection between you and your audience, it’s a very nice way to inspire people.Sometimes, as a technical evangelist, you have audiences like kids, teenagers. When we are doing diversity, we can have people that never did one line of code. So, showing the things working, for this kind of audience, is very important.And I, also, do many conferences, like, Enterprise, executive conferences, and the live demos, always save my life, because they are talking, like, fiber comm, they are talking doing, all the day, just about fiber, fiber technologies. And then you just show up in the stage, and do some live demos showing real stuff happening, machine learning, inference, and they just go crazy.And I think that it’s a very nice way to pass your marketing message to your audience. You make your live demo, you make the magic happen, and then you explain which kind of technology is behind your live demo, I think that is much more fair than just doing marketing slides.But it can be a tragic connection, when you do live demos. My sleep quality is very different when I have a live demo to do the next day, I really sleep with my live demo. And during the night, I think about the script, plan A, plan B, plan C, I dream with that, and you must be committed this way to make your live demo happen.So, many things can misbehave on the stage when you are doing a live demo. So, let’s see some tips and tricks.For me, live demos is not live coding, live coding is one way of doing live demos. For me, live demos, it start when you use your own laptop to change slides, you already have many risks of doing that, especially, with Mac computers, and adapters, and crazy projectors, and things like that.Playing videos and audios is another level of live demo, you have Codecs. When you transfer the video, when you copy the PowerPoint to another laptop, it can crash sometimes, so you must be sure about what you are doing. Running apps or accessing websites is another level. Like, for us, at AWS, it’s very common to open the AWS console to show some service.And then live coding. For sure, live coding is a very very hard level of live demo. And last, is bringing hardware to the stage. Bringing hardware to the stage is the most complex live demos. And this is what I like to do, I bring some hardware here, and I hope to do at least one live demo work here today.So, using your own laptop, it makes sense when you have talks larger than 30 minutes. Like, here, 20 minutes, exchanging laptops for the conference organizers and dealing with many problems, or you must ask the speakers to come in the day before to test everything, and sometimes you don’t have the venue available to do that. So, I think that it’s very good to use your own laptop when you have a one hour talk.And if you are using your laptop on a big stage, like, if you are presenting, like, for me, at AWS summit, they use fiber cables instead of HDMI. And then in the end, you have a big, big, big adapter to convert the fiber to HDMI, and then you plug this adapter here, you take all the space of other ports, and then you cannot plug your clicker here anymore.And this kind of problem can happen, and you must pay attention to many different details on a big stage, because you don’t have the control. I used to go, a lot, to universities, and then, at university, you just bring the chair, you just adjust the projector, it’s up to you. In a big venue, there’s no way to do that.So, cables, adapters, and everything, this is your responsibility, to bring something like this, where you have everything here. So, don’t expect the venue to have HDMI, VGA converter. If you are an evangelist, you must have your setup with you, you must bring your setup.So, master the art of changing the audio output. I saw many developers speaking, and then they plug the HDMI, the audio goes through the HDMI, and they don’t know how to change the audio. So, if you do presentations, you play video, you play audio, you must domain the art of setting up your audio.And it happened with me twice in Brazil. I traveled, like, five hours driving to some university, and then I arrive there, and we run out of energy. And then I say, “Come on, 10 hours driving, I will not go back home without doing any talk.” And then I just used my laptop battery to guide these slides, no slides, no projector, no energy, no audio, and I did my presentation.So, think about it. You are a technical evangelist, you are a developer advocate, sometimes you travel very, very far to do a talk, and then you don’t want to go back home without anything in your hand.Take care with video Codecs, I have many, many, many problems, especially on big stages, and big projectors, I don’t know the reason why, but take care with that.So, internet, the same thing. If failure is not an option, Wi-Fi venue is not an option as well, bring your own Wi-Fi. But, on other hand, if you do hackathons, or workshops, or sometimes, like, longer conferences, they provide a cable.And the perfect setup is when you can bring your own router, especially, for us, from IoT, you can bring your own router and everything is configured. And so, it’s a dream.But I’m using 4G, my cell phone, to provide internet. I have a plan from Brazil that covers all Americas, so I can work, my territory is Latin America. And I have many good experiences using my cell phone to provide internet, and do my demos with IoT, with robots, machine learning, and things like that. So, you can trust. At least, for some operators, you can trust 4G for doing your talks.Take care, many conferences, like JavaOne, they don’t support 2.4GHz Wi-Fi network anymore, which means that you cannot bring your Alexa, you cannot bring, like, an IoT button, a dash button. You must double check which kind of device you are using, to see if they support a 5GHz.Take care with TCP/IP ports and Firewall, for sure. Companies, universities, they have many restrictions, and VPN is always your friend. Like, if you are in different networks, and you have to do SSH to a Raspberry Pi, VPN can save your life.And if you travel a lot, if you live in airports, a good investment would be this guy. This guy is an amazing 4G router that you pay as you go, you pay per day, and is not expensive. You buy the device, it’s less than $200, and the device is a power bank as well, and then it’s a very nice one.Live coding. So, this topic is very hot, everybody’s live demo is live coding. You know, for me, live demo can be many different things. Live code is one.It’s not easy to do live coding, but what I don’t like, I have some friends, that they try, like, “Oh, today, I’m tired about my slides, I already did this presentation 20 times. And today, I will not use my slides, I will do just live coding.”And it’s a big fail, you know, because no script. It looks like doing live coding is less work than preparing slides, but it’s not true. Preparing a one hour talk for doing live coding is much more work than preparing slides.So, I have some friends, Venkat, he’s a very famous guy from Java community, he’s, for me, a master speaker, you must see some video on YouTube. And he does lots of live coding, and I was surprised with this tweet, like, “Live coding? No, no, no. Okay. If you want to do, prepare, prepare, prepare.”And another friend said, “I like to do live coding, but I always use GitTags to help me sync in, and have the steps, and things like that.”And basic stuff from my colleague, Julu. Large font, take care about the details, large font, write the code on top of the screen, and things like that.So, avoid doing just live coding, it’s better to mix up a little bit of technical content, some video, and also, some live coding, I like to balance my presentations.So, I love to use Alexa during my talks, because you can write an Alexa skill in less than 15 minutes. So, it’s very nice to write Alexa apps. And we have a Git repo, in the proxy number 7, you can follow the instructions.And I promise, in less than 15 minutes, you can have your Alexa skill done. And is a very nice, alternative way to do live demos when you don’t have your computer in the stage. So, you can interface with your live demo using your voice, and it’s good.So, many, many different possibilities, and sometimes can be tricky if you have a low quality internet. So, let me check one thing here. Alexa, ask Brazilian robot to say, “Hello.”Alexa: Hey, ugly robot, say, “Hello,” to the Dev…Robot: Good afternoon, Dev Rel Conference attendees. I am so happy because, in some hours, we will be drinking beers together. It’s Friday, yes.Vinicius: So, you can do this kind of… It’s very fast, you know, it’s very simple, very fast, but for a teenager, for someone that is not a developer, you can change the code, change the phrase, and have fun. Let’s try something else. Alexa, ask Brazilian robot to turn on light.Alexa: Turning relay on.Vinicius: Aha, I have here, in the backstage, the light. Okay. So, here I bring a little bit more complexity, I have here my robot, receiving messages from AWS IoT core, through MQTT protocol. And then I have a Zigbee module, and then I have an Arduino Zigbee, with a relay, controlling the lamp, and the thing just works.Alexa, ask Brazillian robot to turn off lamp.Alexa: Turning relay off.Vinicius: You see? You can see the speed of light, of energy.So, yeah. And another one, the last one, so I can be free of my live demos, this way.Alexa, ask Brazilian robot to take a picture.Robot: Taking an epic picture at DevRelCon, San Francisco, in 3, 2, 1.Vinicius: Okay. What else? So, now we have the picture being uploaded to our S3 Service.And, look, I’m talking about our services, our product, through the live demos, it’s much more fair. I’m explaining, I’m not selling anything, I’m just explaining.And then the picture will go to the S3 Bucket, and then we have a Lambda function that will call a recognition, that will try to count how many people we have in the picture, and then will send back to the robot, and the robot will register how many attendees we have in the conference. So, it’s an end-to-end machine learning demo.Okay. Raspberry Pi, for IoT prototypes, is a very nice tool, you really can rely on Raspberry Pi on stage. I did a lot of Raspberry Pi, Intel, we had some Galileo, many, like, 15 different boards. Raspberry Pi 3 is very, very, very stable.So, remember that no support for 5G Wi-Fi, backup your SD card. These days, it’s rare, but sometimes it can crash the SD card, and then you lose everything you did.Consider buying a screen, and Raspberry Pi, plus MQTT, plus Node-RED. Who here knows about Node-RED? Node-RED is a very nice, low code development tool, or no code development tool, you can really do many cool demos. You cannot go to production with Node-RED, but for producing cool demos, it’s a very nice combination, MQTT, as a protocol to exchange messages between things and Node-RED.Traveling customs. Yeah, problems. Always, you can have problems with your devices. I never bring more than $1,000 of equipment with me, I never had any kind of problem with customs, taxes, or documents, never, never.I traveled to 30 different countries, and never had a problem, except by robots and batteries. So, not a good time to travel with batteries, okay? So, take care. The only battery that I carry with me is a LiPo battery that is, you can buy this bag at Amazon, it costs, like, $10, and this battery can explode, and this bag is supposed to protect, I’m waiting for that.So, you can travel, in your carry-on bag, okay? You can never put it in the airplane. So, protecting your equipment is important. Take care with acrylic pieces, they are very easy to break, I love to build things on wood because of that.When I arrive in the hotel, the first thing that I do before taking a shower is unpack everything and put everything to work. Until I go to the venue, I never turn off my equipment. All the time, I’m talking, “Alexa, do this. Alexa, do that. Alexa, do this.” And then I start earning trust with my equipment.So, some tips, earn trust, dive deep into your tests, have fun with your live demos, it’s a way to have fun, like, sometimes, I do four talks, five talks, in one week. So, if you are doing the same talk all the time, having the live demo is a way to make your talk a little bit different when you have to do many, many times the same talk.Plan a strategy, have multiple demos. I have here, like, 10 live demos that I could do. If one fail, I can grab another one, my equipment bag is right back here. I don’t care if I need to wait a little bit and bring another equipment and try it again. So, have multiple demos so you can feel better in one or the other, but at least you can succeed in other demos.Pair presenting, it’s very good when you have a colleague presenting with you. So, if you have a problem, you can fix. And you can create discrete demos, like, “Okay, let’s see here, I will press this button,” but you are not pretending that everything will work.Like, you don’t have a slide, now it’s live demo time, and you are just checking, “Let’s see if it’s working. If it’s working, okay, good, if it’s not working, oh, okay, I have some problem, it’s a new live demo,” so you can manage better.And take care, sometimes we spend a lot of energy preparing the live demos, and less time preparing the slides, and then you have a good live demo but you don’t have a very good talk because you don’t prepare slides. So, try to balance your effort.Video recording, it doesn’t count as live demo, I’m sorry, it’s a bad demo. I’d never do video recordings, I never do video recordings, but it’s okay. If you are at Microsoft doing a very big conference, I would recommend.Some tips from James Gosling, James Gosling is the king of live demos at JavaOne. Don’t overscript, demos always misbehave, go with the flow, learn to love to improve.Yesterday, I was here, and one of my colleagues, Mike Coleman, he said, “My worst situation during live demos was this one.” And, unfortunately, he left the conference because his grand-daughter was just born, he was here yesterday, believe me.Look at this. Can I have audio? Mike Coleman, earthquake, and he was presenting with Bill Gates, the Windows XP.News Anchor: During the Microsoft Conference, Bill Gates was actually up on stage. This is some of the more violent shaking that was actually caught on tape. You can see the confusion in the audience. And, fortunately, there were no injuries.Vinicius: It was the first demo off a plug and play camera, he just plugged the camera and started an earthquake. So, he won all the awards about doing live demos, and experience on live demos. So, be prepared. Thanks a lot.","[(0, 0.5382568), (1, 0.12191744), (2, 0.33982578)]",0.5382568,0.12191744,0.33982578
"Hello, everyone. And welcome to another episode of Learn with Jason. Today on the show, we've got Sean Grove. Sean, how are you doing?
Doing all right. It's great to be back, it's been a while.
Yeah. I'm happy to have you back. For folks who haven't seen your previous episodes, do you want to give a background on yourself?
Sure. Worked a lot on developer tools for the last decade or so. And most recently worked on a lot of GraphQL pieces. Worked on a product called OneGraph, in front of APIs, GitHub, Spotify, that sort of thing. And worked on the open source tooling for that and for the consumption side. How do you make it easier to access all these services including things like auth and TypeScript and all types of things. End of last year, ended up joining Netlify. And joined into a nice way because they're integrated, the experience is much nicer than we could do from the outside. That's what I have been doing for quite a while now.
Yeah, I want to talk a whole lot about that. But I want to spend a little bit on the kind of abstract for this. You have been in the GraphQL world basically as long as GraphQL has been a thing. As far as I can tell, you were there on day one. And it's been really interesting to see the way that you have kind of taken the GraphQL space and moved it in a way that I have seen other people doing it. So, maybe a good starter question is, what got you to start thinking about GraphQL as something like what you see it potentially being?
Yeah, sure. It's actually gone through several phases to be honest. I was initially excited by one piece and didn't understand another. Over the years, the more I've understood the different applications. I was working on an application with a unified view of the customer, might have data in Mailchimp and Stripe and elsewhere. As a founder, I was checking these places, where is that data, where is that note? Where is that ticket? And I wanted to just have a view. Like your user. The data that was charted everywhere. But in my mind, it's one coherent thing about the customer, right?
Right.
And so, I ended up integrating something line the lines of 20, 25 APIs in order to get that application to work. And each one was kind of snowflake, right? It was unique the way that they did their URL. some were REST, some RPC. Some did a query parameter, some with the header parameter, some in the JSON part. And that uniqueness really didn't help me at all. It was an additional cost to me.
And not only that, but I had to remember, you know, how is this Zendesk ticket linked to this customer over here linked to this lead over here? Rather and kind of -- there is a graph, there is an implicit graph where all these are connected. But it's implicit. I as a developer have to traverse that, pull the ticket down, pluck off the ticket ID and make a call into the API. You kind verify two levels that are together. what data do I want? That's easy. But how do I get that data? That's difficult. Requires learning APIs. I did a proof of concept where I could just have customer and tickets. And I could just query and it would go and figure if out. It was slow and janky and whatnot. But that kind of experience was, like, oh, that was like a lightbulb going off, oh, my goodness, I can tell you what data I want and you can get it right.
I feel like I had a different but sort of similar growing awareness of GraphQL's capabilities when I was working at IBM. Because we were doing this thing where we had lots and lots of teams, each of which had their own API. And to actually use this data, everybody in the company had to authenticate with and use the 25 different REST APIs. And we were combining and writing our own logic it combine it together. And refresh tokens, well, these tokens will list wherever. Post it into a Slack DM and that's what everybody uses as the token. And then you have all this logic, filtering all this data. And if you didn't know any better, you wouldn't filter the data and put it into Webpack or something. And you have giant JSON blobs of 25K worth of data passed to the client because we needed six fields. When I did a proof of concept with GraphQL and said, wait, we can make six fields that make six APIs and get one JSON object with just the data that I need. And I was like, oh, no, this is gonna change everything, right? And so, this was really -- and it sounds like you kind of hit that same point. But you weren't dealing with internal teams. You were dealing with a whole ecosystem of tools.
Exactly. And I think the next step is -- and, you know, an area that we spent a lot of time trying to focus on is while that part is very cool and often gets ther initial intention, what cuff on the other side, the developer experience, things are expressed in the graph the way tools are read very easily. You can get -- you can take a GraphQL query and translate into something a developer can use, whether that's in Go or JavaScript or TypeScript. And you get a nice experience regardless of the language we're working in. You have this double-sided benefit. You're to the building one SDK for one language. But defining your data model with this approach, anyone can appreciate a really -- a much nicer interface.
Yes! That feels huge to me, right? And the other benefit here, what you're saying about GraphQL, you have this underlying schema that's not dependent on JavaScript or Python or Go or Ruby or whatever. It's just a -- it's an independent definition of this is what the language returns. And you get back strongly-typed data. And that -- that to me is really exciting. Especially when we start talking about some of what you've done with Graph at Netlify. So, let's maybe dig into that specifically because you said at OneGraph were working on this proof of concept. Instead of having to go to Salesforce and Jira and everywhere to say give me all this customer data, you could query the customer and find the tickets attached to them. Find their Zendesk and their Salesforce profile and whatever else and get all that data back in one place.
I know is that the same in Netlify, is Netlify graph the same general idea?
It's slightly different. That original proof of concept was me saying that's my model and here is how to map it on to the underlying APIs. A few years later I actually started OneGraph. This was end of 2014, end of 2015. And, you know, I thought while this is very exciting, I think this is -- it's gonna take some time to mature as a technology for people to catch up. I waited until actually 2018 to start OneGraph. And the approach was to take the non-GraphQL APIs and the GraphQL APIs and link them together. That's what Netlify Graph is today.
We'll dig into that with the coding portion. One thing I find interesting, with Netlify Graph, you mention being vertically integrated and us doing more. Can you say more about what that needs in the context of Netlify Graph?
Yeah, sure. You know, going back to the beginning. We worked on two fairly important open source packages for the GraphQL community. The first was graphical explorer. This is clicking through an API and a folder system. You don't have to know GraphQL. I want the Zendesk ticket.
Let me to stop you to fan boy for a second. That package sing such a game-changer. And if you've watched this show, you've heard me talk about how I love the graphical explorer. It's a cool tool. Chat, have you tried this? Let's get a couple boops in the chat if you have used that tool. Oh, no, the yeets are out. But, yeah okay. The first package was the graphical explorer which I loved.
Exactly. The goal was there were people who could tell you what data they wanted but didn't know GraphQL. This helped with the I don't know GraphQL, just tell me what data I want and you give me the GraphQL. So, kind of just wanted to make a smoother onboarding, right? Because it's kind of a step function. You could get nothing out of GraphQL until you learned GraphQL and suddenly it's great. We wanted to make this the smoother process. You could just click on the data and you could see the GraphQL getting built. You could kind of understand how does one translate this intention into the implementation? And once you run that query, you get the data back and you're excited.
We often found that was kind of a -- that's great. But now what? Like, how do I take this GraphQL query and get it into my application? It's not useful inside of, you know, the web page. You know, the little explorer. I need to have it actually inside of my application. and, you know, people would end up tripping over a lot of different challenges, right? Do I use just raw -- just fetch? Do I use Apollo? Something else? If I use Apollo with React, how do I structure everything?
And we had a sense of, well, we know how to take this query and turn it into, for example, a bash script or an Apollo query or a relay query or Vue or Svelte. We built the tools, question, I see what I want in the explorer, how to get that into the application to make it smoother. There's a whole bunch of questions we didn't know. Are you using Next.js? Hosted on Netlify? Hosted on some personal platform? And so, because of that, we couldn't give you everything. Right? We can't just -- there are some things we can't make assumptions about. But when we're on Netlify, we know exactly where the functions should be, where the components should be. If you're using remix, this side, we know if you're using TypeScript, generate with types. We know if you're using subscriptions, we know how to automatically generate subscriptions for you. Because Netlify has the end-to-end, all the way from the GitHub repository to the CDN at the edge, we know all that have. That allows us to make a lot of assumptions whenever we're generating the infrastructure for you. That makes the experience -- there's almost never a hopefully what do I do now? This looks good. Get that into my application. We know how to put the data and how to spin everything up.
Yeah. I find that so exciting because, you know, to rephrase that, because, chat, this is important. Listen up here. What this means is that using Netlify Graph, because Netlify is also building your site, we know enough about it that if you go into your Netlify Graph and you click in the graphical explorer to say what data you want and then click the, what is it? The generate handler button? It's gonna build a server less function in your site that automatically allowed you to bring that a data in. You don't have to write API authentication code, how to get whatever company's token and put that into your environment variable. You don't have to deal with whether that toke season going to expire, we'll handle the refresh tokens for you. You can go back to building your app and call that endpoint with all data ready at your fingertips in a totally secure and expandable way. And that can come from multiple API endpoints.
Yep.
Huge! This is huge.
The philosophy is, look, I can tell you what data I want or what action I want to perform or what events I want to listen to. You tell me how to put that into the application and this way. Don't make me figure it out and stumble over everything. You know all that have. I'll tell you what I want and I'll put it in my application.
I love it. I'm so on board with this. It's so cool. So, before we switch over to code, I want to talk just a little bit about the -- the kind of use cases that you've seen this unlock. Because as an individual, I can see a few things. For example, I want to be able to look at my GitHub data and pull a number of issues. If I have a certain enough of issues, I want to send a message to, I don't know, maybe I want to open a ticket in product board or something like that. Or if we know we just, you know, like closed the deal in Salesforce. Maybe I want to play a song on my Spotify, right?
But have you -- what are some interesting use cases that you've seen where people are combining this data and what you kind of see going forward from here?
Yeah. Sure. I mean, there are quite a few. It varies depending on the needs of the, you know, the company or the individual building it. One of the motivating use cases for me -- this may not be relatable to everyone. But anyone who has ever used the Salesforce API will almost certainly relate to this. I wanted to have a graph at a company I was at. All it did was reach into Salesforce, pull out a list of our opportunities and just graph it. You know, the size of the opportunity, the likelihood of closing. Just like a nice snapshot of where we as a company, how are we doing?
And that, you know, is days of work. To figure out how to even authenticate with the Salesforce API? Which of the five APIs is that data in? How do you pull that out? How do you then -- how do you pull that out on the client without involving some sort of server? How do you authenticate with OAuth on the client? Et cetera, et cetera, et cetera. Now like building that is literally something like a 20, 25-minute exercise. Because you just go in and you click what you want. And you generate a page and it has a form.
And about, you know, 10 to 15 minutes of that is figuring out how to get D3 to graph the thing for you. Getting the data in is the easy part. You get to focus on the different part, which is making a really nice user experience and making that app feel crisp and clean.
I love it. All right. I feel like we could continue to talk about this in the abstract. But really where this is gonna click I think for me and for everybody else is when we get to see this thing happen. So, let's dive in here. And I'm gonna switch us over into pair programming mode. There we go. All right. Camera 2. So, we are currently talking to Sean Grove. And my -- oh, my goodness, my captions are broken? Oh, no! What happened, everyone? Oh, they're like broken, broken. What the heck? Uh-oh. Hey, Amanda, can you send me the Streamtext link directly to share in the chat. We have -- oh, no. Okay. Um... huh? I broke all the buttons, everybody. Okay. I'm back! I'm back! I'm back!
And I'm gonna copy this link. And I'm going to come back here. And I'm gonna paste this link. If you want to see the live captions, they are available here in the chat. I will also put this up on the screen for a second. We've got Amanda with White Coat Captioning running the live captioning for us today. Thank you very much, Amanda, for being here. And that captioning is made possible through the support of our sponsors. We've got Netlify, Nx and Backlight all kicking in to make this show more accessible to more people. Which I very much appreciate. And I will go and fix whatever I did wrong there shortly after this episode.
then we are talking to Sean Grove. You can head over on Twitter and give Sean a follow. And that's about -- that's about all I know right now, right? We've got on the Netlify.com blog, we've got an announcement about Netlify Graph. So, let me pull this up and share this real quick.
So, if I'm ready to get started, I could read this blog which has all the instructions on how to get started. But since you're here, I'm just gonna ask you. What's the first thing that I should do?
I thought maybe, you know, this works with lots of different frameworks. But maybe we could start with a standard Next.js map. If you have one linked to a Netlify deploy somewhere.
Tell you what we can do, we can set one up really, really fast. What is it? Npm create next app? Is that how it works now? Yes? And we'll call this Netlify Graph next. And we're gonna get everything installed. Good deal. Okay. So that's now running. So, I can go into Netlify Graph and let's just see. Did it give me a get -- no, so, we'll get init. What? Get branch, main. Okay. Now I'm gonna get add all. And we will Git commit this and say, initial commit.
And, you know, we're starting from an absolutely empty folder here. So, this is how fast you can get a site up on Netlify if you have never done it before. So, then what I'm gonna do is I'm gonna GitHub repo create. And I'm just gonna copy-paste my repo name here. What? Oh, got to do the public.
There it goes. Okay. Then I can get push. And we'll set the upstream to -- oh, we got to add the remote. Get, remote, add, origin. Get at GitHub. And then we'll paste in this again. And then we can do Git push upstream origin main. Off it goes.
And then we can just initialize this thing on Netlify. So, I'm gonna run NTL init. And we're gonna create and configure a new site. We're gonna put it on my team. We'll call this Netlify-graph-next. And we'll authorize with app.Netlify.com which opened in the wrong window. So, I'm gonna open it in this window. Right? And then I just log in with my GitHub account.
Whoops. Great.
You hackers! You dirty hackers! Give me just a second here. We're gonna try this one more time. Authorize -- are you gonna make me get a GitHub access token? This is exactly the problem I was worried about. Let's see.
[Hold music]
Okay. So, that's fun... oh! I'm logged into the wrong account, everyone. That's what just went wrong. So, let me log in again. Okay. There we go. Now I'm gonna Netlify init again. Authorize. Do it this time. Please? Oh, my god. Okay. I don't know what I'm doing wrong.
You could also deploy through the web UI.
I'm gonna have to deploy through the web UI. I don't know what I did. Okay, so, we're going back here. Going to sites, go to Netlify Graph.next.js. And go to settings. Build and deploy. This is a new computer. I just got this computer and haven't tested any of these flows yet. Which is going great for me. There they are. And then I can go to Learn with Jason, Netlify Graph. And... there it is! Gonna deploy the main. It's got all the Next stuff. Here you can see it's automatically detected. So, we're gonna deploy it.
And there it goes. Okay. So, now that we have this, we can also -- we should have all of our node models and everything. This should build in about a minute. And while we're doing that, I'm just gonna start it up locally. So, just run the Netlify Dev and it boots up the site, right? So, this is all good. This is doing what we wanted. And the site is... approaching built.
I think you should be able to link us site now.
I think it might already be linked, actually. Let's look. Netlify. State. We've already got the site ID. So, it should work from here. Okay. Next build. And... here we go. Come on! You can do it! There we go. There we go. It's all happening.
To keep it simple, we can just develop on localhost for today.
Yeah.
We'll leave deployment for later.
Yeah. I feel like this is gonna work now that the site is actually running. But we'll see. So, okay. I have -- I have a site running. I'm able to -- it's deployed. It's operational if we go out here and look. Here is our Next site running on Netlify. We got that all built and running. There we go. And now I'm ready to add Netlify Graph. So, what are my first steps here?
Yeah. So, all you're gonna do is just like normal, run Netlify Dev on your application. But you'll add a dash, dash graph flag. So, during beta -- this is all in beta, as a disclaimer. But during beta, it's behind a flag. And that's going to take care of allocating all the resources that you need. And one of the links that it just gave you in the terminal there to edit your library, visit this link right there. If you click on command, click that. Should take you right in. And this is the, hey, we see this is your first time using Graph experience. It's going give a little bit of an overview. We know what we want to do. Go ahead and connect to an API.
Okay.
I thought we would play around with the Spotify API or GitHub. One or the other.
Let's start here. Start with, what authentication?
Yeah, and let's not do authentication.
Okay. We'll talk about that later, I guess.
Authentication says I want to use this API token on the backend for myself. What's more challenging than that is how do you get the user to provide their token? So, maybe we can play with that. Let's enable the graph and start from there.
Okay. So, I've enabled the graph explorer and I'm gonna start querying.
Yep. And just pick the session. So, you just have the one session right now. Take you in. And yeah. We should be good. So, let's --
And so, this is the explorer that I was gushing so much about.
Exactly. So, how about Spotify and then we maybe search for some tracks and we'll see what we get back. We'll just play with this for a little bit.
Okay, so...
Just hard code something right now for the query?
What do you want to listen to, chat? We're gonna listen to -- we're gonna listen to... Born to be Wild. Because for some reason that's the first song that came into my head. Oh, got to actually do -- actually like get something, right? With what comes back. Tracks...
Yeah, and then for each track, get the name and the ID. And we can start with that.
Cool.
You can see it says you're not logged into a Spotify. Click on authentication. This will allow you to explore it locally. Log into Spotify.
Let's see. How do I log into Spotify. I'm gonna pull this off-screen for a second. The timing on this is good because I actually migrated off Spotify to Title. And just haven't --
You hackers -- haven't turned this off yet. Okay. So, that's logged in. And I've got my Spotify account. And now if I run this again.
Yep.
There it is. Look at all these songs.
We can explore and play around, we can get the album if we wanted to. But let's go ahead and save these changes.
Okay. Gonna save changes.
And if you go back to your terminal, you should see that that's gonna sync. And notices that hey, you added Spotify. I noticed that you added this new operation. And let's go ahead and open up the code now. And we can see what this looks like.
Here's our code. Look, in the state it added some things. But I'm...
Yep. And let's look at the Netlify Graph operations library inside of in so, you can see that that's your, you know, Born to be Wild query. And you have a doc string up there that just says an example query to start with. Let's go back to the UI and edit it and save and see how the changes flow back. So, if you scroll to where you typed Born to be Wild in the explorer. And you hover over the query. There should be a little dollar symbol. That means turn this into a variable. Now if you just hit save. Scroll up and hit save changes again, that will flow through. Now it's a query. So, this updates it on your local --
Okay. Chat. Did you notice -- this is my local machine. Right? So, we're on the Netlify website. And because we're using the Netlify CLI, when we make changes here, it's auto-generating the code that we need to update our queries. [Boom!]
It's so --
So, that Netlify operations library, it's -- that is the one file that everything is based on. That's like every operation that your application needs. But you don't typically use it very much. Because the CLI  is gonna take care of generating a whole lot of handlers or helpers for you. So, if we go into the code and try to import this Netlify Graph file. So, maybe under pages, index?
Pages, index.
Actually, API would be even better.
Yeah. Let's go into API. I'm gonna create one to get -- let's do a song JS. And then I want to import -- is it -- is it CJS syntax? I forget how Next does this.
I think it's ESM.
Okay. Great. I want to import something.
Call this Netlify Graph.
There's my lib. Netlify Graph.
And that's it, just Netlify Graph.
That's it.
And call this, instead of destructuring, the whole thing is called Netlify Graph.
Okay.
And so, now if you try Netlify Graph in dot and see the autocomplete. Let's see what's on that object there.
Grab this.
That's a good idea.
Default here. So, let's, Netlify Graph dot --
And you can see you have fetch example query there. That's the name of it. Which is not super-useful. Maybe what we can do is go back to the editor and let's change the name of this. So, you can simply -- or not so simply -- but in either -- in the explorer, if you scroll all the way to the top, on the left-hand panel there. You can just edit that there. So, maybe search. Or search Spotify. Up to you. And then if you notice in the bottom right, there's a little -- a tiny little panel. A little bit down. Keep going down. Yeah. Right there. The description.
Oh, okay.
Let's give this a description. And we'll go ahead and hit save whenever you're ready.
Saved.
And we should see, inside of your code, some red squigglies pop up shortly. Because you no longer have --
I'm no longer in TypeScript. So, I might be...
It's happy. If you like.
Go back in here. Oh, look, it changed. Spotify search.
If you hover over that, you can see the description, the search for Spotify came through.
Oh, yes, right here.
You can actually. You gave your descriptions inside of those queries. Whenever you're working on the data, say this is what this does, that flows through for the team. It's a nice human-level documentation of hey, what's this thing for? Now whenever we invoke this thing, you can see that we have to use some variables and that's gonna take some input. And so, that's an object. And if you just autocomplete here...
Oh, beauty.
See that, hey. It knows. It also knows that query is optional, right? Because you provided a default value.
Oh, that's right. I did.
Yeah. So, it's up to you.
Appear that it's a string. So, I know it's not an object. And I can just search for something else. Let's do what? There's a --
And if you hover over query, I'm gonna keep nailing this home for a while. Yeah. So, notice the string. We'll see that on another one. Never mind. Okay. So, let's go ahead and await the results of this. And now if we try to do result dot, we should see, okay. We have data.
Data.
And --
Spotify search. Or, wait. Did I do the wrong thing? I got lost in here. Data dot --
No, I think we probably have a little bit of a bug here. Let's go to the CLI. And let's try --
Wait, wait. I think it is.
Fetching.
We had a TypeScript bug because we didn't make this async.
Oh, I see.
Let's try and see if it listens now.
If you hover over results, what do you see? That's there. And if you hover over data. You can see it's saying this is a record, string unknown. I don't actually know what's here. You can still access the data there even if there's some weird typing structure underneath it. But so, it won't block you. But it's giving you a warning saying, hey, I'm not sure what this is. So, I think if we go to the CLI and we go ahead and close it. And let's run a command Netlify Graph, cool. This says go fetch the schema and any events that might be out there. Yes. And also, if you -- it tells you, if you install for your -- you'll have a nicer experience.
Okay. Pulled it in.
Run that. All right. Okay. So, hopefully now if you hover other data, do you have anything?
Oh! Look at that. Now it knows.
Yes.
Now I have Spotify, search, tracks. That's what I wanted. And I can map these. And if I get a track... oh! Jeez. Okay. We get our track ID. We get our track.name. We get our track dot artists, dot, oh, we're gonna map again. Artist and in here we're gonna return artist.name and then we can just join -- like, that is huge. I mean, obviously this isn't gonna do a whole lot for us. Let me -- let me maybe do a little bit of these. Just get both of these at once.
And then I'll get rid of this one. Okay. So, now if we run that, which we should be able to do right now, so, I'll run Netlify Dev Graph. I guess we probably don't need the graph to be running, but this is helpful.
Exactly.
And go API, what did we call it? Search?
Yep.
Nope. That's not what we called it. We called it song. Not really --
Yep. Okay. So, in this case, we made a call into the API. But we didn't actually provide any access token. So, there's no access token. And what we could do. So, if you go back into the code, there's a second argument that the fetch Spotify search takes. Which is some options and one of them -- so, again, this is a object. And it'll autocomplete for you. One of those options is gonna be access token. So, now we have to ask ourselves, how do we get an access token in here? We could go into the web UI and enable that and restart our server. But I think it's maybe more fun if we, again, try to do this from the client side.
Yeah.
So, what you have done here is, you know, you've kind of worked from the ground up. You've said, okay. I'm gonna import my Netlify Graph. I'm gonna build my own custom handler. I'm gonna invoke that, I'm gonna pull apart all the pieces. We know you're using Next.js and the query you're gonna run. Maybe we could try generating a handler for that and see what the result is.
Yeah.
You can do this from the web CLI, but if you want to do it from the web UI. Under actions, generate handler. And if our CLI is running, then it will get that event. And now inside of your code under pages API, you should have a new route. Spotify search. And so, this says, hey, look, I know that where Netlify Graph is, I know you probably want an access token. If you want to use the client's access token, you can uncomment this line. If you want to use your access token, you can uncomment this line. And if you hover over the, you know, the data on line 17, it's just as tight as whenever you did it. You get all that autocomplete in there. Look, if -- if you have errors of data, here is what you need. It will do some form verification. This is kind of the bare minimum. What do you need for this to work? Now you can take this thing that works and tweak it. We are using exports here. One thing to improve, it would be nice to comment if you could use ECMAScript modules. If you open up Netlify.TOML. Most of the things that Netlify Graph does --
Haven't got one of those yet.
You can get pretty far about it. This is under the graph section. So, yes. Graph and this is called module type. Equals a string of ESM. And it's module type, camel case. Okay.
Okay.
And if we restart the CLI, it should pick that up.
Just like this. We don't need to do a pull or anything like that?
No, no. And if you regenerate the handler. Hopefully --
Let me undo whatever changes I made there so it doesn't get a conflict whether I regenerate that handler. So, generate.
Okay. So, now you got your --
Badaboom!
In the meantime, while we add on -- make this more magical, where it can auto-detect these things. You can always override it. I want you to generate TypeScript, even though you don't recognize I'm using TypeScript, I want you to generate TypeScript. Under the module language, add module TypeScript and this will generate a TypeScript file for you instead and you will have full types in there as well.
That is nice.
So, we generated this file for you. But on your pages, there's also a new one called Spotify search form.jsx.
Oh, okay. All right.
This is a new route. You can just go that route now.
Okay. So, the site's live. I'm gonna come out here and this is called Spotify search form. Search form.
Oh. And this is one thing is that it's going to handle auth on the client side for you. So, let's actually install the Netlify Graph auth package.
Okay. Try that again.
Okay. So, now we have a form that handles, you know, your form state and what not. And again, this is just bare minimum. This is just get me started. Get me something that works. And if you submit that, it's going to run it and say, hey, you're not actually logged in. Let's go back to -- be of you log in -- let's go back to the code. The API code.
API code.
Yep. And we want to uncomment line 8 where we're saying, actually, I want to use the users. The user's gonna pass me an authentication header and I want to use that.
And this is important for a couple reasons. The first is, like, by doing it this way, we're letting the user act as themselves. If we did it with our system token, they would be acting as whoever queried that token. Or whoever established that token, right?
Exactly. Whenever you deploy this later on today, anyone will be able to go there. Click login and it will query from there. If you were to query from my play list, it would be their play list, not yours when you logged in.
Ah, that's cool. Very cool.
Now let's go ahead and go to the page. And you can see that whenever you ran it, we automatically detected, hey, you're not logged into a Spotify. You need to log into the specific service. That's already built in.
That doesn't show up until you try.
Exactly.
Okay. So, I try this. All right. There's my button log in. I'm gonna click login. I'm already off, it drops the no auth and drops it back in. And there we go. We've got the songs.
You're now querying on your Next.js app, you have a full form that will run this query with authentication and give you the data back.
And we wrote zero code. More or less. Like we -- all we did was mess around over here and play with these objects. But this is generated. We uncommented this.
You can tell your boss you wrote it. For free.
And for all intents and purposes, that's what's happening, right? This is the promise of GitHub Copilot too. The idea isn't that all the code is being written for us and we no longer matter and we can be replaced. It's removing this huge amount of what I would call toil.
Yes.
You've got to go through the docs of Spotify's API and figure out how to request that token, figure out where to sort it. Then come back out here and figure out this code to write, okay, I got to send this request with this authorization header and all that stuff. And really that does is gets you to exactly where we are now, which is I'm able to send a query and get some data, right?
Exactly.
Now I can come in here and instead of dumping my result, I can just use it to put together a good like list of artists and songs.
Exactly. And one thing that, you know, I hope to be able to add is it would be really nice it you could teach, you know, Netlify Graph how you as a team write your forms. How you write your API backends. So, that one person on your team says, actually, we don't use the standard button. We use our design components. We use accessibility this way. And now that goes out and fills out the GraphQL query, I don't have to know that. I generate the handler, and boom, this is how the team wants all this done. All the stuff I normally have to translate could be embedded into this entire process.
That doesn't exist now.
It does not exist yet. But that's one of the things -- a lot of Netlify's UI  is now built with Netlify Graph. So, all of the graph UI  is built. There's a dogfooding component there. And there's a lot of translation that goes, you know, between -- as me someone new to maybe the Netlify UI best practices. I don't know how to do that. So, it's a lot of kind of, again, fiddley work. Like learning how to translate this. And, you know, as soon as we can push that down, my productivity will probably be two or three times higher. Look, if someone has updated the best practices, I don't have to learn this manually. This is built into the tooling.
This was honestly, when I was at IBM, one of the biggest challenges we had was that we had full teams dedicated to going and embedding with other teams to help them update to the latest version of the design system. Or update to the latest version of the authentication management or whatever thing it was. And so, you had these like easily dozens of engineers whose entire job was cleaning up boilerplate on a rotating basis. It felt like a very losing battle where as soon as you walk away from a team, they're not trained in how to build the design system or auth or security. They're trained in building UIs. If we didn't have automated ways to bring that together, they were on a carousel of deep sadness.
That's exactly what I was thinking. That's a lot of sadness. That's challenging.
Yeah. And so, you know, that is definitely -- this to me feels like the reason I got excited about Netlify in general when I first joined the company is that it feels like the Netlify promise has always been, we're not gonna take away developers' ability to be developers. We're just gonna remove the junk that prevents developers from building cool things. We're gonna unlock the boilerplate and the foundation and the, you know, the crap that you have to set up to get started. So, that you can just build the thing this you're excited about. And this -- why I'm so excited about this is that this feels like it delivers on that promise at a new layer of app development. Where Netlify was focused on frontend source code, Netlify Graph is giving us a step further back. You know? Where we added serverless functions, huge productivity boost for me as a developer. I feel like I have super powers. Adding this is adding super powers to the super powers of how I don't have to go arguments with GitHub's which settings pane do I need to be in. And I want to show why this is so freaking cool. Hold on, before I go down this rabbit hole, I know you had more to show. Do we have enough time for me to go down a quick rabbit hole and show the token process?
It might be fun to if you want to hook up a mutation to actually play one of these songs and see if we can combine it together to the show album and the name of the song. Whether you click on it, it plays on the player. If you want to do that.
Absolutely. Let's do it. So, to do that --
Iteration mode.
Absolutely.
Let's start first by pulling in the mutation. So, let's go create a mutation to actually play a song first.
Okay. All right. Let's see. Am I still running? Still running.
Merge things together.
Here we go.
All right. Create a new up there. Create a new mutation. And give this a name. Just maybe play. And yeah. Under Spotify, we should have a list -- we can just kind of see, what are the actions available? Mutations are actions that we want to take. And we want to play a track.
Okay.
And again, just that dollar symbol. This is gonna say, hey, this is the track ID. And having -- this is going to modify the player that you have. And it's going to update the same. It's gonna return you the new player state. So, you can say, are you playing?
Okay.
And see where it says equals, quote, quote? Up at the top. That's saying this is a optional variable. Let's make it required. So, add a bang there. And we'll see how that actually affects our setup. So, let's go ahead and save that. So, we can save the changes. And then -- oh, yeah. Good idea.
Okay. So, I'm gonna save. And then go ahead and generate the handler as well.
Okay.
And if we go back to the -- looks good. If we go back to the first page you had with the search, maybe we can grab one of those track IDs.
Okay. So, out to my search... here's the track ID.
Okay. New let's open a new tab and go to the play song form.
Play song. Form.
Form. Yep. Okay. And it needs that. If you submit, you'll probably get an error back saying, hey, you're not logged in. But also, oh, we need to tell it on the API part which authentication token to use. If it falls, it doesn't use any authentication token.
Okay. We need this one. Okay.
Okay. And it's working. It's just saying that, hey, you don't have any Spotify player open.
Oh, I don't have -- will it work on the web player?
I think it should.
Yeah. I haven't installed Spotify on this yet. Okay. Open the web player. I'm already logged in. Good, good, good. All right. So, theoretically speaking, if I go to like -- let's go to Liked Songs. I'm just gonna play one quick second of this. Right. Just to make sure that it's active. And then I'm gonna come back here.
�
Boom! All right.
Wait, where is it showing? Here it is. It's playing. That is freaking incredible. Right? And yeah. Like I'm only gonna play a couple seconds of songs so we don't get muted on YouTube and Twitch. But like unbelievable how fast that was. I didn't write any code. I just uncommented one line of code.
So, let's -- let's go into the query explorer and go back to the original query of search. And what I would like to do is on the results for track, let's go into albums. So, on the left there --
Tracks --
Tracks. So, not that one.
Not this one.
This one is the search results.
Oh, track --
Yes. Let's get the image. Images, URL, height and URL is if you want to have it proper. But you can just put it as-is. Let's go ahead and save the changes. So, what about it flows through.
Okay.
And we should be good to go now. You could --
Do I need to re-generate my handler or anything?
No. It might be a good idea just for the sake of it let's go into Netlify.TOML and change the language to TypeScript so we can see what that is. We want module type to stay ESM.
Oh.
There's a new query called language, that's equal to TypeScript.
Like so?
Yes. Save that. And now you can go ahead and generate your handler for you. And with any luck, it will generate... let's see... generate handler, Netlify function. You may have to restart the --
Oh, pick up on the thing --
Yeah. But with any luck, it should hopefully generate a .tsx file. Okay. It doesn't look like it.
Maybe it's because it's already finding this one?
Could be. Well, we could just try to wing it and see what happens.
My favorite one to be.
Yes. So, the reason I was wanting to do that is the -- this is the client side page. So, it doesn't know what data it's getting back at all. But we know. And that type actually exists. So, if we wanted to name this to -- change the name to .tsx, we could actually potentially import a -- the type in here.
Okay. Like that right?
Yeah, exactly.
Right from lib, Netlify Graph, is that right?
Exactly. Yeah. And there should be a type in there if we autocomplete called search -- modify search.
Okay.
So, that's the result. And then whenever we get the results.data down here. So, we submit the form. Oh, result. So, online 11, I believe.
Line 11.
Yeah. So, we can say that use state is actually of type. Spotify search or null.
And we do that like --
That's a open curly, yeah, Spotify... search. And then instead of a comma, it's a single pipe.
Got it. Doesn't like that because I'm doing what?
Oh, at the bottom was there something there? It says affected zero type arguments, got one. Hm... I don't know. I'm not super-prolific -- or great with TypeScript. Let's see.
I'm also like mediocre at best with TypeScript. Maybe what we can do is one of these? Like as Spotify search? Is that completely unacceptable? Why doesn't it want --
It seems like it's not picking up that it's TypeScript. I wonder if you need to restart? But all right. We can back out. We can abort. Back out. Just change it to JSX and we'll continue with our own hacks.
Okay. We'll do it --
For someone that knows TypeScript, they should be able to if I can that out.
There will be TypeScript in the future for you TypeScript users. You don't want them written by me.
[ Laughter ]
All right. So, now where we just do that kind of pre- and -- pre-tag and we put out all the data. Maybe instead there have, we can pull out -- it's gonna be something like result dot, you know, data. And it might be easy to do this query inside of the search -- or Spotify search, yeah, over there. Because it knows the types.
Yeah. We've got the data. We can get the data.spotify.search.tracks. And then that's gonna be one of these. so, then we want the track. And inside of this track, we want to get the track.name. Track.artists. Dot map and we'll get the artist. And for each of these, we want the artist.name. And then we'll be able to join those. And then we want the track.album images URL. Or dot -- just get the first one. And we'll just get the URL. Okay.
Okay. Looks good.
So, those are what we need. So, I can go and take this back out. Come out here to the search form. We'll put that in here. And I can change this to be some JSX instead of whatever this is. And so, we can set up like an LI. And that LI will have a key of track. ID because we know we have that. And we can do -- hm. Let's do a -- a href. We need to figure out what that is. But we can in the meantime say track.name by track -- and then just copy this part over.
And then we can have like album and take this part over. Or no. We want the image. So, let's forget about that part. And instead we can do an image source equals one of these. And then as an alt we should probably get the album name which I'm not gonna do right now. And theoretically speaking, this is gonna work. Use next image instead -- we won't worry about that right now. Here's our --
Optimize. You need to optimize.
Result.data.data -- I screwed something up. Result.data dot --
And then data will be probably empty the first time we load it because we haven't actually gotten any data back yet. So, maybe result, end, end, or something like those lines.
Does that explode? Naw. That's good. All right. So, then we can go... nope. Search, tracks. What does this say? Cannot read properties of null? How dare you!
I'm sorry, I think Spotify is null there.
Spotify is null.
Yeah. Exactly. You can just add question marks everywhere.
Okay. So, we need to do something like a little bit of error handling here.
The errors will be shown already.
They will.
Yeah. I suspect that we're not -- the state across page refreshes. So, I think if you -- oh, yeah. Result.errors. Okay.
I forgot to actually include this. So, we got these -- oh, right. We're missing our auth. Great. Fine.
oh. Did we regenerate the handler? Maybe we need to uncomment.
Yes. We certainly did. Get this out. Try this one more time.
Resubmit.
There's our details. And down here at the bottom, we should get albums. All right. I'm gonna take these results out again. And let's just -- we'll just comment these out in case we need them again.
Okay. And now what we want to try to do is see if we can have a button that when we click it, we'll call that mutation. Or call that backend to run the play song mutation.
Okay. So, we've got -- we've got the ability to kind of click these. We need to add the right URL. And so, the URL would be --
Well, what we want to do -- we don't want the URL to take us there. When you click it, it starts playing in your player. Exactly, yeah.
Okay. Got it. Okay. I'm going it wrong. So, we're gonna do a button instead. And our button will need to do a thing.
Yeah. If we look at the play song form page, it should have some code that we can just kind of steal.
Perfect.
So, there should be a submit form there. And we just want to copy that over. And Jay. Perfect. That looks good.
We'll be able to -- and we need to get the body, form variables, track. So, we need to submit the form with probably the track maybe?
I think it's a -- yeah. It's a object that says track ID. So, track IDs. Yep.
track IDs. Just like that.
Track IDs. Sorry, this is actually --
Let's go back into the search form. I'll walk you through. This is where the TypeScript would come in handy. There's a TypeScript type for the input. It will tell you, you need to be passing this thing in. Let's delete form variables online 84 and we'll just make it an object with track IDs. And then an array with just track that ID.
Okay. Then we can do it like this because we're declaring the function like this. Perfect.
I was gonna do it the other way and I thought that was brilliant. Yeah.
OnClick equals submit form. And if we wanted to, we could even play on Spotify. So, now it's clearer what it's doing. Okay. And then --
Okay.
And nothing up my sleeve here, this theoretically works. Oh. No. I did it wrong. It -- it submitted -- also, what happened? Nothing happened. So, I need to come back here and figure out what I did. It submitted to the play song form. It's not -- that's not the thing we were looking at. We were looking at this here. Okay? So, there we go. And then when this submits, I want to catch the event. And we'll event, prevent default so that it doesn't send us anywhere. And then -- then what?
Do you want to console.log the results -- the form result there, maybe?
All right. Oh, we don't have a set result either, do we?
We do. Because they both reuse the same structure.
Oh, good. Okay. So, if I log this result too, that should also --
Yeah. Except this is going to overwrite the results. So, let's copy out the set result.
Take this one out.
Right now the result is the result of the search.
Right. That would break everything.
Yeah.
Okay. So, then we're gonna come out here. We're gonna search. Get our tracks. Click it. And let's look at our object here. We got an error. Unknown error. Spotify play track.
Assume that it's like your -- yeah.
Yeah! �
Okay. Let's try this one more time here...
�
�
And then this should work for anyone, right if because this is just using the client-side authentication. Someone logs in and, boom, they're controlling their Spotify play we are that search form.
That is outstanding. This is just so cool that we're able to build an app this quickly. And, you know, I mean, we'll be able to spend our time on the functionality of this thing. Of, you know, making this look nice and making sure that, you know, we've got the right accessibility measures in place. And all those things instead of arguing with APIs and figuring out how to put the right auth in the right place and all that stuff. This is unbelievable. Like -- I feel like this -- it just makes it so much more fun to build for the web when you get to build like this. You know?
Exactly. And I think as we add more, you know, APIs to the other side of this, you know, any GraphQL API should be able to participate in this. And you will get all of that same experience as a developer. Right? You get all those autocompletes and autogeneration and everything.
Okay. What I actually want to do here is I want to deploy this because I want people actually to be able to go and try. Okay. Get commit then. And then say, search in play is working. And let's just see -- let's just see how easily this goes live. Because I know I had some issues with the way I hooked this up. I suspect it's gonna work?
Yeah. We'll see.
[Laughing]
It's a risky move. But why not?
Now while we're waiting for that to build, we can come back here and look at Graph. Today, when we look at what's available, we have box, so, file storage and sharing. Contentful if you want to get at your CMS data. GitHub, npm, Salesforce, Spotify and Stripe. And so, this is a pretty -- a pretty good starting point. But we're able to add a lot more pretty quickly here, right?
Exactly.
So, where should somebody go if they're like wanting to see an API hooked into a Graph? Or if they're a company that wants to get in on this?
Yeah. So, I think the gentleman we're working with is named Dan. He heads up kind of the expansion plans around APIs. Tweet at home. Den is codes.
That's den if you want to climb too his Tweets and give the what for on what APIs you want to see.
I see Shopify in the chat. That would be an excellent one. Being able to get that same experience with Shopify.
Yes, please.
And then there were a couple of questions earlier about mocking the data locally and we don't do this currently. But I will just say that there are some really, really interesting plans where you should be able to develop against a service that requires authentication. Not even have an account, and as soon as you sign up it should all work.
Ooo...
The production -- the fidelity of the mocked data down the road should be very high. We're working on that. No ETA as of yet. But plans are being lain.
Yeah. There's some really, really exciting things coming just -- I mean, this -- this is huge. And then when we start looking at the, you know, what we can do with these. Like if I click into let's say the npm one. I'll enable it. Start querying. And go into my active session here. And I can then go into let's create a new -- create a new query. Or actually, a new subscription, right? This is the one that you showed me that kind of blew my mind. And so, if we just want to watch like all publish activity, we can get the name. And this will just show any published package. Is that right?
Yep.
Here it goes.
There it goes. Package is being published.
Is there anything that's being published on npm right now. We've got a subscription. Just -- just incredible. I'm not making it so that you can control my Spotify. But yeah. So, BloomingBean is asking how do we do Cypress testing on this, you would be able to do Cypress test on query data but not mutation data right now. Is that right?
Yeah. That's an interesting question. I guess you do it the same way you do any other kind of form that is making an API call. Whether you want to mock that API call out or not is up to you. But otherwise just, you know, as far as Cypress is concerned, it's just another web page making another API call.
Yeah. You don't necessarily need to mock out like our API. We do the testing for you on that. So, you can -- you can kind of trust that the way that you would trust querying GitHub. You don't necessarily mock out GitHub's whole API either because that would be just an incredible amount of work.
But I do think that to that point whenever we add the ability to automatically mock high fidelity data, then that plays nicely with the Cypress tests. I don't have time to sit around for GitHub to actually, I can wait for the mocked data.
Can we use this with serverless functions? Yes, there's going to be a whole thing how this is actually built. But this is a project we started working on for -- yeah. It's still private now. We'll open source it when we write the code. OSS.love is a way for you to go and send a Valentine to didn't people in the community and also gives you the ability to like -- to sponsor them or something. So, if I go to here. And I want to log in with GitHub, this is using Netlify Graph. Or, no, that's actually using Okta kit. We're getting an OAuth token using Okta kit. And then I want to go in here, and Sean. So, this is using Netlify Graph. Right? And then I'm going to ship it.
And this all runs through serverless functions. And you can go in here. Make that work. So, under the hood what's happening is we've got our Netlify functions set up. And so, we're using Netlify Graph and then we have the -- the suite of OAuth functions that we used to call against Okta kit OAuth methods. Because honestly, I didn't know that Graph would do that for me or I probably wouldn't have written it myself.
I was gonna say, that all goes away now.
But under here, this is a generated function that I renamed. We renamed a handler to user.ts. Used the OAuth cookie and pass it into Netlify Graph with the login and use an OAuth token instead of an authorization header and it all gives us back the data. So, we're able to do all of this stuff. And so, wait that you've built Netlify Graph, if I understand correctly, is you're framework-aware. Because we were in Next, it knew to build pages in API routes. If I had been in Eleventy, that would have built out like a Netlify functions folder, is that correct?
Exactly.
unreal. So, good.
That's the first step. That's us teaching it how to work in a friendly manner with these different frameworks. But the next step is to work in a friendly manner with your specific codebase and your specific style as we kind of talked about earlier.
Yeah. And so, Kurt, to answer that question about generating the handlers, if your project is next, it will generate the route. If you are in Eleventy or Gatsby or whatever, you can just hit generate handler and it's gonna generate the serverless function. Or if it's in Remix, I think it has Remix-specific loader code.
Exactly.
Really specific stuff. I love it. I'm so happy with this.
It's exactly that idea of I don't know this codebase. And I want to like -- I'm feeling good, I'm getting my data, querying, I'm mutating. And I want to figure out how to get it sent to the codebase, I've never used Remix or your specific codebase. Show me how to do this. And then I can learn more quickly. I have something that works that I can just of just tweak. It's meant to be an automation that increases competency.
It's so good. It's putting on -- like putting on a mech suit. You're a developer. You're capable of what you're capable of. And you can strap on this extra suit that allows you to do more things without learning more things. That's the idea of programming and this idea of low code. It's not to make you less of a coder. It's to give you more power without having to gain additional fields of study worth of experience. So, just really, really incredible how effective this is.
So, this is the live thing. I'm gonna log in. I'm logged in. Okay.
�
live website, y'all. So, you can all go and play with this right now and mess with your own -- your own Spotify play lists. So, good. It's so -- so good. I'm just mad at you for how good this is. Like -- chat, what are y'all gonna build with this? Let's hear some ideas. And also, what are you excited to see come in? We saw Shopify get listed. What else do you want to see in Netlify Graph? And while we're doing that, Sean, where should people go if they want next steps. If somebody wants to built their first app, where is the next place to go?
Update your Netlify CLI and go into any Netlify CLI project you have and run Netlify aggressive dash, dash graph. We recognize you're using this framework, why don't you connect services. We thought it would be unwise to stay up until 2:00 the night before to implement this. But we should have it out soon. Actually, inside of the -- if you go back to the codebase we were working on and then you run Netlify Graph operations inside of the terminal. Yep. So, graph, colon, operations. This will actually give you a list of --
Ooo!
And it could also do graph handler and it will ask you -- yeah. NTL graph hander. This will stay, hey, which of these do you want to generate handler first? This will be in the web UI, but do locally. We're going add two more there. One of which is NTL graph operations share. And what that's gonna do is say which of these would you like to share? It's going to look through your operations and it will then check -- it will pull that operation out and check for any hard-coded values and say, hey, you're about to submit with these values. Just in case you have an API token, just a once over. And if you're okay, it will actually submit that to a centralized repository. And anyone else can say NTL graph operations import. Or search. And so, you should be able to say, well, I've just added Spotify. What are the available functions that people have submitted already? Oh, I want that. And you'll pull it in. You'll automatically add that to your library. You can actually share functions now across languages which is a thing that wasn't possible before.
So cool.
I think that's gonna be a really exciting way to help people get started with -- any time anyone asks any type of support question on Twitter or on a support forum, how should I do X with Graph? It should almost always be graph, operations import this ID. Comes in, and generate the handler and it's all there for you.
I hadn't thought about the support implications. Like, import this and it will run.
Exactly.
That's huge, that's huge.
Once it's there, it's available for everyone else as well. In the future, we'll build this into the web UI, show me everything available for Spotify. The form, try there, if you want to, click a but then and add it to your library.
Dang. That is so freakin 'cool. A lot of legitimate things, Sanity, swipe, orbit, Google Calendar, notion. Really good requests out here. Things that I would also love to see. And all things that are possible. Just a matter of what order we do what things, right? You want to see your things come up first, make a lot of noise. Go well at Den. Den's gonna be so confused why he has so many Twitter DMs. This is who you want to talk to. Whoops. Copy. Oh, man, Kurt, thank you so much for all the gifted subs. Thank you. That is -- I love that. Y'all, now have access to a whole lot of boops and other nonsense. Make sure you take advantage of that.
Sean, I think this is a wonderful -- a wonderful overview of just -- what a clever idea. And, you know, I have been following your work since the OneGraph days and I always saw big things for OneGraph. And it feels like this is -- this is where it really starts to feel real. So, I'm just super, super thrilled about it.
Do you have any parting words or anything you want people to keep in mind as we start wrapping this up?
It is still in beta form. Rough edges. It's in general availability so everyone can try it out. But the more feedback we get, the better. What frameworks would you like to see more support for? Where do you fall over? We want to make the getting started, with graph and with any new API behind it really smooth. Any complaints, issues, ideas, please send them over. We typically can incorporate them in a very, very short time. You have seen our turn around times before. You can vouch for our ability to do some quick turn arounds on any suggestions that people have.
Yes. And I linked to the docs. The docs will be linked in the blog post as well. But if you look at these docs here, there is a feedback link. So, you can go give feedback on this survey. That actually goes into our system. That is really, really helpful to us as a team for identifying what you like, what you don't like, where you hit rough edges, where things broke. This helps us keep organized so we can keep track of things happening. Y'all are putting in work with these boops. You can't actually see the link that I'm showing. It's here under this feedback headline.
[ Laughter ]
All right. So, with that, I'm going to do one quick jump back to the blog post here. Make sure you go and give this a read. It is really, really exciting stuff. I am -- I am like truly pumped to be a web developer at this particular moment because it just feels like we can do so much more than we could even 5 years ago. So, I'm really excited to see what everybody does with this. Please let us know. Tweet at Sean, Tweet at me, tweet at Den. Let us know what you're building and show out of what you're building. We really want to see it. And please let us know whatever you want to see, whatever works a certain way and surprised you. Any feedback you've got. That's super-valuable to us. Sean, I'm gonna put you on blast on Twitter one more time.
I'm gonna do one more quick shoutout to our sponsors. We've got White Coat Captioning, Amanda is here doing the live captioning for us. Figure out what went wrong with the link. But that lives on Streamtext, made possible through Netlify, Nx and Backlight. Keeping little lights on for all of us and making this more accessible so we can do more shenanigans like these. Sean, any last words before we wrap up?
Thank you for this. And I'm excited to get feedback. Let me know the feedback on this.
Yeah. Can't wait to see what you do. I'm thrilled to have been part of the Netlify Graph launch. I think this has been just so much fun. Please go out and make sure you send some of those open source Valentines, please. Just spread the love a little bit. We support organizations now too. You can also thank Babel or others that make your life easier. Go make them a Valentine. Send them out on Twitter. It really does mean a lot, even if it's just a little card.
Those are also world class developer puns.
Okay. Lynn Fisher is a freakin' hero. How did she come up with so many of these so quickly? It's amazing. She's like got to be the best in the game. So, please, go enjoy these puns. Share them out and spread a little love. And keep in mind, you can definitely sponsor people. Please, you can do it one-time sponsorship, 5 bucks, 10 bucks. It makes a big difference and helps keep open source more sustainable. Sean. I feel like we did it.
Yeah. That was fun.
We'll call this one done. We're going find somebody to raid, so stay tuned. Sean, thank you so much. We will see you all next time.

In [ ]:





​


","[(0, 0.45021966), (1, 0.0645719), (2, 0.48520842)]",0.45021966,0.0645719,0.48520842
"So, who am I? I’ve been doing the dev rel thing really since about 2008. Actually, anyone here who remember Adobe user groups, anyone ever part of an Adobe user group in the back in the day?Actually, Sid Maestre and I actually ran the Bay Area ColdFusion User Group together, and that’s kind of how I got my first taste. I was a developer, and I started running this user group, and I got a lot more enjoyment and passion out of being part of this user group.And we created a bunch of other ones, transitioned my career, ended up going and working for VMware, and was running their sort of social media program. Dev rel wasn’t really a thing for them, but we were interactive with it.And then I’ve kind of worked with Sencha, spent the last four years at Atlassian. And recently, last June, I joined Nutanix. Now, anyone here actually ever heard of Nutanix? Okay, we got, good.Nutanix builds primarily, up until about a year and a half ago, two years ago, it was a hardware company, it was building on-prem enterprise cloud, is kind of what it does. Now, we’ve been transitioning into a software company. And when you transition into a software company, what do you need? Well, you generally want to start talking to developers if you’re trying to sell software.So one of the things that we have of value at Nutanix is start with the why. Why do you need a developer program? Why should developers care about you? All that.So when you’re first trying to get one off the ground or you’ve recognized a need, you really need to figure this out, and that’s one of the key parts. So, why do you need it?So this is, I did some research. Anybody ever work with Developer Media, Code Pen, or sorry, Code Project? I got this number here, it’s called 34%. Any ideas what 34% might be? This scares the crap out of salespeople, which I truly enjoy doing.34% is the number of opportunities dropped because of developer influence. So you’re losing a third of your sales because developers either say, “No.” We did a survey last November, so this is fairly recent data, we had a little bit under 1,000 developers say they reject software given to them by their management or team lead. Often, very often, or all the time, I wish they’d just give us the credit card so we can buy our own stuff.This number here is why I’ve been able to justify to my management why we actually need to talk to developers. Because even though the developer doesn’t have the budget traditionally, although more and more are getting it, they have enormous influence in your company, and if they don’t adopt your product, especially as we go to a subscription world, they cancel the subscription and things go away, profits go down again and again. So that’s your sales justification of why developers matter.So the other thing that I’ve found over my learnings is what are you trying to do, what type of developers are you trying to reach, what type of program are you building. And I haven’t seen a lot about this, this is a fairly new idea, came up with this for a chapter in the “Developer Marketing” guide that I was actually sponsoring from SlashData.You got a couple of different areas where your developer programs live, and hopefully, yours fits into one of these. If yours doesn’t, please come talk to me. I’d be really interested to hear which one doesn’t.So traditional developer marketing you see is, you know, a lot of people have got this, this is one of the oldest ways, is marketplaces, you produce an OS, you need to talk to developers to make software for your operating system, Apple’s App Store, Atlassian’s Marketplace, you know.You’re going out to get your third parties to actually build stuff for your platform, very common. Either they’re building extensions to your product or they’re building stuff to run on it.API consumers, this is where Nutanix lives, this is where a lot of your infrastructure lives. You have an API, you need to make your stuff talk to other stuff so it plays well in its ecosystem. Because no data center is completely homogenous all the way through. And even in that, you know, you still need your Microsoft product to talk to other Microsoft products, and vice versa.For marketing tools for developers, this is an area that I have, this is probably the closest to the more traditional marketing. You have a tool, like Jira or GitHub or something like that, and you will actually need developers to buy and adopt it. And doing that, it’s a little more traditional marketing, but you’re marketing to developers.And one of the biggest differences in marketing to developers compared to other more traditional marketing is developers don’t believe you. They have to try it. If they cannot get their hands on your product for free to actually muck with it, they don’t trust anything you’re telling. And I know this because I don’t trust anything unless I can kick the tires on it, too.And last one, and this has come up more recently, but I think is a larger and larger area, is developers are required. So Contentful is a great example of that. Anyone here has heard of Contentful? I think Shai is in the back there somewhere.Contentful is a really neat product. It’s a great CMS. Here’s the problem, there’s no front end on it. If you don’t have a developer, you can’t use the darn thing because there’s no way to get the code out of the back end.So other examples of this would be Twilio. I think I was talking to Weavr… This is a very common thing, and this is where if you do not have a developer relations, developer marketing team, your product just flat-out fails.And there are some areas at Nutanix, we’re getting that as well. But for the most part, open source projects also can fall into a couple of these different buckets as well, but that’s where I’ve been finding where your programs are.So, okay, you’ve got these four buckets, you’ve figured out what your program is, now, how do you measure it? And this is where the primary difference between these projects are, is that your metrics for each one is different.For Marketplace, if it’s a “for sale” marketplace, that’s easy. Does it make money or not? Are people buying stuff? Whereas API consumption, and this is a problem I have, is we make clusters that go on to DoD dark sites. That doesn’t phone home and tell us that someone’s using the API.So we have no clue. And so, how do you find that out? And those early metrics is how you do it. This is also where it’s really important to have an executive champion for your team. Developer programs take anywhere from 6, 18, sometimes even 2 years to build, and it’s slow going.The metrics aren’t going to show up, especially if you’re new. You need to make sure that you have a champion that understands you well enough to be able to say, “Don’t worry, it’s going to be okay.” And this is especially important as if you bite a big one and have an event or something fail miserably, which I’m going to get to.So you want to get a few early metrics. You want to get some baseline stuff.Other big thing that you really want to do quickly is when you come into a new company and starting a new program. Hopefully, you already have customers and people using your products. Talk to them, find out where their pain points are, talk to them on the phone, talk to them at events.One of the big things that I just did is I actually hired a researcher, and we’re actually getting 30 to 40 of our customers on the phone and trying to get people that are both in the land of suck as well as the people that are being awesome, to reference our previous speaker, to get that information. And we’re going to share that both with engineering and internally so we know where we’re going.So other thing you want to do is build your team, and building your team is critical.And a lot of people are, “Well, let’s just go hire a bunch of evangelists, and we’ll go to a whole bunch of events. And great, okay, but here’s the problem, you’ve got all these people, but your docs suck.” So you’ve got a whole bunch of people that are excited to try your product, and then they can’t because your onboarding is horrible. So you got a cart before the horse there.So my personal opinion, the most important hire that you can make when you start a program like this, bar none, is a phenomenal content writer, ideally who was a developer before, but you need someone that’s going to make you your best, first, get onboard tutorial, you need to make sure your API reference docs are great, you need blogs.And you know, we have a site called developer.nutanix.com, we’re actually rebranding it to nutanix.dev. By the way, the .dev top-level domain is awesome, and I’m hoping more and more people adopt that, because I think it’s just so much easier to say than the developer.whatever.com. So nutanix.dev is going to be our new site.And so getting somebody that really builds your portal is important. So your portal is your face to the world. If you do not have a good portal, then no one cares, you just don’t exist, you know.And there’s varying quality. Who here is actually happy with all the documentation on their portal? Great, not a single hand, fantastic. Every portal can always be better, we’re always reiterating, you’re always doing great things with it, but there’s always that one part that doesn’t look great.So you know, but things that you need to have is a great onboarding experience. The better you can make your onboarding experience, the faster you get people out of that valley of suck. And that’s key.I really think blogs are important, because getting people to write blogs for it, especially a developer-focused blog, marketing sites, your .com site, that’s for people that buy, and I always say that, “This blog is for people that do.”So people that actually have to use your products in a technical way, not marketing fluff, but this is where this blog is, you know, get the engineers and get the PMs writing about this, and this is one of the ways I’ve found actually to engage with PMs and get them involved so they actually care about this. Because they just wrote a blog post that got X number of views, and now they feel good.So that’s a great way to do it. Other thing I highly recommend, and I know there’s always this temptation, “Let’s go roll our own CMS so we have a custom portal.” Unless you are a CSS company, please avoid that temptation, because after you go, nobody knows how to rebuild your developer portal.Use WordPress for the front end. You can hook almost everything into it. It’s great. Something like that, use something that you can, that more people can know, and upgrade. And if you have a very specific language, use that specific language as blog software.There’s lots of blog software out there, don’t go write your own. I know, I’ve been in three companies that wrote their own blog software.So, great, you got a portal. Now, you need to get the word out. You need to do events.Doing events is tough, because you’ve got a couple of options. You can go to meet-ups, you can go to, do your own conferences. There are so many different varieties, dude, hackathons, labs, things.So this has been my experience. I find that, and I might get booed off the stage here, I find externally-facing hackathons suck. And where’s the tomato? Okay, no tomatoes.Externally-facing hackathons suck because the code never gets used, it’s a bunch of people that are trying to struggle to learn what it is, and all they do is basically spend 12 to 24 hours or 48 hours in the valley of suck. And you know what, that’s not a fun time.I much rather do people hands-on labs, so they learn your product, and then expand upon it. Now, that says, internal hackathons are phenomenal ways to build your product inside the company, and the dev rel team should be deeply involved in an internal hackathon.At Atlassian, we had a thing called ShipIt, and it was great. There was more innovation that came out of that and products that came out of that. It was really the engine that drove the company.And so internal hackathon is great, external-facing hackathons, it’s just a long time in woe and suck. So, that’s my opinion. We’ll go from there.So, that was basically my thing. So I really like hands-on labs that actually get people with a test harness. So to do this, we did a tour. When I first came into the company, one of the things is I wanted to actually know our customers. So a tour is a really good way to do this.We had this .NEXT On Tour that went to 11 different cities across North America in 5 weeks. At that point, I was a team of one, so I got a lot of mileage, including doing a day trip to Charlotte, North Carolina from here. That was two red-eyes, it was brutal.But the whole thing about this is this is my “Hello, World!” This is actually a screenshot of what it is. This is an analytics framework for being able to manage your clusters. And that’s a really great tool, because this year, it’s now working with my API, and I teach people how to swap the different pieces out so they can play with your API.The other advantage of this, this is a boss screen. I call this the boss screen or a wallboard screen, because after you’ve come to my lab, you can go back and show this to your boss and say, “Hey, boss, here is a great way to see what’s going on in your data center, and you don’t need access to my back end now to get your metrics that you need to report on.” So this is a really handy tool.I highly encourage you first, prior to your onboarding, an analytics package or something that would get information out of whatever your thing is into a consumable way. It’s a really great first project so that it’s beyond that “Hello, World!”So now, let’s talk about some train wrecks. So I gave you a little bit about my On Tour. It was great. I taught 400 people. We’re doing 90-minute labs.Really, other big thing that’s really helpful, if you’re familiar with VDI or virtual desktop infrastructure, if you can do your labs with virtual desktop infrastructure, it makes your life so much easier. Because if you’re ever running a lab, setting up a dev environment is fun, right?So if you eliminate that, where people just log into a computer through a web browser, you’re ready to go. Nutanix, small plug, we make a product called Frame that does this. It’s cheap. Give it a look because it makes running labs really, really easy.So let me tell you a little story about London .NEXT. So .NEXT is Nutanix’s user conference. And user conference, these are people that are managing IT infrastructure at scale, and these are large G2K Fortune 500 companies coming in, and these are people that are spending all their days, you know, moving stuff around, making sure the loads don’t fail. So not a lot of developers, these are mostly admins.So we did, my thought originally was we were going to go do this API Accelerator Lab, this lab that I just did all around the U.S., and we were just going to do a little bigger, expanded version of it for this. And we advertised that because we thought that was cool. Then I made my mistake. Who’s here heard of IoT? IoT is this great newfangled thing that’s really exciting and sexy, and we came up with this IoT product.So we changed our program from being relevant to someone’s day-to-day to something that they kind of may care about somewhere two or three years down the road. And we thought this would be great so they’d spend all this day, we’re going to do a lab in the morning and then you’re going to do a hackathon after on the other side, and it’s going to be great because you’re going to learn all about this stuff. We had cameras for image recognition, you’re going to do machine learning, this is going to be great.And it completely flopped. First up, we had the most complex hardware that we could possibly do. We shipped a cluster, a 4-node, $30,000 piece of network hardware infrastructure that sounded like a 747 taking off at the back of the room. We then wired it to 23 Intel NUC PCs to work as our edge devices. And then we hooked in cameras, and we had 100 of these little webcams that we thought were great.Unfortunately, we didn’t plan for was that the Wi-Fi could only handle streams from 3 cameras for a 110-person event. Yeah, that didn’t work. And then, to top it off, it rained, because London rains occasionally. So out of the 110 people we had signed up, 46 walked in the door.And then we asked, “So, okay, we’re going to do this. How many people in this room are actually developers that write code regularly?” I had two hands. So it just, and then on top of it, people were expecting one thing and they got the other.So they just crucified us in the comments. People hated it. Learned a lot of lessons from this. Don’t change horses in midstream, really make sure you know your audience. And we got rated on a 5-point scale, and we ended with up 4 out of 5, 60% of it said it was 4 out of 5, and we only had 20 people at the end of the day.The good news at the end of the day is, to boost our ratings, they all went home with a $900 NUC. So the 20 people that did stick for the whole thing actually did well.I learned a lot with this, and we revamped it. We just did our last thing in a .NEXT in Anaheim about three weeks ago. We did a lot better. We did a pair of keynotes that were fantastically well received. We hired a guy named Jin Kim, who’s big in our field.We did a customer panel, where people actually heard about who our customers were. And then we actually did hands-on labs, where people actually were able to self-direct. And we had really good people in it.So we ran a more traditional developer conference, we took the feedback, and we ended up with a 90% rating out of it. So making that change, learning from the disaster is really good. But having your management understand that sometimes you have a disaster and that you can recover from it is pretty critically important.So there’s sort of a nutshell of what I’ve been doing the last year of building this from scratch. It’s been exciting and lots of lessons learned. But you learn from your mistakes and you learn more from your successes. So don’t be too afraid of making them, just make sure that you record it, have really great post-mortems, and learn how to enhance it next time.So thank you. Actually, one more, sorry. I wanted to leave one last quote. This is really what developer relations in my mind is all about.We are empowered to make people more powerful. We are the conductors. We are trying to get people to build more and do more for their own benefit. So this quote, it really spoke to me for that, and I hope you guys take it and go from it. So, sorry, that was my last slide.","[(0, 0.4219499), (1, 0.15155603), (2, 0.42649406)]",0.4219499,0.15155603,0.42649406
"Okay. So, this is part two of the talks that you just heard from Alison. She talked a lot about executive buy-in, especially leadership buy-in, as well as branding, and dove into internal metrics. I’m going to go ahead and dive a little bit deeper into the metrics that we put out, internal ones for our communities and external.A little bit about me before I begin, my name is Shilla Saebi, and I’ve been with Comcast for a little bit over nine years. I am an open source program manager. Prior to this role, I was on the cloud team, and I was an operations engineer.You might be wondering why Comcast has an Open Source Program Office or what they’re doing with open source. So, I will give you all just a little recap of the journey that we’ve been through.I worked with a number of folks that have been at Comcast longer than I have. They’ve been there for much, much longer, and they’re open source contributors. And I reached out to a bunch of folks from different orgs as well, to find out, when did open source really begin at Comcast? 2006 was the date that was consistent.We know that in 2006, we were large consumers of open source. In 2012, we launched our first two open source projects. And in 2013, the Open Source Advisory Council was formed.The Open Source Advisory Council consists of folks from our legal team as well as security and engineering teams, well-respected engineers across the company. They are a group who decide whether open source contributions should go through or should not go through. And so, 2013 is when that was launched. In 2015, we were now large contributors to open source. We won the OpenStack Superuser Award.In 2017, the Open Source Program Office was created. And that’s where you’ll see we joined a bunch of different foundations, and did sponsorships like the Linux Foundation, CNCF, Apache Software Foundation, etc. We also launched comcast.github.io, which is a showcase of our open source projects for external community folks.Fast forward to 2018, last year, we had our first open source conference that was available for, not only Comcast employees but to the community. We had about 70% external attendees and 30% internal to Comcast.And we also launched the Open Source Fellowship pilot. This is a pilot program that was launched, specifically for our engineers to work on open source contributions. We have seven open source projects that we’ve selected, that we know that we’re large consumers of, and our engineers get to work 20% of their time, originally, it was Open Source Fridays, but it’s 20% of your time, whenever that may be, to work on open source, and that is 100% supported by our leadership. So, we’re really proud of that.And then in 2019, which is today, we have several hundred open source projects. Our team has grown tremendously. And we’re looking at putting more strategy around open source. We also have a partnership with our talent acquisition team, so that when we go to conferences, we’re showing up with a strategy and organized.So, the team that I work on, I work in the Open Source Program Office. Like I mentioned, we opened our doors in 2017. We support over 7,000 developers. We have 224, maybe more as of today, repos on GitHub.And we are a seven-person team. Just in the last month, we’ve hired two folks. We have two software engineers on the team. We have two program managers. We also have our leader as well as a summer intern that’s come on board to help us with metrics.So, what’s brewing in our open source communities? So, a little bit about how we kind of got into metrics, why they’re even important.So, originally, once my colleague and I started on the team, we knew that open source was happening, we knew that people were contributing to open source, but we didn’t really know who those teams were or where it was coming from, and there was no organization around it.So, what we started doing was, we started meeting with different engineering teams each week. Some weeks, we were meeting with two or three teams, to the point where we were exhausted from meeting with so many engineering teams. You know, I don’t know exactly how many, but I want to say maybe 30 or 40 engineering teams, and we have so many more that we haven’t even touched.But once we started meeting with these different teams, we started getting a lot of open source contribution requests. We’re telling people, “Hey, we love what you’re doing with open source, please just come to us, and talk to us about it. We want to partner with you. We don’t want to necessarily police you or anything. We want to make sure that you’re using the right licenses and that we’re also showing gratitude when you are doing open source contributions, and that we know what’s going on.”So, the communities that we report out on. We report out on our internal community, achievements, and progress that we’ve made, and also on our external communities.Our internal communities are the 7,000 developers that I mentioned, the thousands of developers, plus, we also have other program managers, project managers. It’s not just necessarily software development engineers. We have a ton of people in the open source community.Also, the open source projects that we put out, we want to make sure that we’re watching what’s happening with those communities. VinylDNS is a one-stop shop portal for DNS configuration management. Trickster is an open source dashboard accelerator that plugs into Grafana or Prometheus. Kuberhealthy is easy synthetic testing for Kubernetes. So, these are some examples of some of the projects that we’ve put out. So, we want to look at what’s happening there.So, the internal community metrics that we track. We look at who our top open source contributors are in the last year. We want to reward them. We also showcase them on our blog. We also showcase them on this exact report that goes out.Our community growth is another internal metric that we look at. The place that the entire internal open source community mainly hangs out is in Slack. And so, we want to make sure that, that community is growing. We’re making people aware that there is a place to congregate, and hang out, and ask questions, and chat about open source.Also, our internal presentations. We also do a bunch of internal presentations across the company. We look for opportunities to speak with those engineering teams that we’ve met, because now we’ve built this partnership with them, we work with them. And if we know that there’s an event happening, we’ll ask them, “Hey, do you all have, like, 20 minutes in your schedule? We’d love to talk about the open source program.”Incentives and gratitude that is given to the OSPO from our developers, we definitely collect and share our kudos with the team. We started doing that a few months back and actually reported out on it. And it was really nice to see all of the thank yous that we’re getting from engineers for simplifying the whole open source process.Prior to our team joining, the engineers had to kind of talk with legal, and go through why something should go open source. And that wasn’t really the best experience for them. So, it’s really nice to see that they’re thankful for the work that our team is doing.And we do the same thing for them. So, anytime any open source contributors make a contribution, we make sure to thank them. We have a number of different ways to do that. We have portals. We do handwritten notes. We do cards, but we track.And then the internal events that we host. We do open source days twice per year. Last year, we went to Seattle and Denver. And the reason why we have to travel for them is because they asked us to come. So, they asked us to come and do a mini open source day. And so, we came because Philadelphia is where our headquarters is. And we have a very large auditorium there where we do a lot of conferences. But the other remote offices asked for us to come out, and we did. This year, we just did one in Sunnyvale. And then we have another one coming up in Philadelphia.And then the number of open source contribution requests that come in. So, we look at those and that number, we’re watching the growth. And it’s really good to watch those because that’s when we can actually justify that we need more people on our team.And then the type of open source contribution requests that are coming in. Are they bug fixes? Are they full-blown projects? Are they documentation? We look at that.And then here are some examples of the community metrics that we track. I’m just going to show you all exactly the slide deck that I pretty much put out twice per year. And I won’t include every single slide, because in the interest of time, but I’ll include a few so that you can get an idea.So, the Slack community growth, here, you’ll see that our community, we have about 900 people in our Slack channel today. I’ve encouraged people on our team to just put it in their email signature. I have it in mine, I just say, “Hey, join our Slack channel if you have questions.” Whenever people DM me, I’ll reach back out to them, and I’ll tell them, “Hey, we do have this Slack channel where you’re more than welcome to ask that question.” And so, we’re continuing to grow that community, and it’s something that we’re watching.Internal Presentations. These are the ones that I mentioned that we do. We have a showcase series. We do an open source educational series. I did a recent webinar on innersource. We had a very good turnout. Innersource is a hot topic. So, back by popular demand, I did another presentation on innersource at a internal event that we did.So, we want to make sure that we’re continuing to raise awareness about Open Source Program Office, what’s happening. And so, these are the internal presentations.And then the events that we help organize internal and external, shameless plug, June 20th in Denver, we have an open source conference that’s open to the public, and it’s free, so you’re more than welcome to come if you’re around. But that’s a great example of an event that we’re helping organize. I’m also the meetup organizer for the Prometheus group in Philadelphia. And also, we do a number of other events, like I had mentioned, the internal ones.The number of open source contribution requests that are filed. Here, you can see that there’s a tremendous growth since 2017, since we opened our doors. And we’re projecting to go even higher this year.And this is exactly what we used to show that we need more help on our team. So, we now, just a month ago, brought another open source program manager to help us with these contribution requests, because we only had one person working on these.So, the external community metrics that we track. Pull requests to the open source projects that we maintain. This is super important to us. And we’re not micromanaging or policing anyone, but we want to make sure that the open source projects that we’re maintaining, if there’s a pull request that comes in, it’s not sitting there for a year.And also, we help coach our engineers on, you know, how to respond to things in the open source community. We do a lot of blogging. We let folks know. Sometimes people, it’s their first time working in open source, and so they don’t know. You know, there could be a pull request that sits there for six months, and that other person on the other end has no idea what’s going on. So, we want to make sure that, that kind of thing doesn’t happen.Also, outside contributors to the open source projects we maintain. It’s really important to have diverse committers, diverse contributors from different companies, different areas, etc. And they’re not just Comcast-heavy. So, that’s something we definitely look at, especially for the projects that we think are going to be really useful to the community.Also, most starred, most forked, and the newest open source projects we maintain. We understand that this doesn’t necessarily measure the popularity of a certain project. But there are some communities that require a certain amount of stars in order to be incubated into, for example, a foundation or something. And so, it’s something that we look at, and we use the GitHub API to do that. And that information’s actually on comcast.github.io as well. It’s in the statistics at the bottom of the page.Blogging. We have an engineering blog that is mainly funneled through our corporate communications team. We work closely with them to get stuff out there. We don’t blog all the time, but we blog when we have huge announcements, like, let’s say, “Trickster is now open source.” We’ll talk about something like that.If we have a whirlwind tour of number of open source conferences, and we have a bunch of updates, we’ll write a blog post about that. Recently, we’ve been doing blog posts on opensource.com. They’re super helpful. Great, great team to work with. We were able to push out a couple of posts through them. So, we’re also watching to make sure that we’re continuing to put content out.And then also outside press pickups. I have an alert setup in Google. Anytime Comcast, Open Source, anybody blogs, or writes anything, a news press, whatever, I get a notification. So, that’s something we look at.We love to see positive press come out. And we think that giving back to the open source community, and sharing our use cases, and putting projects out is definitely helping us and giving us a lot of positive, positive feedback in the open source community.Sponsorships with open source foundations, that’s another thing that we look at. We want to make sure that we’re on top of what’s happening, where we’re actually sponsoring, where the money’s going, and then where it should go next. So, we talk to our engineers.We have a survey that we put out, and we say, “Hey, here are the open source foundations and projects that we’re sponsoring.Is there something we’re missing? Is there a community that you work with or you’re a huge consumer of that we should be looking at?” And so, that’s really helpful. So, we track all that.Our external presentations, today counts as an external presentation. Our team goes out to a number of different places like FOSDEM, All Things Open, CHAOSCon, Open Source Summit, etc. We definitely track those.And Twitter engagements. We look at the impressions, the clicks to see, especially if we have like a big event going on, and we want to make sure that we’re projecting that message out to the community. We look at that kind of thing.And then lastly, traffic to comcast.github.io, which is our public facing and open source website.So, a few examples of the external community metrics that we track. Again, I won’t go through every single one of those, but I’ll show you just a few examples of what we report out on.So, Trickster, that was the open source project that we recently put out to the community, and about 70% of the contributors are non-Comcast employees. Kuberhealthy, similar. This was actually the more recent open source project that we published. About 50% of the contributors are outside of Comcast. And then about 80% of the contributors for the Apache Traffic Control project, which is now a top-level project, are now outside employees.And I must say that once you donate your project to a foundation, you do have an advantage of getting the community from that foundation or from that project. So, that’s what it looks like for these three.Published blog posts. We have eight so far. We have an editorial calendar. And so, we make sure to track it. And then OSPO public speaking engagements. It looks really low right now. And that’s because conference season hasn’t hit us too hard yet. Around September through December is when it will be crazy. And so, that number will likely spike up.And I’ll also include that we do put, and I don’t have it here, but we also put out a highlight deck that lists out all of these things, so that people can see. It’s not just, “Oh, they went to nine public speaking engagements.” We actually list out what those speaking engagements are.And then, like I mentioned, the most starred, most forked, and our overall stats, the total members of our overall stats look really low. We’re actually have hundreds of members in our Comcast GitHub organization. However, by default, it’s set to private once you get added to an organization, so we’re working on talking to folks and see if they want to switch it to public. That’ll really help us with our metrics.And then this is the comcast.github.io website traffic, and this is using Google Analytics. So, we’re really looking at the total number of clicks, and then the difference between last year and this year, and then figure out how we can grow that.So, as you can see, our community metrics are a big mix of internal and external community.So, what’s next for us? Automation, automation, automation, times a million.So, right now, what I am doing to get these metrics are, I use Twitter, I use Jira. I go in, and I search out through the filters. I also use GitHub API. Because the GitHub API has a time limit on how much data you can get, we’re using another tool called GitHub Archives. And that’s what we’re using to get the top open source contributors from Comcast in the last one year. And also, that’s what we’re using to get a number of other data points for the open source projects that we put out.Luckily, our summer intern is here to help us with our metrics. We do have a dashboard, in-flight. And right now, it includes our top contributors, as well as some community health metrics. But ideally, we’d love to plug the Jira API, Twitter API, and get all that information into a one-stop shop, and then have everybody just be able to access it at any time, transparent. We don’t want to have to put out some report, you know, twice a year. We want anyone from our community to just be able to click in and see what’s happening.And with that, thank you.","[(0, 0.3026639), (1, 0.11445532), (2, 0.5828808)]",0.3026639,0.11445532,0.5828808
"Okay. So what we can see here is that I spend way too much time on my cover, which I mean, if there’s any CSS people, you will be missing some animations because I’m playing it safe. So I just removed some animations, you know, just to make the talk, you know, best experience without any lagging.This is probably the most important slide of this talk. It’s a little bit fading. I’m way too old for this job, but I work for AWS, I’m a developer advocate, and I want to go right in.So I want to share with you my experience creating a community from scratch. And this is my second try. So my first try was AngularZone. This is a community meetup that I created in London. And I struggled quite a lot and I learned from, we have seen from previous slides, you learn mostly from your mistakes.So this was my kind of aiming for the awesome in a meetup group. So probably that’s not something for everyone. I wouldn’t try this, kind of meetup right away, but you can see how it may look like and probably if you are thinking to starting the work necessary, you will see what’s involved.So let’s look into it. So we are in 2016. And maybe you have heard about this technology, or maybe you didn’t. This is GraphQL, and at the time, it wasn’t that popular. It had been around for a year, and, of course, as developer advocates, we are, like, really, really early adopters.Probably you are using some technologies they are going to be successful maybe in the next couple of years. And this is what we do. We take risks. So I decided to take the risk with GraphQL.I wanted to create, like, some kind of a grandiose idea which I did because I was self-employed. So I could be free to imagine anything that I wanted to create. And this was the first meetup.And you can see that I also had to do, like, some, like, visual design. And this is very important. Unless you have a big team that can support you, you will be doing like a startup mode. You will be doing, like, literally everything. You will be doing marketing, you will be doing, like, kind of sales, like closing sponsorships for the long term, so you don’t have to do the research every single meetup.And one of the things that make me try for this meetup was that I had a really good venue. And this is CodeNode in London. Maybe you heard about it. This is a great venue.You have personnel at your disposal. You have audio, you have video. They will record every single meetup. They will give you people that you can call. There’s also a desk walk-in that they will hand these name badges. It’s like proper meetup. Of course, you don’t have to go for this level, but that’s something nice when you have been doing community for a few years.So I founded this November 2016. This was probably one year and a half after GraphQL was announced in React Europe in Paris, and by some random chance, I was there. I was an Angular developer. And why I was at the React conference, well, some colleague couldn’t go, so I took his place. There’s a lot of opportunities when you are doing these kind of activities, use every single one.So this meetup was about GraphQL technologies, and maybe if you are not a developer, it will seem a little bit risky to just go for one specific technology. But actually, this is what I recommend.You don’t want to be messing around, you want to share a really strong message, so people, when they go to your meetup, they know what they are going to get. And in this meetup, people, we’re going to get awesome.And why? Well, because in my experience, passion is what makes things succeed. This sounds, I mean, if I was a salesperson, this would be like, “Oh, my God, what are you saying, Gerard? This is like total BS.” No, I totally believe it, and I stand by it.And what I mean by passion is these little things that happen that makes you so happy. And I’m going to share some of these. Usually, social media. I hope these are not fake accounts and things like this because they have a strong effect on you.So I had some goals. I mean, you need to put some goals. You don’t want to spend too much time. At the time, I was doing a lot of speaking, public speaking and traveling, so I couldn’t actually do my one-month days that I was doing with my other meetup.The nice thing is I could record the events. I mean, if you think about the effort that you put organizing a meetup, you really want to have a recording of it. I mean, you want to lose all that energy and effort bringing, like, nice content and speakers? Obviously not.There’s a lot of recycling. So think this, recycle every single contact, every single thing that you can, you recycle.This was more like a challenge. I wanted, like, great speaker and content. I mean, these can go together or not. Of course, we are getting into, like, some tricky area because it’s subjective. I mean, I don’t know if you realize so far, maybe a talk is good or not, it just depends how many people like it, and maybe they don’t even know why they like it. It’s really difficult to find out. And that gets linked with passion. I think if you show passion, people will relate to that.And then, of course, you always want, like, great atmosphere, a nice venue. You have hospitality, like, someone is welcoming your guests and that brings you a great meetup.So how was the community back then? This was like a very modest community. I mean, we are talking London, and 150 members is not a big group. It’s just starting. And we can also see that I didn’t have that much success. I mean, success in the terms of attendance.If you look at this number and you have been running meetups, you know that this is not RSVPs, which is very interesting. And I don’t want to use RSVPs because it’s very misleading. There’s a lot of people using, like, big numbers of RSVPs. When you go to the vendors, like, 15 people, like, where is the other people? What happened there?So what’s the format I went for? I went with, as I was saying, top speakers, top venue. And this comes from the last talk, treats. Do all the treats that you can, prizes, raffles, you can use them in promotions, you can use them to just share contacts that you have with conference organizers. Maybe you have discounts.Look for these treats and share them in the meetups. Of course, this is to create some kind of hype, which I really love. But this is more my personality. If you are building your meetup, you want to match your own style. You don’t have to match mine.So then there’s drinks. This is revolutionary. I didn’t go for pizza, I went for burrito. Look at me. These are things that if you are not an organizer, it’s like, “Okay, whatever.” But when you can bring, like, a nice food which makes no sense, I mean, that’s fun.So how is the GraphQL community today? Look at this. This is a awesome community. I mean, I put all my eggs in one basket, and I was lucky. I mean, this is, you know, this is a lot of dev rel work.You may put your efforts in one place, and it’s like, “Oh, oh, oh, don’t look at here. Don’t look at here.” But, of course, if you are not brave enough to try things, then you won’t get the big success. I mean, big success in the terms of achieving your goals.The community today, it’s quite impressive. I think it’s the largest meetup community focused exclusively on GraphQL. The attendance was really good. It’s been not active for a while because of my public speaking commitments. But I was able to bring some more people.And this is always nice. Actually, I bring some people from Prisma, they organized GraphQL Europe. And before that, I also get some kind of relationship, like, long-term relationship with recruiters.And, I mean, let’s be honest, there’s some people that they don’t get it, but you need to build a relationship, so you can both benefit. You need to put some kind of lines. You don’t want them to abuse the meetup. You don’t want them to take, like, 20 minutes of some kind of sales speech. But that’s on you. That’s not on them. I mean, you can put the rules.So what’s the second formula? I’m going to show like a very… I mean, I’m a developer, and maybe this makes no sense to you, but it makes total sense. So take pictures of this, take it home.Book a venue, contact speakers, start promotion. I know that some of you don’t like promotion, maybe the sound of it, this is actually not promotion in the sales or marketing, it’s more getting the message across.I mean, if nobody knows that there’s an event happening, I mean, why are you even doing this? I mean, it makes no sense. It’s silly. Of course, the message, you don’t want to put, like, some, like, real BS marketing stuff in the message, you want to take care, you want to connect with developers. You don’t want to be seen as unauthentic, but the promotion is just getting the meetup, the date, and time across, and then you run the event.Yes, this is my boss. “You did great, Gerard.” I mean, this is what happens when nobody pats you on the back. You need to do it yourself. “Thanks.”Okay, venue. Let’s go fast. Difficulty. This is kind of a game. Okay? Some kind of ’80s game. Difficulty: medium. I will add some Mario Bros. sounds the next time I do this talk.Location, location, location. This is obvious. If you want to get people, you need to make it easy for them. You don’t want to make it, like, in the, I don’t know, in zone 5 in London, you need to do it, like, in City Center, at least.Check in on security, these are some goblins. They are hiding there. You will only find out the day that you go and run the event. Oh, the security, I forgot to send the RSVPs. Everybody’s like waiting, queuing, and there’s a big disaster.Technical setup. This is a big thing to take care. You want to host your event within a third party because they are going to take care of that. Taking care of that, it takes a lot of effort.And then catering details and, you know, “Oh my God, this looks like a small conference,” which is completely another level.And then you never think about this, but there’s space, setup and cleaning, who put the chairs there? Who took the chairs out afterwards? Who cleaned your mess? All of the stickers. All of the pamphlets. Don’t do that. Don’t be nasty.So you think, “Oh this is super easy.” Well, it’s not. It’s not. Look at this matrix. Okay, good capacity. Real easy booking. You send an email get hospitality, recording, no hype. Everybody goes there to run every single event. There’s no hype. Okay.Let’s make it a little bit more interesting. You try going to Twitter offices. Okay. This is hard. This can take, like, two months of emails, insane level. But location is very good. And then you get a lot of perks, food, drinks, recording. Hype, a lot of hype. Yes. You see why it’s important to get these elements?Facebook, this is not only hard, but also small which could be exclusive in some way, so you may decide to use it some time.And then also General Assembly because they do these boot camps, they see these as a way of reaching to some developers that will be interested, but probably is not a good match, but you want to introduce some venues to give it some change.Speakers. This is very hard. I mean, I don’t know if you have tried to reach top speaker. I mean, why they would listen to you. They have these, like, crazy agendas, but look at this. Look at the next level.Developer advocates, they are paid for it. The company’s going to fund the traveling. They usually have, like, really good content. Top speaker will be Sarah Drasner. Developer advocate is myself. So it’s not that difficult to book me.And then this is an interesting one. I call it conference speaker snitcher. So by some reason, there’s a conference in your city, you know, because you see the schedule. So you’re going to contact these speakers and invite them, and most of the time, they will come. And this is exactly how I got the creator of GraphQL coming.Network. Of course, use any opportunity. Use the venue, the context that you need to reach for new venues. Use the networks for sponsors. They have business contacts, reach them. Of course, don’t compromise the quality of the event, check about the content that they are planning to show.Promotion. This is something that I think that it’s so easy to do, and a lot of people perceive it as noise, as annoying. But actually, it’s common sense. You would organize a birthday party without telling your friends. I mean, what is that about? This is unpolite.You get, I don’t know, you get a famous actor coming to your birthday party. You get Beyoncé. You want to tell everyone, no?Sponsor update. We’ve got burritos. You never expect it in a free event to get, like, free food. I mean, maybe you do because you’re all spoiled, but this is not easy.Reminder. How many people forget? Send a reminder, it’s just polite. Day after message. This is a little thing to post your pictures. I don’t know if you are very social media celebrities, but you should. You should start. Create an account today. Just make a lot of noise.Of course, I mean, if you are developer advocate for a big enterprise company, you need to align with the strategy, etc. But I was an independent developer, so I was quite free.These are some examples. Somehow, I managed to put that animation on the background, which look, look it’s speeding up. It’s awesome. Probably people looking at this is like, “What is happening? Gerard, what are you doing?” “I’m having a lot of fun.”Event. This is medium difficulty. There’s a lot of, like, admin work. Maybe you can leave it to someone at the venue. That’s the best option.Hosting and schedule-keeping. This is the people saying like, “Okay, one minute, two minutes.” This is important because at ten in the evening they kick you out, and they are very rude, and you don’t want that to fall into your attendees. I mean, this is like your birthday party, everybody’s being kicking out, they don’t even know what’s going on because you didn’t share that the party was ending at certain time.Prizes. You want prizes, you want to give away tickets. You want to contact organizers, you want to contact vendors, you want to give discounts. You want to give these to the people that is coming to your events and also anyone. I mean, you want to share this because you have the context, you want to share this value with everyone.Socializing and pictures. I mean, this is also part of promotion. There’s a lot of people that they will look at the pictures and saying, like, “Okay, this is a disaster. I’m never going to go to this meetup.” But if it’s an awesome meetup, it has the opposite effect. Of course, you need to be sensible about how you decide this and probably, you don’t want to use like stock pictures. I mean, that would be like really bad.Okay, so maybe you remember this picture. This is from Twitter offices. It seems like every single office has this because that was on the background of the last talk. And this is a nice thing, so look what is happening here.This is some attendee, and he’s really excited. It’s, like, it’s not even a good tweet. A Twitter for GraphQL London meetup. It’s like, “Okay, okay you use the Twitter account, forget about the hashtime game and…” but the picture is wonderful. And this is what you get when you go to places like Twitter offices.Okay. This is another picture, and I’m wearing, like, a silly hat. It’s not a cap, it’s, like, some funny thing I bought in Japan, in Shibuya, I think it’s called. And look, look, this one use hashtag. Wow. I want to message him. It’s like you get it, you get it, man. You get it. And this is, you know, marketing side of things.So what are the top ingredients for myself that I want to share with you? And, of course, this is my flavor of meetup. You don’t actually have to follow any of my recommendations, but if you want to go for a meetup style in this way, totally go for it.Ambition, bigger venue, bigger speakers, silly things happening during the event. Raffles, prizes, conference tickets to GraphQL Europe to GraphQL people. It’s awesome.Passion. Did you get now? Passion, why it’s important? Why it doesn’t matter if the talk is completely rubbish, if it gets the people excited and you get, like, some kind of instant translator that tells you that this is not a banana? It’s like, yes, that’s how you get the people excited, and that’s how you get, I think, developers looking at your platforms and looking at how they did it.And of course, everybody has said this, have fun. Of course, I mean, this is a lot of work. If you are not enjoying having a good time, maybe a change up.Okay. This encapsulates the whole talk. Ambition. This is a cat in the universe. Playing DJ with a pizza because it’s just cool, and some emojis there, and groups like hip-hop groups. Yeah, it’s awesome.Yeah. I mean, this is myself. This is my personality. Just don’t listen to me, I’m a little bit crazy, but totally go and create a community that will benefit everyone in that community. Animation. Thank you for listening.","[(0, 0.28634116), (1, 0.17896958), (2, 0.53468925)]",0.28634116,0.17896958,0.53468925
"Hello, everyone, and welcome to another episode of Learn With Jason. Today on the show we have Faraz Patankar, who is coming from Railway. So, Faraz, for folks that aren't familiar with you, do you want to give us a background on who you are, what you're about? 
Yeah, sure. So, hi. I'm Faraz. I have been doing web dev for maybe six years now. Dropped out of college, went to a coding boot camp. That's how I started learning how to code. That was a Ruby on Rails boot camp, what I learned initially. Went back to India after that, worked at a startup. 
     Soon after, I moved to a service based company, which is like a tiny startup, because I thought I wanted to get into that sort of work. Realized while I was there that it isn't for me, because you're kind of building the same thing over and over again. And then people want to see if their product works, then they hire their own team. So, I felt I wasn't learning much. I was building authentication payment gateway, and then next project authentication payment gateway. Didn't enjoy that too much. 
     Soon after that, I went remote. So, this was like, I think, late 2018. With that, I started nomading, traveling around the world. Bali, Thailand, Turkey, Serbia, and so on. 
Were you doing that as like the straight up live out a suitcase, kind of drop your lease and go do wherever you wanted to be? 
Yes, yep. I was at home living with my mom, and I was like I think I'm going to go to Bali. She thought I was kidding. She was like, sure. I bought my flight the next day. I was very nervous at the beginning, but I had a friend who was there are there, which made things easier. 
     Luckily, the teams I've worked with have always been small, only worked at startups, they've all been flexible. As long as I show up for two meetings a week, I can do my work whenever. 
Oh, that's fun. 
Yeah, same at Railway, as well. We meet on Monday and meet on Friday. So, yeah. 
That's super fun. 
Yeah. 
Coincidentally, I did the same thing, I lived out of a suitcase for two years. My partner and I did Thailand, Vietnam, parts of Europe. If you're single, no kids, no pets, do it. If you've ever thought about traveling, it is so much fun. 
Yep. 
Sorry. Now I've interrupted you, please. 
Leave your apartment, figure the rest out. 
Especially if you're in that low responsibility stage, where you don't have a lot of permanent commitments. I was really scared when I did it. I did this in 2014, I was in my late 20s. And I was like this is going to blow up my whole life. And I left, and my whole life improved, because I was having all the things    I would regret that if I didn't try it. And I had these opportunities that, you know, I've since made some more permanent commitments. I bought a house, couldn't just give up a lease and leave. I think if I hadn't done it, I'd be sitting around, man, what if I did. I don't know, I very much believe in a don't die with regrets kind of lifestyle. I'm really, really glad that I did. If you feel like that's something you want to try and you've got the opportunity, go do it. It's so much fun. 
Yep, for sure. Don't want to wake up when you are 60 and be like, what if, right? 
Yeah, right. Yeah. Okay, so    I interrupted you. 
Perspectives and stuff. Yeah, that's okay. 
     So, yeah, was doing that until about when COVID happened. So, I was supposed to fly to Colombia and do South America for six months. Ended up staying in Miami until my U.S. Visa expired and I had to leave. So, I flew to Bali, where my parents lived. Ended up living there, until they wouldn't let me extend the Visa anymore. Flew to Dubai. Turns out you can keep extending your Visa in Dubai for however long you'd like. So, I've been here since then. 
     Made a couple of trips here and there, but, yeah, been here for about a year and a half. But I guess I missed out on the career paths in that explanation. I did another ed tech startup, similar to Bing, actually. We built an in house classroom solution. Teachers could teach students how to code live. I think the same stack Bing uses, React, joined Railway around a year ago. I think it will be a year next week. Been there since    I do, like, full stack, but very front end focused. 
Got ya, okay. 
Mostly TypeScripts, some written in Go, but mostly on the React side of things. 
Nice. 
I guess outside of work, I really enjoy coding, so I do a lot of side projects. In like the travel and Visa space. So, I have one a bunch of people use called Long term Visas, which can tell you how to relocate to another country. I'm on one of the Visas listed on the site, which allows you to stay in Dubai for a year, you don't need a sponsor, you can sponsor yourself. I'm working on another one, Lil Flights, so you can find cheap flights, but high quality flights at the same time. 
Sure, yeah. 
When I'm not at my computer, I'm making a mess in the kitchen, trying to cook stuff up, or experimenting with coffee. Yeah, these days doing cold brew tonics and stuff, because it's really hot here. 
I got to say, Faraz, we have very similar lifestyles it sounds like. 
One of the very few people who watched your only sort of cooking Learn With Jason. Or did I imagine it? 
Yeah, the cooking shows. We are talking about how we can bring those back, actually. So, for folks who aren't familiar, my partner Marissa and I did, at the beginning of the pandemic, some weekend brunch streams, where we would just cook breakfast together and stream it. Kind of, you know, try recipes from our friends. That's actually how we learned Chance Strickland, who was on the show last week, last week, the week before. He has a recipe for biscuits. And we made the biscuits on the stream, and Chance was there yelling at me, because I wasn't folding fast enough. It was a lot of fun, and it's something we want to bring back. 
     We were having trouble with quality, so we wanted to get a little bit more gear, which if you have followed along with my journey, I have too much gear now. Which Chris Biscardi, who's dangerously close to three years of subscribing, thank you very much, Chris, is one of my chief enablers for buying more gear. So, thank you, Chris, for being the best bad influence someone could ask for. 
     So, Faraz, you are currently working at Railway, you said, and, you know, Anthony is in the chat, super stoked about Railway. I've seen a lot of people hyped up about Railway. Can you maybe give us the high level pitch, what is Railway? 
Yep. So, Railway    I tell you why I joined Railway, because I found it one morning and applied the same day, I think, was because it was one of those platforms where I could, like, what we want is for users to come to Railway, and only focus on building their app. We don't have to want you to have to worry about infrastructure, setting up alerts, setting up a database, diagnosing your app, and so on. 
     We aren't fully there yet, but we're moving towards that direction. 
Okay. 
We want to help you build the app you want to build without worrying about the other things, which we take care of for you. 
     On first thought it sounds very similar to a Heroku, but we want to help you across the entire cycle. It's not like you give us our app and we deploy it. We want to be there through the development phase. You can do something like Railway run node index.js. And all your environment variables on Railway, if you have a plug in in your project, those variables will be pushed into that node app, so you don't have to maintain a separate N file. If you create a development environment, those plug ins, all the services you had in production, they are automatically added to that environment. 
     If you open up PR, you get everything fresh with that PR. Everything is already there. Things already working, you get a fresh database. If you have a test environment, you don't have to clean up your database, because you get a fresh one for each PR and so on. 
Totally, I got you. That's cool. So, is this like    for folks that don't know, I work at Netlify, and a lot of the things that you're listing here are features that I would consider to be, like, some of my favorite features about Netlify. So, it sounds like Railway is kind of taking a lot of the things that are great about building front ends on Netlify and bringing that to, like, the node apps, the more full stack kind of back end things. 
Yes. We have been likened by a few users to what Netlify are for the front end, we are for the back end or full stack. So, that is a comparison we get to hear a few times, yeah. 
Cool, yeah. I mean, I'm always excited about any way to make this a little bit easier. I've been    I run a few back ends for various things, like the chat engine for Learn With Jason is a Node app that runs a GraphQL subscription. There are a few other little back ends that I run for different things that just need to be on all the time. 
     I remember I had a server that was completely self managed, and I didn't know enough about how to do it, so it would always crash on me, then I'd have to figure out how to SSH into the remote box and restart it and try to find my logs, which I always set up log rotation wrong, and I'd lose things. There are just a lot of these challenges that I'd hit. And then later I moved to Digital Ocean, which did some of the stuff, but not all the stuff. So, I'm still kind of self managing. And then I started to find services like right now I use render.com, which sounds like Render and Railway are solving the same space. 
     So, something like Railway is trying to take all the stuff I don't need to be an expert in and give me the ability to do what I'm interested in, which is deploy this API. 
Yes. 
I love that. I love to see the dev space is moving towards this. Hire an expert via software as a service, platform as a service, when it's not something critical to your application. How you configure and deploy a container, in 99% of cases it doesn't matter for your business, right, so why bother learning all that stuff? 
Yep, yep. You have to hire one less person, focus on ten less things. Makes it easier for you to get working on your product and get it out there and keep building more features, right. 
Exactly, right. 
Something in chat about your mic, I think. There's like a slight crackle. 
Oh, my God. Why, why? Let me just    you know, I've been having this issue, where I don't know why my mic is    I'm going to disconnect the mic for a hot second. Please hold. 
     Just trying to clean up the connection a little bit. I don't know if one of my cables got crushed in the move or something. 
It's better now. The crackle    
Better now? Maybe it was a dirty, like I hadn't connected it cleanly. Let's see how it goes. I will try not to shout. Try to keep us in the good spot. Hopefully, that's the only problem that I have. If it was the cable, maybe I just need a new cable. 
     But, okay. So, let's talk a little bit about what are some of the best use cases for Railway. Especially, you know, a lot of the folks who watch this show, I think, would describe themselves as web developers or front end developers. So, we're not going to be deep in the back end, right. We're not    I would never call myself a back end engineer. I would say that I cheat using services like Railway and Render to become a full stack engineer. But, really, I'm more like web front end, you know, the middle tier. That's where I really live. 
     So, what's a great    where do you see Railway shine when people start deploying projects? 
Yeah. So, that's a good term, I'll still that from you, the middle tier. I feel I live there, as well. I struggle to explain. That puts things together pretty well. I guess what I'd say is that's like a good crowd that can use Railway. Because, again, if you want to set up a database, and you're very front end focused, you're either going to have to install post test locally, and if you want to maintain more than one database, you're in trouble already. Or you're going to set up something like Docker, which you're not going to enjoy. So, you can just use Railway. So, anyone who needs    we offer full plug ins right now, so if you need any of those, immediately, easy choice for you. 
     If you want to deploy a small back end server and grow it as you grow your product, we're a good choice. Right now I'd say even if you're a team user, small team, maybe a five to ten person team, Railway is a great fit for you. Especially because of how we've built environments, like the concept of environments. 
     So, let's say you're hiring someone new, and they want to get started. It's so much effort to get them set up locally, and get them going with the product, whereas    we use Railway to build Railway. We have a project called Railway Meta, which is what we use locally. Any time someone joins, we create a new environment. When I joined, new environment, Dev Faraz, input all the environment variables, and Railway run start, start command. And immediately I can start developing locally. I don't have to worry about anything at all. 
     As for what the use cases are, we have a lot of people deploying open source solutions, which is one of the things we're going to look at today. Most, 99%, 90%, I guess, of them are one click starters. So, we've set them in a way where you give us a couple environment variables, if needed, and you click a button, and you have, like, Umami, Cal.com, or something like meta base, we have a starter for post for the blogging engine. So, we get a lot of people deploying those things. 
     We have a bunch of people using Discord bots, telegram bots, Slack bots even, I think. And we have, I don't know, 40, 50 odd teams on the platform. So, these are, like I said, all sub ten person teams. But they really like it, because they can, again, they are all startups who can focus on their core product and not worry about having one person. Just last month, I think, someone moved from one of those we push your stuff on AWS, but we manage it for you services. We don't want to hire one person, whose job is to understand infra, and then every time someone has a question, they are dependent on that person. If you're a team that feels that, Railway is a good place for you to come and build your product. 
Nice. You know, this is something that I found really exciting about this particular era of developer tooling is that I don't know when it shifted, but we seem to have shifted away from I as a developer need to turn all the knobs, to I as a developer need to know where things roughly should live, but then most of the things are repeatable and deployable. And I think we owe a lot to, you know, Docker containers, and Kubernetes, and some of these systems that allow for automated deployment and scaling and stuff. Because the systems can be built on top of that, that make things so much easier. And also just to the, you know, the focus on productivity, as opposed to completeness of understanding. Because, like, I don't care when I push a button on my computer how the signal from that key gets into the computer and makes a letter or number appear on the screen. Right, it doesn't matter to me. I just need to be able to do that. 
     And I think that I feel the same way about, you know, CDNs. I love that I am using a CDN, and I very much want to do that. I don't particularly care how my domain name is configured to route traffic through the CDN, back to my origin, handle failover and latency and all those other things that I know they are important, and I want them to exist, but I don't want to do it myself. And I love, love, love that we're seeing more tools that sort of take that as the default stance. And they say, look, you're here to build something valuable for people who are going to use this site or this service. Don't spend time or money on things that don't matter. Work on the value. Here, we'll handle this layer of stuff that is incidental, right. And that's one of the    that's why I ended up working at Netlify. It sounds like that's why you're working at Railway. Is that it really does take this whole category of what I would call toil, or just busy work, and it just clears it away, lets an expert be the expert, and now I don't have to copy/paste/configure off stack overflow, because I have no understanding how containers or deployed or scaled. 
     It makes me feel so much more powerful as a developer these days to be able to go and do that sort of work. 
Yep. Yeah, for sure. Just like pointing out one thing you mentioned there. Go build amazing things, right. Make people's lives easier, and we will make your lives as a developer easier. So, let us take care of that. 
Yeah. And if you all can hear the background, we are getting our    so, we're in a new house, as you can see, I finally got around to putting my lights up. Still haven't decorated behind me. But you may be able to hear we have painters in the house today. So, we've got a little bit of background noise. Thank you for putting up with it. I swear, we are very close to this actually being back to 100% operational. Just a few more days. So, thank you for putting up with all the chaos in the background, Faraz. I appreciate you just powering through, as there's crackling paper and stuff in the background. 
     So, let's talk a little bit about specific use cases. So, one of the things that we can do with Railway is self hosted analytics. So, you brought this up as a great use case. Self hosted analytics are really interesting, because I do like to know, you know, who's reading what content    not even who, but are people reading content on my site. Do certain articles get traffic, are they useful, are people, you know, do we see people like actually playing time on here and reading things. But what I don't particularly care about, I don't want to necessarily send that data to a third paper. I don't necessarily want somebody to be off, like, using that data for advertising. 
     And I know you can supposedly set the do not track, and other things like that, but I kind of like this idea of the analytics being in house, so that it's just for me to improve my content, not for other people to go and send more targeted advertisements. 
     So, you mention the tool already, I think it's called Umami. Can you talk a little bit about how does something like that work, just at a high level. 
Yep. So, Umami is like pretty cool, because what it does is it gives you all the data that you mentioned. You want to see if people are even visiting your website, how many people are reading a particular post, even if you don't want to know who they are and stuff like that. You can find out what posts are popular. So, Umami does that, where it collects all this data, but then it doesn't store any cookies. All the data you see is anonymized, so you can't track the user back. That's another privacy feature we have. And they don't collect any personally identifiable information at all. 
     And, realistically speaking, if you want to use this data to build a better site and build things that people want to use, this information is enough to figure out what kind of content you should be putting out. And that's what Umami lets you do. 
     And apart from the privacy focused aspect of it, they have a couple of really cool features. When you add a website to Umami that you want to track, you can generate a shared URL, which can be a public URL. So, your site analytics can be public. If you're looking for sponsors, or if you want to share stuff, you can give them that link, and they can see live the analytics you would see in your dashboard. 
Oh, that's really cool. 
Even some of the paid services don't have. 
     Another feature which I really like from Umami is you can, apart from tracking multiple sites, your self hosted instance can have multiple accounts. So, if you have friends that are not very tech savvy, you can create an account for them on your instance, and they can track their sites there. So, setting up one account and multiple people can use it. 
Got ya, okay, that makes sense. 
     And, so, to deploy one of these, you need    it's built in Node, I assume? 
It is, it is. Next.js thing, yeah. I think it just uses Next.js API. I don't think they have the back end, I could be wrong, yeah. 
Interesting. So, we're going to deploy this as a long running Node server, so that it is up all the time. But it sounds like you could potentially deploy it on serverless functions or something like that, as well. 
I think so. It uses a database. If you're doing serverless, you probably need PG bouncer. Supports SQL, as well. The one we'll be tackling today will use Postgres, the Umami with Postgres, yeah. 
Cool, okay. So, I think at this point, probably the easiest thing to do is just start showing people how it works. So, let's switch over into our paired programming view, which I will do with this button here. Camera two. All right. 
     So, now, I just saw Chris' joke about hearing the paint dry. Yes, yes, that is exactly it. But, yeah, so, we are live, and we have Ashly here today from White Coat Captioning taking down everything we say. So, thank you very much, Ashly, for being here. 
     That is made possible through the support of our sponsors, Netlify, Nx, and Backlight, all kicking in to make this show more accessible to more people, which means a lot to me. It also allows me to do some of the more inventive stuff that we do on the show, some of the interactivity and things, all funded by your generous sponsorships. And by your subscriptions, chat. Every dollar that comes in, I reinvest into the show. I very much appreciate all the subs, and the sponsorships, all those good things, because it lets us just get weird. 
     We are talking to Faraz today. You can find Faraz on the Internet, on Twitter, and I forgot to mention, if you want to look at the captions, the captions are on the homepage, like they are with every episode. And we're talking today about Railway app. And I think the last thing that I wanted to bring up was Umami.is, this is the analytics that we're going to set up. 
     So, that is the extent of what I know about what's going on. So, Faraz, what is my next step if I want to start building this app out? 
Yep. You can open a new tab and type in dev.new. 
Dev.new. Clever. 
You can use your keyboard at this point. You don't really need a mouse. Just do deploy a starter. Search for Umami. Hit enter. Now you're not logged in. We require users to log in to apply code. Ask you to connect your GitHub account. Verify your account, so we know you're not deploying shady stuff. 
Got you. I won't ploy any of that, you got it. Let's go to the dashboard. 
I guess you also need to agree to the terms and conditions. We want to fix the flow so you only have to agree to one of the things. 
I am 13 years or older, despite my youthful appearance. All right, so, I have agreed. So, that means I go back to my dashboard, and here we go. 
Yeah, you can just click new project, which will take you back to where I intended you to go to initially. 
Is this not the Umami that I set up? 
No, no, no. 
I got you. 
You can search from Umami from the root, as well. Now hit enter. This should work, because you are logged in. We don't have access to your repos yet. 
Okay, we'll put this on ""Learn with Jason,"" which is where? Here. We'll do select at least one. Do one of these, do one of those. 
     So, we're going to call this    
That's an automatically generated secret for you. There are two environment variables that we reconfigured. Umami by default runs on port 3000. So, this has preconfigured, so you don't need to do it. The host name is the URL you'll get after deploying your project. So, we have a template variable that we're using for it. So, you can now click deploy, and it will start creating your project. 
Ready to be deployed. It is deploying. Okay, is there something I should do in the    
No. I guess what you could do is you could go    if you scroll up slightly. Can you do command enter? 
     What you can do is you can click the settings thing on the top right. Close this box that's opened up. Your deployment will begin automatically. You can see we did a Postgres database, as well, which this will use. Your deploy will now start, as well. My bad, close the settings. Hit the Umami service and go to the settings. 
     And if you scroll down, I want to show you something really cool. One is, okay, we created Learn With Jason Railway Umami for you. 
Right. 
It is linked to the upstream repo, Mike Umami. So, whenever Mike updates his version of Umami, you have to click this one button and don't have to worry about going to GitHub, anything. 
That is very clever. 
We don't replace your production deployment, because you could have made changes to Learn With Jason Umami, which might break things. So, we create a PR deploy for you, and once you're happy with it working properly, you merge and your production deployment is replaced. 
Love it. 
One other reason I brought you here, if you click on your Railway Umami thing    although I don't think this will have the instructions. Let me actually real quick share a link with you. We should have a better way to access this link, but if you could go here real quick    has instructions on how you would proceed. So, Umami is one of the few starters that requires some additional configuration. So you can see you click the Railway button, and now we're on step three. 
     So, we have the Learn With Jason Umami thing. What we're going to do next is I'm assuming you've not installed the Railway CLI. 
I don't believe I have. Let's find out. 
I think you can use the shell script, I think that works the best, if I remember correctly. 
Not Homebrew? 
I personally just use the shell one. 
I'm going to use brew, because I'll absolutely lose track of this if I don't. 
That's okay. 
I've realized after a few    almost at 300 episodes of this show, that I've installed so many things that I accidentally made my computer unusable and had to spend like half a day going in and cleaning up all the miscellaneous things I installed. Now I'm like, maybe let's do it this way. 
     So, now I should have Railway. There it is. And I've got my Railway version, good. 
Now we can clone the repo Railway created for you, for like Umami. 
Railway Umami is what we called it. Okay, let's move in. 
Now you can go back to your Railway project. 
To this Railway project? 
Yes. Close the service. And on the bottom left you'll see an option to set up your project locally. 
Cool, okay. 
Connect to this project. So, what we are doing here is we are linking our local repository to the Railway project. 
This is the project ID, which matches what's in the URL there. 
Yes. 
I'm not logged in. 
You need to log in, yes. 
Press enter to open the browser. Success! Okay. Nice, that's good. 
Now you can run Railway status. Yeah, we have to link first. That's fine, we have to link first, yeah. 
     Cool, now that's the name of your project, has one plug in and one service. 
Got ya. 
Now go back to the GitHub repo and see the remainder of the instructions. 
     Now this is a command I will ask you to run off screen, because we'll be revealing some environment variables. So, what you need to do, you can see it's  H host name. So, replace the host name, user name, database values. You don't need to go back to the website. You can just run Railway variables and that will show you the values. Do that part off screen. 
Got you. The command is Railway variables. When I execute this, this is going to show me all the values. 
Which will reveal the Postgres configuration values, and you can post in the run command and replace the values. 
Then I got to copy this host name. That is the PG host value, right? 
Yes, PG host, user, I think. 
User name. Then I need my database name, and that is PG database. And then I need to set the file, and that's going to be the sequel, schema Postgres. All that correct, yes, hit enter to run it. Invalid option. What did I screw up? Oh, capital ""U."" 
That always gets me. 
Run it again. All right. Now that we've done that, looks like it worked. 
Now we can go back to railway project. 
This one? 
Yeah. Click on the Postgres thing. And you can see the tables have been populated for you, right. 
Oh, cool, okay. 
That's what the script we just ran did. 
Got ya. 
Now you can click on the Umami service and visit like the URL. Which should populate, yeah. Click that URL. I think credentials are listed on GitHub, like Umami and password or something. No, where the instructions were. Admin and Umami. 
Okay, so, admin, Umami, and I need to go and change that password. 
Yeah, you want to change that ASAP, I think. 
Yeah. Okay, now we have a new password so you, chat, aren't going to come after me and mess with us. We learned that lesson. 
     So, we're in. We got the thing. 
That's it. We can go home now, do our stuff. No, I'm kidding. Umami is set up. Now we can deploy Next.js app and add that as a website here and add tracking to that application. 
Got it, okay. We also need to set up a next app then. 
Yes. We can set up like a basic Next.js app and add a couple of pages. There's a question in chat, as well, about where the Postgres is hosted. Postgres is also posted on Railway, and all our servers at the moment are U.S. west. We do plan to have multi region support, but that's a little far away at the moment. 
Start learning. Create Next app, there we go. 
     Wait a minute, you're going to do that here, aren't you. I want you to do it in this directory, please. Yes. 
     So, we have a basic app set up here. Change out our pages, do something simple like    see if we can keep that container. 
     This app has public analytics, right, and we can kind of do the same thing. Get that in there, drop out the rest of this stuff, because we won't need it. 
     We don't need a footer, so we can drop that. So, that's a basic site. Let's add maybe one more page here, and that page will be called about, and we can update this to say about this site. And here we'll say this site is an example of using Umami to manage self hosted analytics. That's going to give us plenty of good stuff to work with. I believe if we look at JSON, we can run, make sure the site works the way we expect. Let's copy this. Head out to our browser. 
     This app has public analytics. Great. Let's go to about. We've got an about site. 
Perfect. Next we need an URL to the site that we can tell Umami about. 
All right. Let me just    
Yeah, you can create a Git repo and we can deploy that repo. 
We'll do one of those, we can do a repo create. I'm going to add this. Oh, I have to make it public. There we go. And I think we go    so, we'll get remote. GitHub, remote add origin, and we'll say GitHub.com, copy/paste it, good. And then we're going to get push origin main. 
     All right, so, there is our app. Good deal. 
Let's try a relatively new feature. Just copy the git URL, the GitHub URL off your project. 
Got it. 
Go to your Railway project. 
Go to this Railway project. 
Close the Umami service. Do command K. No, no, you don't need to go out. Back into the project. 
This one? 
Yeah. Command K and paste your GitHub URL. Yeah, now deploy it. 
Did you all build this in house, or is it command bar? 
Built this in house. 
Nice, this is good. 
     All right, so, it's initializing. 
Yeah, this should start deploying basically the Next.js app. You can see you didn't have to do anything. Just gave us the URL and figured the rest out, like the repo URL. We intelligently figure everything else out. You can see we already have the URL that your app will be deployed on. So, we can copy that and proceed with the rest of the stuff. 
     I think if you go out of the deployment. If you scroll up a little bit, and go to all deployments, where it says all deployments. Okay. The URL isn't quite visible, I guess, until the deployment is completed. It's on the left. So, I don't know if you can copy it from there. Or we can wait for ten, 15 seconds until it deploys. 
     Yeah, you can copy it from there, yeah. 
Okay. 
We can go to where we deployed Umami. 
Where we deployed it, so here. 
Yeah, this one. So, add website. And name and domain. I think you have to remove the HTTPS, or it will keep shouting at you, yeah. And this is the share URL thing. So, if you enable share URL, we can have a live link for people to look at later. 
Yeah, let's do that. 
Then hit save. Now you can    I guess you can go    there's like a link icon you can see. 
Here? 
No, not    what about the next one? Yeah, get tracking code. So, we need to copy this to clipboard. 
Yep, there's a button for that, great. 
Go back to our next app, and we need to do the    yeah, do we need document.js, or can we just put it in here? I always forget. 
That is a really good question, and I don't know the answer. 
The docs probably have it. 
Yeah, let's go here. 
I think adding would be the best. Just do document. Custom document. 
Copy/paste this stuff. 
Got you. Default is going to be    where do I put this? 
Underscore. Root of the pages directly. I guess doing it in the head tag might make more sense. I'm not sure. We can leave it here, that's fine. We'll find out. Yeah, we'll find out. 
Let's run this. If I come back out to my site, and I try to load it, did it    
Let's just commit this, right, add and commit it. 
Whoops. Commit. Feature. Add Umami 4 analytics. Push that up. 
It should hopefully trigger a new deployment for you. There we go. When you get a GitHub URL and we create the deployment, just to get you accustomed to the terminology, the bigger picture is the Railway project. Each individual thing is a service. Postgres is a plug in, but Next.js are services within your project. I've been using it, but didn't tell you what I mean by those things. When you go through the settings on Next.js, you can scroll down and see where this pulls from. 
Since this is not a fork, the sinking that we got with Umami, where it showed the upstream repo, use the next starter, but it's not a Railway starter, because of that we don't get the upstream link, which makes sense. 
Not exactly. 
Okay. 
The upstream repo stuff is not exclusive to Railway starters. Your repo is public, right. So, if you were to copy this GitHub URL and deploy it in my Railway or GitHub account, I'd get the upstream repo. And whenever you update your project, it would give me that update option. 
So, is that set my repo as a fork of another repo, you set up that upstream tracking, or if I have Railway fork the repo for me, you set up the upstream tracking? 
If you have Railway fork the repo for you. 
Got you, got you, cool. 
And the reason for that is we thought about this for a bit. Use a GitHub fork, you can only fork the repo once. You can't make it private. There are a couple other reasons. What we do for you, automatically check for updates once every 24 hours. If you are aware there's an update and we haven't checked, you can click the check for updates button that was there in the Umami thing. 
     It works exactly like you think a fork would, where we pull from upstream, create a branch, push to that branch, and there's a pull request. But we don't just use the GitHub feature for folks. 
Got you, got you, okay, great. 
     So, let's see. Now I have this app, and if I go into my elements, I look in the head, we should see our Umami script in here somewhere. Where did Google tag manager come from? 
I'm wondering that, as well. Where's my Umami script? Here. Here is my Umami script. 
So, if we go back to where we've deployed Umami, we should already see some data. So, if you click the real time button at the top, I think. Yeah, there you are. 
Hey, hey! All right, y'all. So, go hit this. Also, welcome Ben. Thanks, Ben and friends, for showing up. It's good to see you. 
     What we have done thus far, just to recap everyone, is we're using Railway today, and we have set up an instance of Umami, and Umami is self hosted analytics with a kind of privacy angle. Where we get anonymized data, it's not shared with third parties, and all those good things. We also deployed a basic next starter, did the create next app, and updated it to have two pages. So, we've got this home page here, and then we have our about page. And these are our two pages. And we've instrumented that with Umami by dropping into the next head this script that hits our Umami instance hosted on Railway. 
     So, this is the Umami instance on Railway. And, so, we can see the data here. And we can see also unique visitors, page views. So, this is also kind of cool. Three unique visitors, ten page views. We've got somebody refreshing the page a bunch, which I appreciate. That gives us real data. 
Scroll and there's a bunch more info, as well. 
Here we go. Real time logs, somebody from Argentina, very cool. Switzerland. This is fun. United States. This is really fun, right, this is me, because I'm the only person in the world who uses Edge. But, yeah, we get a good map of where people are coming from, and all these good things. If we come over here, we can find Switzerland, here's our one visitor, Argentina, three from the U.S., one from Canada. This is fun, really, really fun. 
     Faraz, I assume that's you that just popped in. 
That's me, typing on the URL real quick, smashing on my keyboard. 
Here's a fun question, can I find UAE on the map, and the answer is very obviously no. Where the heck is it? Right here, isn't it? 
Little to the right. If you zoom in. I don't think you'll be able to find it like this, because it's tiny. But yeah. 
Oh, it's tiny. Am I right on top of it? 
Go lower. 
There it is. I was wrong. 
You never would have found it unless you zoomed in. 
Okay. Now that I know where it is, it's right here. Perfect. This is fun, right. It's updating in realtime, somebody from Mexico tuned in. This is really, really fun to see. Oh, if I scrolled up or down, I could have zoomed in. A lot of fun to be had here. Not a lot of information who these people are, but it's private. All of my users are from Germany, then having content that's not in German feels silly. And knowing what browsers people use is really, really helpful. Knowing what operating system people use is helpful. Helps me determine where to test. All good stuff, really good stuff. Then we've got which pages are    somebody had a fake page, love it. This is great, right. We're getting really good information without any privacy. And this is all self hosted. And you mentioned earlier that we can make this public, which I would love to do. 
Yes. I think if you go to the dashboard again, to the Umami dashboard, yeah. And let's see. Maybe the settings icon on the right. Yeah. Below. Okay, share URL. You were in the right place, yeah. 
Share URL. Okay. If we copy this    
Share it in chat, everyone should be able to see this information. 
Cool, all right. Everybody should be able to see this, if they want. And we can go back into our site and say if you want to see these, you can view them at this link. 
     All right. We've got that. We should probably put in    going to do this very quick and dirty way, but we will link to the homepage. And duplicate that, and link to the about page. 
I think you should be using the next link component. 
Link from next. 
And you want an A tag inside the thing. 
Okay, here's my link. Okay. So, then if I run so it's not unusably weird. Okay, let's add some space. Okay, we'll do color, blue, and text decoration, underline, because I want our links to look like links. That's better. Maybe we can use a tiny bit of    (audio cutting out). Sorry, everyone. 
     So, perfect. Now we've got usable things. So, let's copy/paste this over to our about page, as well, so we can navigate back and forth. 
Need to import the link in the about page. 
Let me grab that, I can get rid of that. Come up here. Good. 
     Now we can navigate back and forth, and when we go to here    oh, man. Let's fix the inaccessible links, and that is going to be on homepage. I can just copy/paste the style. We'll do this. We've got a link. Ta da! 
     Okay, let's commit and push that. Analytics link, so we can get push. If we head back over to Railway, we'll see that this is now deploying. Nice. 
Yep. 
Cool, all right, so, we've got good things going on here. We're building, I would say, a pretty full featured app, in terms of the basic structure. We've got analytics, things like that. So, we can watch that. 
     What else    let's see, is there anything else you wanted to dive into here or showcase? 
Yeah, I want to show one more thing. 
     So, you've created    generally, I've noticed what you do with your streams is you shared links to the repos, so people can test them out, they can deploy them on their own, have the same experience and learn those things. 
     So, we can take this one step further with Railway. So, how you deployed Umami was use the template we created and it was super easy for you to get going. Now what we can do is this project that we're looking at, we can convert that into a template, so people can use it. 
Oh, cool. 
Whoever deploys that template will get Umami, plus the Next.js service with analytics already built in. 
Oh, cool, okay. 
Yeah. So, just close the Railway and Next.js service. Go to settings. These are your project settings now. And if you scroll down, you can see generate template from project. And this created a template for you. So, you can edit the template name, which by default is the project name. You can call it whatever you'd like. 
Next.js app with Umami analytics. 
We'll have to do a little more work here. Yeah. 
Does it need to be kabob case like this? 
No, you can do a normal string, as well, yeah. Perfect. We need to do a couple more things. If you edit the Umami service. What we do here, when we create the template for you, we take the environment variables but don't take the values, because values could be secrets. So, we have to configure the code. If you click the edit button and set default to 3,000, then click update variable. Do the same with host name. Static URL. Yep, update variable. 
This one we want to leave empty, right? 
Yes, leave that empty. Just update service on the left. Next.js service did not have any environment variable, so we don't need to configure them. And you can just click update template. 
     So, now it's taken you to your account settings, where you can see all your templates. You have a referral code, which you can attach to any template link. If you turn the radio button off, you'll get a link without the referral code, which you can share with people. 
     You can close this tab, and we can reopen it. You can see all your templates will be listed here. You'll get analytics on how many people have deployed it, when you share the link with people. So, if you want, you can attach basically this link and people can just deploy the whole thing at once. 
Got ya. That's cool. 
You can even visit the template to see what it looks like. If you click on the template name, you can see that, as well. 
     You can see this includes two GitHub services. One is Umami code base and one is our Next.js app, and one database, which is Postgres. And people have to configure    so, you have the same name, but you can see that whoever deploys this has to enter the hash and they are good to go. 
That's cool. This is very cool. 
Someone has already deployed it once. 
Yeah? Nice. Very cool. This is very cool to see, because what I like about this, it scratches an itch that's even a little higher level than just push to deploy. It's very cool that you're able to do a suite of services and say, you know, I want to deploy a website, but my website needs an API, and I don't necessarily want to pull all of that in the same repo, but also it's nice to click the button and deploy all of that together. This is really nice. I like this a lot. 
This is sort of where we see Railway going in the future. Say you want to build a calling app, but you want a marketing site, a blog, an up time monitor, analytics. You can just do command K, type analytics, we'll show you all the analytics options we have. In the future. Not right now. I think analytics should still work. You're not inside a project, which is why it's not showing up. When you're in a project and looking for services, we want you to be able to smash anything on the keyboard and give you our best guess of what we think you should be seeing. Blog, marketing site, GraphQL service, or whatever. 
So, I do have a question about how we have this URL here, which is my deployed instance. That's currently hard coded in here. 
Yes, we want to make that an environment variable. 
Just walk through the whole process before we build it. This needs to be an environment variable that we need to pull out and configure for this site. 
     So, when I look at my dashboard, here, this needs an environment variable that relies on the production environment of this one. 
     Is that something you can actually do part of their railway deployment, or a bit of manual config here? 
There will be manual config at the moment. Right now, services can only pull variables from plug ins, but something we're going to tackle in the next couple of months, you'd probably at some point also want project level variables. You define variables on the project, and all services in the project pull them. You might want some services that only communicate with each other, but not the public Internet. And then they should be talking to each other. 
     Those are the things we want to tackle, let's say, in the next quarter or so. But right now what you'd have to do is your first deploy would kind of be broken, because you don't have the URL yet. And once your first deploy is completed, you can update that environment variable and your analytics will start working. 
Right. And Tony is asking in the chat if we deployed the Next app with Netlify and Umami to Railway, it would still work, right? 
Yes. 
Very cool. And the great thing about that, we're basically saying, you know, this URL. And my guess is that somewhere in the Umami settings we can do something like only allow    and what we're saying is we're only allowing events from this site, right. 
Yes, yes. 
Got it. So, somebody couldn't go in and spam our analytics or something like that. 
That's another cool thing about Umami, where your tracking code is your self hosted URL. Because if you were using something like GA, a lot of add blockers will block it, because they know what the link is going to be. Here your link is sort of like    your host name, where you've deployed it. So, ad blockers can't block that either. 
Got ya. Yeah, this is one of those things always kind of interesting. Ad blockers are there to keep people from getting their data sold and traded for targeted ads. So, analytics    I don't know, it's always such an ethical, weird    the ethics of this, right. Because seeing what people use, and I have literally no idea who it is except for, obviously, Tony, who's billboarding right now. But that information allows me to improve the content of the site, which is why I think you see that request. Hey, can you share anonymous telemetry so we can improve our service. That's useful. People can still opt out of it. With analytics, it's a little less, I don't want Google to have a lot of my data, even though they have a lot and they'll find that way even if they don't. That feeling of I'm not really comfortable sharing the behavior of myself on the web. So, an ad blocker lets you do that. 
     But being able to get the information in a way that's not exposing anything private is super useful for me as a developer. I don't know, you could have a whole panel on this, the ethics of anonymous data. 
It's a little tricky. We've had this conversation internally, as well, as we've tried to get more data and build features that users want at Railway. I guess what we ended up deciding in the end, even though we use privacy focused tools for analytics, if a user wants to opt out, we should respect that. We didn't try to work around it, sort of. If you want feature based stuff, you can also do your tracking on the back end with tools like Segment, where you're not keeping user data, but only project created. Service created, plug in created, stuff like that. 
Right. That sort of stuff, you need that information, you need to know what people are using on your site. The specifics of where people are, things like that. That matters a little bit less. 
Yes. 
So, what I think is really interesting here is that, you know, we're, what, maybe 45 ish minutes into actually coding, and we've managed to set up our own analytics service using Umami. That's deployed, it's running, and we were able to build and deploy this next site that is also deployed and running and sending that data to Railway, or to Umami. And we can see that happening now, where, you know, here's the data that's coming from me. And if I click this link, this is public. So, people can see how many people are looking, and you can see two people have this window open right now. Or it might be me opening it twice. Either way. 
Two people on the actual website. So, this website. 
Yeah. Oh, that's what it is, not how many people are looking at the analytics. I got you. But, yeah, it's really cool to be able to see that there's a public URL, I can share what's going on with my site, somebody can go in and take a peek at what's going on with the different setup, yeah, today, last 24 hours. And, you know, there's no realtime here. But it's still very useful. I love this. It's so nice to be able to do this sort of thing. I always want to share this information, because I think it's cool to let people see what's going on in various apps. I think the build in public thing is really cool. 
     So, you know, I'm not going to build this. No way I'm going to build some kind of stats aggregator that I can turn into a dashboard. I'm never going to do it. So, it's really nice we were able to build this so quickly using open source software. 
Yep. 
Okay. So, we have analytics up and running, using Umami. Umami is very cool, here's our public URL, here's our private dashboard, where we've got a little bit more, we've got the realtime, we've got some settings where we can mess with some stuff. Looks like I can create accounts for people so other people can go in and see it. I've got my own profile, set to my time zone, all those good things. Oh, there's a dark mode. Look at that beauty. 
     And, so, then we've got our public Next site, which is out here somewhere. Here it is. 
     And that's giving us the ability to navigate back and forth. We would, as we build this out, all the pages will automatically have that snippet injected, because we put it in the document. So, we don't have to remember to add analytics. It just works. And I saw that Umami also supports events. So, there's some things that    actually, do we have time to set up an Umami event? 
I have never done it, but we can figure it out. 
I want to try it. Okay, let's try an event. I want to see how this works. 
     So using CSS cloud, that's all you have to do is add a CSS class? 
Or JavaScript, we can do either. 
Button unclick, Umami. Window.Umami is just there. Okay. All right. Yeah, let's just try this. This is going to be great. 
Do you want to do the CSS way instead? Next might give you problems with the window element if doing SSR. 
Good point. We can do this one. What we'll do down in here is see if somebody wants to look at the public URL. So, we can add a class name. Our class name will be click public analytics, right. And then if we go out here, we'll get    
You want an ID, there was something about an ID, although I'm not sure if that was necessary or if it was a suggestion. 
ID. 
That's just an example, add the class. 
Click, record an event. Sign up button. 
I think that should do it. 
Great. Then we're going to say feature, send events for public analytics. So, we'll push, wait for this to build, which should happen nice and fast. And while we're doing that, where else should people go, are there resources or communities or anything that you want people to be aware of if they are checking out Railway stuff? 
Yep, go to Discord/GG/Railway. I think it's linked in the bottom at the footer. 
Here we go, Discord. 
We have documentation at docs.Railway.app. 
We have the docs.Railway.app. So, here's docs.Railway.app just straight up. 
We also have a blog at blog.Railway.app, where we have tutorials on deploying. We have a really nice post about how we work at Railway, how the whole team functions working async remote. That's pretty cool if you want to check that out. 
     Yeah, Discord is probably the best place to find us. The entire team is on there. We do all our    so, users were on the Railway team plan. Teams that use Railway are on the same Discord, so they ping us if they need help. We have a bunch of cool stuff going on there. 
Where did my class name go? Here it is. There's our class. So, if we click this, ta da, then if we go in here, we should see realtime. Let's look at events. Click, public. 
Nice. 
I'm going to say, Umami team, such great work. That is so easy. I didn't have to add extra JavaScript. It just worked. And it    this is nice, very nice to be able to do this sort of thing. Just these little bits of instrumentation are so helpful in seeing what's going on. If I filter down, I'm in my realtime. You can see my page views here. Got refers, got pages, good. And then we've got all this data. 
     So, really cool to be able to see where people are coming from, what pages they are looking at, what events they are looking at. And you can also see which pages are most popular. And we get that with a range of data. So, when we go out here, we can see back to all time or different date ranges. So, this is really slick. Let's get into the dashboard. 
     I want to see events, somewhere down here. Here's our events. We can also see if we've got things instrumented, like what are the most popular events. So, if you all want to go and actually click this link    oh, yeah, dev.new was also very slick. If you want to set up a new railway project to dev.new, that's nice. 
Small reminder, you don't even need an account, if you're deploying a plug in. You can deploy without an account and we keep it for seven days and you can come back and claim it. 
Yeah. So, really, really cool stuff going on here. We've got    we covered a lot of distance in a very short span of time. And, so, we've got real time analytics. I'm not touching keys, and we can see events coming in. We have a running Next app deployed and on the web, we have a self hosted analytics up and on the web, public URL for viewing that. We've got an ability to update either of those services with a push to Git. Yeah, just really, really solid all around. 
     So Faraz, where should people go if they want to keep up with you? I'm going to drop your Twitter again. 
My Twitter, yeah. Or the Railway Discord, where I hang out the whole day. That's posted, too. 
Cool. Okay. Well, I think then we're going to call this one a smashing success, because this is probably one of the more advanced builds we've done inside of the short amount of time that we have on the show. So, very, very impressed with the amount of things we're able to get up and running and connected. 
     Huge props to the Umami team for putting together great analytics that were so easy to deploy, props to the Railway team for making those starters cool. Good, good stuff. 
     So, let me do another shout out to our live captioning. We have had Ashly here from White Coat Captioning all day, taking everything we say down. Very much appreciated. That's made possible through the support of our sponsors, Netlify, Nx, and Backlight. All kicking in to make this show more accessible to more people. 
     While you are checking out things on the site, make sure you go and look at the schedule. We've got some really good stuff coming up. Next week we're going to build and deploy a React app from a Monorepo, and I've scheduled a few more things that I'll try to get up by the end of this week, so you have them on your schedule. You can get those instantly added if you add this Google Calendar link. That doesn't give you notifications. It just lets you know when stuff is happening, puts them on the calendar. You can also follow on Twitch or head over to YouTube and subscribe there, so you don't miss an episode. 
     Faraz, any parting words for the chat? 
Go to dev.new and build cool stuff, I guess. 
Love it, love it, love it. All right, y'all, we are going to go and raid Alex, so, buckle up. Faraz, thank you so much for spending some time with us today. We will see you all next time. 
Bye.
","[(0, 0.45357376), (1, 0.053518165), (2, 0.49290812)]",0.45357376,0.053518165,0.49290812
"Hello everyone. Welcome to another episode of Learn With Jason. Today on the show, we have Cassie Evans returning, with a special guest. Do you want to introduce us? 
This is Brody. Brody, do you want to say hi? 
(Dog howling) 
Well, we had a plan, but now this is all we're doing for the full episode. 
I think he's okay with that. 
So Brody will sing on command? 
Yeah, he sings on command. 
That's amazing. 
It was really good during lockdown because we just went out into the wilderness and screamed into the winds together. That really helped. (Laughter) 
Oh, I love it so much. Okay. Well, I feel like I've already gotten more than I could have hoped for out of this episode. So I know that you are struggling a little bit with Wi-Fi right now. So fair warning to the chat. We may run into a Wi-Fi wall and have to reschedule. 
But we're hoping that it pulls through for us. Now, let's see. Where should we start? We should start by introducing you. For anybody who hasn't seen you, you've been on the show before. But let's do a little bit of a background. Also, things have changed since the last time you were on. You're now working at GreenSock, which is incredible. But give us a bit of a background and status update, maybe. 
Yeah, so working at GreenSock. It's great. My partner constantly is just, like, staring at what I'm doing on my screen and just shaking his head and walking away in dismay. Because he's like, how is this your job? So I just make lots of fun demos and get to help people learn, which is basically what I was doing as a side gig before. 
I was just doing it, yeah, in my spare time. Now I get to do it for my job. So pretty good. 
I'm so happy for you. I think that's -- it's such a good experience when you get that opportunity. I very much feel the same way about my job. It's like, how do I get to screw around on the internet with people I like and somehow that's the thing I make a living doing? (Laughter) 
But yeah, so I am thrilled to have you back on the show because the work that you do is always super engaging, super interesting to see, just really, really incredible stuff. And it's also something that I think a lot of people find to be just out of reach. Like, I think a lot of us when we work in front end, we look at animation and go, oh, that's what an animator does. 
I know that I have felt that kind of, like, oh, I wish I had enough time to learn how to be an animator. I wish I had the whatever, whatever quality I want to assign to myself. I'm not creative. I'm not an animator. I'm not capable. I don't have time. I just always put this wall up. 
But what I love about your work is that you always manage to remind me and everybody else in your vicinity that this animation stuff is not limited. It's not as much of a specialized skill in terms of, like, you don't have to know tons and tons of deep programming things. You really just have to be willing to play and experiment and learn what I continually find is a pretty friendly API from GreenSock. 
Yeah, like, I found that when I was starting to learn how to code, because I was coming at it from like a graphic design and motion graphics background, and a lot of the examples and tutorials that I found, especially when I started learning JavaScript, they were just very much like, you know, do this and then some data gets logged out in the console. 
And I got really stuck transitioning over from CSS to JavaScript because it just wasn't visual enough for me. And then I discovered SVG and GreenSock. I was like, oh, I can move things around with JavaScript. 
It suddenly unlocked this whole world, just because I was kind of doing something more visual and creative. So I really -- that's like my main goal, to help other people have that a-ha moment. 
And it is something you've done so well. I think I have specifically screamed a-ha at the top of my lungs multiple times while in conversation with you, which is always wonderful. You've also got a good quality of making this stuff and approachable. 
Like, Adrian is in the chat asking right now, you did a sticker that said ""get wrecked,"" which is incredible. He's actually asking if there's a link to buy those. 
Oh, I've got a ton of them left. I'll, uh, yeah, I'll make sure I can send some of them out. I basically just made that because I thought the pun in my head one evening, and I thought it was really funny. Then I was like, I've got to have a sticker. 
I mean, that is just a top-tier pun. So let's talk a little bit about, you know, I think animation is one of those things that I've never met somebody who didn't want to be able to do it. Like, we all look at it and go, oh, it would be so cool. But a lot of times I'll talk myself out of it. 
What I'm curious about is, you know, how have you seen animation impact things in a -- I mean, obviously it's fun. But how does it impact things in a business sense or like a user experience sense? You know, we can maybe tie it to our jobs as a way of learning it. 
I think I froze for a little bit there. Am I back again? 
Oh, you just caught up. Did you hear the question? 
Yeah, I did. And then you went a little robotic just at the very end. But yeah, so I've been really lucky to work on a lot of event sites and a lot of sites where, like, the visual impact is the most important thing. 
I think there's always this question of, like, should you -- should animation -- like, should you animate everything? When is too much animation? I think there's a huge difference between kind of corporate business sites and obviously, like, your kind of award sites or event sites. 
I think that animation can really help with wayfinding. Like, small animations can help explain an interface. There's a really, really great book. I can't remember the name of the book off my head. But yeah, she's written a great book about all of that, and she's also written loads of blog posts. If you're doing a portfolio site, you can go a little more crazy, I think. 
Mm-hmm. And the other interesting thing I've seen is a lot of animation, you know, we notice the ones, the ones that people talk about are the big ones. You'll see, like, the footer of your site, where the eyes of the animation follow the mouse around. It's like this really cool, interactive experience. I don't know if they still do this, but the log-in screen had a bear that would watch you type your username. Then when you went to type your password, it would cover its eyes. 
It's these really big, animated moments, but there's also so many tiny animations that when you look at a really polished, even super corporate API. Like, Stripe is a great example. 
Stripe does it really well, yeah. 
And so those little animations, like maybe we don't get a chance in a super corporate site to do a big one, like a big, fun total illustration, but there's lots of opportunities for these micro-illustrations. I don't know. It just feels good to use that, right, instead of popping or whatever. 
Yeah, and I mean, I feel like good animation goes unnoticed. That sort of animation, when you're talking about UI animation on like software as a service, business sites, people will be like, oh, no, I don't like animation. But if you actually strip all the animation out of an interface, you'll notice it will feel clunkier. And there's all sorts of ways that animation can help give context about an action you've taken. 
So there's been loads of times in my life where I've like, you know, clicked a download button or I've clicked a send form button or something, and then nothing happens. You have to sit there and process, like, what's going on? Do I need to click it again? If you've gotten a animation that's like, oh, sending, just a simple animation like that, it can take the -- reduce the cognitive load off the user. So it's really useful. 
Yeah, yeah. So what we're going to be doing today, I think, is probably going to be more on the silly and fun side. But I'm going to make an assumption here that a lot of the techniques we're going to learn will be valuable in these smaller animations as well. 
Yeah, definitely. So we're going to play with, like, a super-secret new GSAP thing today. So we actually planned to have the launch out by now. It's coming in the next couple of week, and I've managed to twist Jack's arm to let me. 
Does this mean we're getting a Learn With Jason exclusive here? 
Yes, you are. Learn With Jason exclusive. 
Oh! All right, chat. You're going to see it here first. So don't go anywhere. Okay. So that's really exciting. I mean, I'm really pumped about this. I feel like it's going to be great. 
I saw a question in the chat from gj1118 about whether we're going to see examples. Absolutely. We're going to switch over and do desktop stuff here in just a minute. I have a couple more questions before we go and do that. 
(Explosion) 
(Laughter) Haven't seen that one in a while. But yeah, so we are, I think, in really good shape here to kind of -- I want to talk a little bit about, like, I saw a question. How do I convince my client who runs a software as a service app to spend the money on animation? Likewise, if I work at a company, how do I convince management this is the right kind of thing to prioritize? Have you found any good techniques or metrics or things that can help make that business case for people who haven't seen the value yet? 
I think it's one of those things like accessibility. It is really difficult to get sign-off unless you've got that engrained in your culture from the beginning. So I would say animation is -- oh, wait. I think I've frozen again. Have I frozen? 
You're still here. 
Oh, I'm still here. Okay, cool. So, yeah, it's hard -- sorry, I'm hearing an echo. Really awkward. 
I'm not -- you shouldn't be. I'm not hearing it. So I'm not sure what's happening. 
Okay. I'll carry on talking. I think it's fine. Okay. Yeah, so I was saying about accessibility. Yeah, technology sucks sometimes. 
If you've got people like higher up or earlier on in the process that are thinking about it, it's a lot easier. So I try to get designers where I worked to think about animation early on, and we'd have conversations early on, which that definitely helped. 
Then I think you just get feedback from your users. I'm not really good with metrics and stuff, but Sarah Drasner wrote a really good article. It's called ""In Defense of a Fussy Website."" It talks about engagement metrics that are the most important. Like people enjoying spending time on your site and staying on your site. 
So, I don't really do tracking stuff, and I don't know much about it. So I wouldn't be the one to ask about, yeah, like how to get the data to show people, but I think you can tell when people are enjoying something. 
Yeah, I think that's definitely one of the things that I've noticed too. I'm always looking for, like, what I would call the intangible quality factor. You hear people talk about it, even if they can't articulate it. So a lot of what I've seen is that when people talk about certain brands, they will mention, like, it just feels solid, or I love using it. This is my favorite site to look at, or I always show this to my clients as an example. 
Any one of those statements is an appreciation of some underlying goodness of that site. Typically when you start poking at them, a few things become really clear. Like, you know, they spent the time on the UX. That usually means they've got little micro interactions. Something that makes you want to do the next step. Like the arrow moves a little and draws your eye and you can see what's going on. Or the forms kind of subtly shift. Like if you put in your credit card number, it animates from a blank card to a VISA or whatever card you put in. 
Just that little stuff, when you use it, you go, dang, this is thoughtful. This was carefully made. And it makes you trust that site more, and I'm more likely to go back. I'm more likely to default to that payment method over the one that made me go through 18 hoops and a bunch of extra. You end up on, like -- what is it, you go to the site, click on a thing, put in your credit card information, then it opens a pop-up like we're going to verified by VISA. Then you go to close and it says do not close this. I feel like I'm going to break it and double purchase and all these bad things. 
Stripe, something like that, click, click, quick animation, and oh, you want to track that with your phone? Like, it just feels solid, right? 
Yeah, I think there's some things that make animation a little easier to get sign-off than accessibility stuff, sadly. Animation is shiny. You can show examples and take, like, the Stripe website. There are good, corporate animated websites out there. You can show people, and they'll usually get wowed by them. 
Also, everyone is aware of engagement nowadays. Animation really helps with engagement. Like, I recently did a site, and it was for the -- it was a site to raise money and awareness of how bad a state the New Orleans sewers were in. No, the water system. So people just had to read this huge, long page full of information about water pipes, which is super boring. 
But we did loads of animation. We did these little animated pipes that ran down the page and water drops and stuff. It made people read through all of the information, scroll down the page, and then give their details at the end. So stuff like that can help. 
Yeah, absolutely. And the chat is chiming in with good points. It creates a mood on a site. Like a corporate site can feel very static and inflexible. Just a little bit of animation can make it feel fun. I think an example of a company going really far with that is, like, Tunnel Bear. If you go through any of the flows, you find these utterly ridiculous animations. 
I think after you purchase, there's a screen where they just throw fish at a bear, and it never stops throwing fish. So it'll like fill the screen up. Just all these fun little things, right. 
Or you can do it really subtle. If you go to Betterment, which is an investment app, when you go through the pay, there's subtle parallax animations our a loading screen. It makes it feel more approachable. Oh, no, we have a frozen Cassie. 
I'm back. I think I'm back. 
You're back! Okay, all right. 
So stressful. 
This is going to be super fun because we're also going to learn how much I've retained from previous calls when we actually get to the coding, which speaking of which, it could be time. Let's go ahead and jump over. 
Yeah, let's do it. 
All right. I'm going to go camera two. Here we are. 
Apparently it was a good smiling freeze. 
Yes. (Laughter) all right. Before we get started with coding, a quick shout out to the sponsors. We've got White Coat captioning. Rachel is here doing the live captioning. That's made possible through our sponsors, Netlify, Nx, and Backlight. Thank you for kicking in. That helps cover the cost of creating the show. Means a lot to me. 
Also, chat, thanks for the subs. I saw Aidan got a gift sub. Ben D. Myers is gifting subs. Thank you very much. That also goes toward covering the cost of the show and making things great. Thank you all so much for being here. Means a lot. 
Also, we're talking to Cassie today. Make sure you go give Cassie a follow on the old tweeter. If you want to follow along with those live captions, those are on the homepage. Learnwithjason.dev. 
So, also, I don't know if you are all following, but I recently did an experiment with I was trying to remember all the things that I've learned from Cassie and Sarah Drasner about animation. I tried to make this little exploding nav thing. I'm thinking about redesigning my site. So I'm looking at, like, can I make this work, right? 
Turns out, I could not. But Cassie could. I got some excellent tips on how to make it function and work cross-browser. This particular pen will only work on Edge and Chrome, I think. It broke on Firefox and had some issues on mobile Safari and things like that. But yeah, so this is kind of like one way that we can animate. 
This is kind of interactive. It's built on ScrollTrigger, which we're going to be talking about today. As you scroll the page, the elements move. I did a really lightweight version of this. I just kind of copy/pasted some stuff. And it did what I wanted. So I was like, great, I don't need to change this anymore. (Laughter) 
But what we're going to be doing today -- 
That's what I do a lot of the time. (Laughter) The best way. 
So today, you sent me this. I'm already just thrilled by this. Like, this is incredible. You know, I will say every time you have come on the show, you've created a piece of lore for the show. I can't even tell you how much curly boy, square boy mileage we get on this show. Like, it led to -- somebody even created a shirt design out of it. 
Something tells me the Corgi is going to continue here. 
I love how everyone was like, oh, Cassie is so funny with the curly boys and the square boys, like I was being funny and just didn't know. I just didn't know what they were actually called. I still don't. 
I mean, I think we made it cannon that they are called square boys and curly boys. 
Yes! 
So with all of the setup here, I think everybody's really excited to see this in action. So why don't we jump right in? Maybe you can set the stage for us. I don't know, maybe first and foremost, what do you want to create today? 
So I originally just wanted to play with ScrollTrigger Observe, which is a new thing we've got coming up in the next release. Then I kind of woke up this morning at like 5:00 a.m., and I was like, we can do hit tests! We could make it a game! 
So I think we're going to make it a game now. Like a little game. 
I'm so excited. And there was a poll. You put a poll up, which I think foreshadows what we're in for today. So let's dive in here. Okay. What do rainbow Corgis eat? The options were hot dog, bone, lollipops, and other. Looks like lollipops won despite me clearly voting for hot dogs, by which I mean sandwiches. 
Beef Skittles. 
The whole UK crew really let me down today with that whole discourse. Where did this go? Look. Please, everybody go dog file on Phil and tell him that this was a terrible idea. 
Excellent. 
Okay. So we've got, just to kind of assess here, this really fun SVG. If I collapse this SVG, that's the whole thing. So this whole thing is an SVG. Then I'm assuming that the background is these blue sparkles. Is that correct? 
Yeah, that's the one. So yeah, we've got a little Corgi and a Pop-Tart. Then there's some basic styling. And we're going to have a little play and make him interactive. 
I love it. So, what's the first thing I should do? 
Right. First thing, what should we do first? Let's get like a little animation. Let's just kind of -- yeah, we'll do like some -- what do you call it? Before you do an exercise, what do you do? Warm-ups. That's the word. You can tell how much I do exercise. We'll do some animation warm-ups. 
Okay. All right. 
Have I frozen again? 
No, you're here. 
Stop freezing. Come on. I'm here. I was begging that my phone gets us through this. So yeah, let's do some background animation first. We're just going to move the background along so that it looks like our little Corgi is, like, bouncing along in the sky. 
So we're going to do a GSAP tween. We're going to say GSAP to. It's saying, hey, GreenSock, animate to these values. There's also from and from to, which is saying from those values or from values, to these values. 
So let's just move it along the X axis a bit. We're going to move the background. You can just pass in a target with the background ID. I think it just had a class of bg. 
Bg. Then it's an object, right? 
Yeah, it's an object. Then we're going to say, like, let's move it along the X axis by half of its width. Now that would usually involve a calculation. Look at you doing a calculation. So you can use functional values in GSAP, which Jason has remembered. 
But we can also use X percent. So we can just say X percent minus 50. And it will move it. 
So when you say X percent, like -- 
That's the property. So instead of X, we're saying X percent. 
Oh, like I do it like this. 
Yeah, yeah, yeah. 
Minus 50. 
Minus 50. And then if we play that -- oh, you might need to press run. Wee! So it's just moving along by 50%. And then we can just loop that. 
So if we say repeat minus one, it will loop it infinitely. I also really hope that you've got one of the nice new Macs because we're going to do a lot of animation. 
I do. 
Good. So yeah, repeat minus one. 
I got to run it. 
I have no ease on this. So ease none because the default ease is going to do like a little bit of easing, and we want it to just look fluid. So we're going to say ease none. 
Then duration, let's give it a long duration. He's zooming along right now. 
Unsafe speed for a little Corgi. 
Yeah, very unsafe. 
This is a school zone. 
So let's, yeah, knock it down to like, let's say, 10 seconds or something. 
Is it seconds or milliseconds here? 
It's seconds in the GSAP world, yeah. Also, I can barely see your screen because of my Wi-Fi connection. So if you do typos, you're on your own. The chat is going to have to help you. 
All right, chat. 
Help Jason out with typos because I literally can't. 
I did forget to tell you, if you hover over the screen share, there's a kebob menu that will let you embed. If you open that in a new tab, it'll make it full screen, which is maybe a little easier to see as well. 
Oh, wait. You're talking to me. 
I was, yes. 
I ignored that whole thing. I thought you were talking to the chat. 
(Laughter) 
Sorry. 
There's a kebob menu on the shared screen in the call we're in right now. You can open that in a new tab. It's going to let you copy embed link. That'll let you open just the shared screen in a full-screen window so you can see. 
Oh. Let's try that. 
Yeah, I'm off menu ordering kebobs. (Laughter) 
Oh, you're massive! This is great. 
Good. Good, good. 
Brilliant. 
So now we're drifting through space. 
Drifting very casually through space. So we need to be running. We want to do the little Corgi running thing. So let's do some legs animation. So, I reckon, because we've got one element, we're going to target the group, like the legs group. We want those legs to go around in a little running motion. 
So that's going to go through a series of different steps for one object. Usually if you're animating something through a series of step, you'd reach for a timeline with GSAP. But we also have key frames. They're really underutilized, and we've added some cool new additions in the last release. So let's do this with key frames. We're going to do it with new key frames. 
ID legs. 
Consistency. I take it back. Excellent. So, we kind of want the legs to go, like -- let's think about the Y axis first. So we want them to go, like, up a little bit and pause in the middle. And then down. 
So up, right. We want the motion. 
You want that to go. So let's do some key frames. We're going to say -- oh, we're going to do it in a key frame. 
Oh, right. So key frame starts here. Then is this an array? 
It's an object. Then we're going to do value-based, like array-based key frames. So we can use Y percent again. So let's do Y percent. Then we're going to pass in an array. So that array is going to go -- like, we want the legs to go up, middle, down, and then middle, and then back to the beginning again. So let's do the first value will be like, say, minus ten. Then back to the middle, so we'll say zero. Then ten. So that's down. Then back to zero. Then back to the beginning again, so minus ten. 
Okay. 
Awesome. So let's run that. 
Oh, got to loop it. Is that after the key frames? 
After the key frames block. I sometimes put all of my key frames on one line. That's a little easier to read with the GSAP tween. 
Oh, like in here? 
Yeah. 
Yeah, I think you're right. That'll be easier to read. 
I can just about make out it's a long, blurry blob. 
Yeah, (laughter). 
So, let's see. 
Oh, I forgot to add a comma. Here we go. 
Yeah! Look at him go, up and down. Awesome. We want to do the same for the X axis. So let's copy those key frames, and we're going to do X percent instead of Y percent. And that's just still in the same key frames block. 
Same values? 
Oh, froze. 
So, I'm going to try these. So straight up and let's see. Woo! (Laughter) Not quite right. I have to get our values adjusted here. I mean, this is kind of doing it, though. Here we go. 
Okay, I dropped out for a while, but that looks good. That looks really good. Awesome. So it's a little bit juttery, and that's because we can do easing in key frames and also in the whole key frame block. So inside the key frames, let's define ease each, so after X percent. So it's ease each. Then say none. That's going to say no easing in between each of the values that we've put into each of the key frames. 
Then we can also say ease, like ease none on the key frame, on the tween itself. So this is really cool because you can get really granular with your easing. 
Mm-hmm. That's great. 
So, awesome. Cool. We've got little legs going. That's great. 
There he goes. 
Let's do the same thing for the face. 
Yeah. Okay. 
So we can basically just copy. Let's just copy that block. We'll do the same thing for the face. I think we probably want the face to move a little less than the legs, though. Otherwise, it's going to look like he's going to get a headache. It's going to be a bit intense. I'm guessing it's going to be a bit intense. 
""Night at the Roxbury."" 
I kind of like it. Should we leave it like that? 
It's extremely funny to me. 
That looks fine to me. So rather than having a whole other tween, where the target is, you can also pass in an array or pass in a CSS selector. 
Oh, you can pass in an array? 
Yeah, you can pass in an array of targets as well. 
I did not realize that. Okay. 
Yeah. But like, I often just use CSS selectors. But you can pass in an array of targets too. Awesome. Yeah, he looks like he's moshing. A little moshing Corgi. Awesome. This is fun, but this is just animation. Let's get some interactivity in here. 
He's running too slow to be going that hard. There, now you're cruising, buddy. 
So I gave you a link to a little demo earlier, like a little swipy boy. Not that one. 
Which one do you want to look at first? 
This one. So there's a lot of kind of full-page swipe galleries out there. I see a lot of them on awards sites. People are always coming into the GreenSock forums going like, how do I build this with ScrollTrigger? But the problem is they're not actually using the scroll of the page. What they're looking for is the direction, like the intent that the user has. 
So they're looking for swiping or, you know, mouse events instead of scrolling down the page. So we notice a lot of people were looking for this. So we've added something to ScrollTrigger in the next release called ScrollTrigger Observe. It's basically like an intent observer. 
It will give you feedback on what direction someone is trying to scroll in. So if you look at this, if you try and scroll down with your mouse -- 
Oh. 
Whoa. 
That's cool. Because I'm doing, like -- let me show you. This is cool. So here's my little track pad. I'm just going up a little bit, right. Down. There's not a lot going on here. Also, I think I just got my mouse into a loop. I did. I was touching the side, and that was causing problems. 
But yeah, so one little touch up or down and it moves around and tweaks out because I'm touching it. But this is really, really cool stuff. 
So yeah, if you take a look in the code there, am I frozen again? I'm probably frozen. 
Nope. 
I'm just going to carry on talking as if I'm not frozen. If you look in the code -- I can't actually see what's going on, but there should be like on change Y or on up. Like ScrollTrigger Observe somewhere. This looks like a whole timeline. There we go. 
On up, on down. Go to section. 
Yeah, so on up, we're kind of running through a GSAP timeline. On down, we're doing the same thing. So it's just really handy that you can -- with ScrollTrigger now, we can track those events really nicely. And obviously, like across different devices because it's not just mouse movement. It would also be like swiping on mobile and that kind of thing. 
So we're going to have a little play with this today. Also, the cool thing is that you can tap into, like, velocity as well. So we're going to tap into some velocity inside this. 
All right, all right. I'm ready. 
Let's do it. Awesome. So we've got our little Corgi. We should set up an observe. We're going to say ScrollTrigger.observe. It's built on top of ScrollTrigger. 
Okay. 
Then we're going to pass in an object. First of all, we're going to say type. This is a comma delimited list of what to listen for. So we're going to say listen to wheel and touch and scroll and pointer. 
Okay. 
Then that's covering all the bases. Let's say on change Y, so this is whenever there's a change, like a scroll or a swipe on the Y axis. And let's do an arrow function. Then in there, we can log out. Let's console log and do self.deltaY. And self.velocityY. 
Is it the first argument, or like a destructured -- 
Yeah, that's perfect. So, if we run that -- 
Okay. So it's running. 
Then if you do a little scroll up and down, we've got some values. 
Okay. So I'm going kind of soft. Then if I go harder, you can see the velocity goes way up. Softer, velocity is way down. And the delta is, like, I've moved four pixels up or something. Or is that the value? 
Yeah, that's the amount you've scrolled and the intensity is how hard you're scrolling up or down. 
That's cool. I like that it also rolls off. So if I do like a two-finger swipe and give it some oomph, my hands are up, but it's still -- right, like it still kind of rolls off a little bit. So that's also a huge pain to do normally. This is just done for you. I'm already excited. 
Yeah. It's great. I have to say, the velocity value is a lot because it's just reporting what's actually happening. So if you've got like a touch pad or a magic mouse or you're on a mobile, it's going to do that nice easing thing. 
My colleague's got a really old mouse with a mouse wheel. That, obviously, you don't get much velocity because you're just clicking. It's just going click, click. So yeah, it's just reporting what is happening. 
Also, I was just thinking. I clicked down, and then I drag up and down, and I'm also getting velocity values here. So that's pointer, I assume. 
Yeah. And if you were to open it on mobile, you'd also get swiping values. 
Cool. 
Yeah, this is really great because it just normalizes all of those values and just automatically looks for all of the different types of inputs for you. And this is a thing that with my little Cassie on my website, my little face, I think a lot of people get confused about, like, okay, so I know that I can get input from a mouse or I know I can get input from like where my cursor is on the screen, for instance, but how do I then change those values into something that I can use in an animation? 
So you can see -- 
How does it make you dizzy? 
You move it really fast. Faster, faster, faster. (Laughter) 
That's super fun. Okay. So we've got the ability to track this movement. We know direction up or down. We know the velocity. And so now we can start getting pretty -- like change Y, change X. We can start doing some pretty fun stuff here. 
Yeah, so the main thing that we need to do is we need to transform these values into something that we can actually use. This is a thing that a lot of people don't know about GSAP. It's not just like animation stuff. We've got loads of kind of plumbing under the hood to help you work with values and help you do all the stuff around animation that can be a little tricky. So scroll down, like, super hard and let's see what one of the biggest numbers is. Tell me what one of the biggest numbers is. 
22, 24, 25. Looks like I got -- oh, I got up to 33, 3500, 3840. 
Those are kind of outliers, right. Should we go with like 2200? 
When I scrolled really hard, it looks like I got up to about 15,000. 
Oh, okay. 
But we can probably go with, yeah, like 2200 feels reasonable. 
Let's go with that. Then we can change it if we have to. So there are utilities. One of them is a clump utility. So we're not going to do this inside ScrollTrigger Observe. We're just going to set up a number transformer now. 
We'll put this at the beginning of our code file. And we're going to say -- so, you can say, let's do a clamp. Let clamp or const clamp. Nobody ""at"" me. I always use let because it's shorter, and I like how it sounds. 
So we've got clamp equals GSAP.utils.clamp. 
Okay. 
Then we're going to put the lowest value. Because we can scroll up and down, we've got negative values and positive ones. So let's do minus 2200 as the lowest. Then the highest is -- 
2200, right? 
Or was it 22,000? 
I think I got up to 16,000. But if we clamp to 2200 and 22,000, that just means if I control really hard, it won't go any higher than 2200, right? 
Yeah, so we can pop in some higher ones if it's not right. So, yeah, let's have a little look. Where we're logging out the value, rather than logging out -- yeah, so self.deltaY, we're going to clamp that. So say clamp, and we're going to put little brackets around it. Then we're going to say self.deltaY. 
That's velocity, right? 
Oh, yeah, yeah, yeah. Velocity, sorry. 
So let's run it. Now I'm going. Everything is fine. I'm going to really let it rip. It sticks at 2200. 
Awesome. 
No matter how hard I scroll. 
So we're kind of clamping them into, like, a reasonable range. That's just because we don't really know what the highest number could be or the lowest number could be. Now we do. We know what the highest and lowest number could be. So we can kind of work with that a bit more. 
But we want to map this to something that we can use in animation. That's still quite a big number, right. So what we want to do is we want to map those numbers to the numbers we want to use. Say if we're doing rotation. Let's do a rotation. 
A whole rotation is 360, right. So let's map these numbers to a rotation. A really handy thing that we can do, if we go back up to our clamp, is we can do -- we can pipe different utility functions together and then just use the output. So let's do, like, const transformer. Then we're going to say GSAP.utils.pipe. 
Okay. 
Then -- yeah. Then make a new line. I think that would be easier. 
And we're piping in like we drop the clamp in first and we have another function we can run. 
Yeah, so then we can say GSAP.utils.maprange. It's camel case. I don't know if you did that. I can't see. We're going to map that range to like minus 360 and then positive 360. Oh, sorry. We have to do both. 
Two arrays. 
We do minus -- no, no. It's just round boys. 
Round boys! Okay. 
Just round boys. So we're going to say like minus -- yeah, that's the one. Then we're going to map that. Awesome. 
So four arguments total? 
Four arguments, yeah. That's the one. Awesome. Then we can use that in the same way we've used clamp. So in there, we can say transformer. Then the velocity. 
Okay. Let's run it and see what we got. If I crank it, we get 360. Negative 360 if I go down. So now we can, like, have our Corgi flip or something? 
Yeah, so we can tie this into our rotation. Oh, we can do -- we can do another -- this is a new thing that's going to be in the next release. So I don't know if people have used quick setter before. We've got GSAP tweens, but there's also ways to create more performant animations. If you're updating a target lots of times, so like something on mouse move, you can use something that we've got called Quick Setter. Quick Setter just sets the value like immediately. 
It does a lot of performance optimizations underneath the hood. But the tricky thing with that is it doesn't ease. It just automatically sets. So we've got a new thing called quick to. It does the same thing, but it also eases to the values. So we can set up like a rotation to before the observe. It's outside. And let's say const rotation to. Then it's GSAP.quickto. Then we're going to pass in the target. 
So the target is going to be -- I think it's Corgi. Let me have a look. 
So we have the SVG. 
Awesome. Then we're going to say -- oh, no. Sorry. This is just in round boys. So there's two arguments. The first one is the target. Then the second one is the property that we're going to be targeting. So that helps do optimizations underneath the hood because we don't have to constantly be looking at what we're doing. 
So we're going to do rotation. It's basically like a little back door, like directly to the Corgi's rotation. 
So if I'm inferring correctly, I can run rotation to and put transformer self velocityY. So we'll rapidly set the Corgi to whatever the value of our rotation is with easing so that we get a nice smooth flip that doesn't bog down the computer. 
Yes, that's exactly it. 
I love it. Here we go. We're going to flip this Corgi. 
Yeah! He's flipping from his bum. (Laughter) 
I mean, I love this. This is going to be a nonstop fountain of joy. Oh, and it sticks too. That's fun. Great. Now I can -- oh, and then back to center. This is great. I love it. 
I feel really sorry for him. I think we need to set the transform origin. 
I think you're probably right. 
It looks really painful spinning around your bum like that. Let's do it with GSAP. 
Okay. 
Yeah, with GSAP. So you can use GSAP set. So right at the beginning of the file. I kind of tend to do sets just right at the beginning. So GSAP set Corgi, and then transform origin. 
Is this second and third argument? Object, okay. Transform origin. I'm assuming camel case. 
Yeah, then we're going to say center center. The reason we're doing this in GSAP is SVG has a lot of weird bugs that GSAP works around. If you set the origin in your CSS, you have to kind of mess around with fill box and other things like that, and it won't always work. So it's always good to set with GSAP. Awesome. Look at him go. 
And if I really crank it, we get two flips because all the way down is minus 360. All the way up is plus 360, which is actually two rotations. Yeah, okay. That makes sense. 
Awesome. So, yeah, that's great. So what else can we do? Let's move him up and down as well. So we're going to do the same as our rotation to, but we're going to do a Y value. So where the rotation to is, let's do Y to. 
Just Y? 
Yeah. And the same for X as the well. Oh, no, wait. We're just doing Y. We'll do Y. 
Down here I've got a Y to. This isn't going to match up with the 360s, right? Or I guess we can just move it up and down 360 pixels. 
We can do self.deltaY, and let's have a little look at what that does. Then if we need to clamp that at all, then we can. Let's just have a little go. 
I didn't do something right. Y to, quick to, Corgi Y. We set is to self.deltaY. But it's not moving. Oh, there it goes. I just need a bigger deltaY, I think. 
Oh, awesome. So you just needed to, like -- 
Yeah, I got to crank it a little bit more. 
Awesome. So you've got it working. 
Very good. 
I think I froze again. Brody wants attention. Say hi. I don't know whether you can see him. He's just on my lap. Cool. 
So what should we do next? We've got the up and down movement working. We've got, like, a little rotation. 
Wakkos in chat is requesting the rainbow tail gets added. 
Pooping rainbows, yes. We have actually got some rainbows in there. So let's do rainbow butt explosion. So const rainbow butt explosion. I think I've killed Jason. 
All right. 
Cool. So let's do -- I think at the moment, they're hidden. So let's do a little timeline. Yeah, so let's do GSAP.timeline. 
And that's the -- are we targeting the rainbow here? 
No. So a timeline, we're not going to pass anything into that. We're just going to use that to sequence some animations. 
Oh, gotcha, okay. 
So on the next line, we're going to say rainbow butt explosion, dot, to. 
Okay. 
Then we're going to target the rainbow rectangles. So I think -- 
Rainbow rect. 
Yeah. Then we're going to say opacity, 1. I'm making this as a timeline because I want to use this later. Like, I want to be able to control when this timeline plays. 
Oh, okay. 
So we're setting it so we can have a bit more control over it. Then let's animate the rainbow as well. So I set it up so there's four or five, like, little blocks. Then we want to move them up and down. So let's do a from to. Not GSAP, sorry. 
This is going to be rainbow rect. 
Yeah, but if you get rid of the semicolon at the end of the previous to, then we're just going to chain those. So they're going to be on the same timeline. 
Gotcha. Okay. I understand. Then we're going a from to here. 
We're going to pass in two different objects. This is our first object. So this is our from values. You don't need to put from. Sorry. We're going to put Y percent. Then we're going to do an arrow function. 
Okay. 
And because there's multiple of these, we're going to get the index value. Then we're going to use that to shuffle them up or down. 
Is the index the first first argument? 
Yeah. So put index. Then in our arrow function, we can probably do -- we kind of want to check if it's odd. Then we want to animate from the position up at the top. If it's even, we want to animate from the bottom. 
Okay. 
So I guess we could do a ternary. 
Two is what I was trying to do. Okay. Now I've got a ternary. 
Awesome. So let's say like minus five. If it's not, then we'll do plus five. 
Okay. So I need to return this. 
Yeah, awesome. Good job. I was like completely blanking on how to do if something is odd or even. So yeah, two, we're going to do the opposite of that. 
Okay. Y percent, and I'll just copy this, actually, so we can go faster. And we'll say plus five or minus five. Right? 
Yeah, that's awesome. So let's play that. Let's see what happens. Oh, no, it'll play automatically. We haven't paused it. So we just press run. 
Okay. It's not looping, but it did the thing. 
Awesome. It's not looping. So with from tos, you can use them just like normal GSAP tweens. Oh, he's disconnected from his butt rainbow. That's no good. 
So the Y value, we want to make sure we're moving the whole SVG. So let's go down to our observer. 
Y to should be SVG instead? 
SVG, yeah. Then he'll stay connected to his bum rainbow. Yeah! Cool. So if we go up to our from to tween and put more arguments in the second block, so in the second one, the to block. We can say, like, duration and repeat. 
Okay. 
I think the duration was fine, actually. That looked good to me. So let's do repeat, and let's just repeat it a few times. I want it to have an end. So let's do like ten. A few. Ten works, yeah. 
Off it goes. 
Yeah! Awesome. 
It's a little chunky. Like, it doesn't look like it's -- here, let me run this again. It looks like it's kind of looping -- 
Jerking, yeah. Because it's playing to the end and getting to the beginning and playing to the end again. So we need to yo-yo it. 
Is that just like yo-yo true? 
Yeah, yeah, it is. 
See, that is such an intuitive name for what this is. I guess if you've ever seen a yo-yo before. I guess I can use none. Here we go. This is going to be perfect. Look at that rainbow go. 
Smooth. Super smooth. 
I love it. 
What I want to do is, like, after the rainbow is finished, we're going to add another tween on to that timeline, just to fade the rainbow out. Then just opacity. We're going to fade it out. 
That will just kind of do it on its own, right? If I set it to opacity zero. 
Yeah. 
Okay. 
So if we run that. 
And ten. And it's gone. 
Sweet. So, I kind of want that as like a power up. 
Oh, I got you. Yeah, yeah, yeah. 
Yeah. So yeah, we basically have all of our Corgi movement in. But then I woke up at like 5:00 a.m. and was like, we could make it a game! Because originally, I was just like, yeah, we can move the little Corgi up and down. That will be fun. 
But yeah, let's like add some food. Let's add some food for him and do some hit testing. 
Yes. Okay. I'm ready. 
Awesome. So first of all, let's make a function that just adds some food into the dom. So we'll create a function that's just add food. Oh, look, he's stuck just dancing vertically. 
Let's get him doing a wheelie. So rainbow food and then poops the rainbow. Yeah, that sounds about right. (Laughter) 
Yeah, that is about right. Awesome. So how do we add an element to the dom? We have to create an element first, don't we. So Twitter said that we have to feed him lollipops. So I guess lollipop or food. Food is shorter. 
Okay. And this is going to be -- like, what are we throwing here? 
Like a div or a span, I reckon. Doesn't have any semantic meaning. It's just a lollipop. 
And am I just putting in the emoji here? 
Yeah, yeah, yeah. So just adding in the emoji. Awesome. We want to style it as well. So let's add a class. 
And what should we call the class? 
People want lollipop. So we can just swap that out. 
Oh, quit jumping. Lollipop. Okay. And then add it? 
Yeah. 
Should I add this to the container? 
Container, I think. 
Okay. 
Yeah, so container. 
Do we have the container up here already? No, okay. So we'll get the container. Document query selector, and we'll get the container. Then down here, we can container, append child, and we'll put in food. Okay. So let's save that. 
Yeah, awesome. 
And we should get a lollipop. Where's my lollipop? 
Where is it? Inspect the dom. 
Here we go. All right. Let me close this down. I'm going to get over in here. And what we should see is inside the container. It definitely did not add -- okay. Oh, we didn't call the function is why. 
(Laughter) Genius. 
That's one way to make sure your code doesn't run. Okay. So let me add food. 
Why don't we do an event listener, like a window event listener and a mouse up or click and add food. 
Okay. So window. -- 
Hey, there it is! 
That works. So we're adding an add event listener. The event listener is -- you wanted mouse up? 
Yeah, let's do mouse up. 
Okay. So now if I run this, it shouldn't show our food at first, but when I click, there it is. 
Yeah, awesome. Cool. So the thing here is that if we add food, they're always going to be just right in the middle. So we want to position this in a different place each time. 
Again, we were looking at some of the GSAP utilities a little bit earlier, but there's one that I use the most, random. It just gives you a random number. There's all sorts of different ways that you can like tell GSAP I want a random number between these two numbers or a random number between these two numbers snapped to a certain increment. 
So let's do -- in our add food function, underneath, we're going to say GSAP.set. 
After it's appended? 
Yeah. So we're going to say GSAP.set, and then bone or lollipop. No, it's not a bone anymore, is it? It's a lollipop. Awesome. Oh, wait. We won't do the class, though, because otherwise that's going to look for all of them. So we want to pass in the variable. Is it just food? 
I've got it as food, yeah. So GSAP.set food. Then we want to probably set the vertical placement. 
Yeah, so you want to do the left position and the right position because it's absolutely positioned at the moment. Come up, bud, it's okay. Good boy. 
So yeah, let's do left. Then we're going to say -- oh, actually, let's make the left position always on the right-hand side because then we can move them towards us. So let's say left position is always, like, window.innerwidth. 
Okay. That's easier than what I was doing. Okay. Then top, we a random, right? 
Yeah. 
GSAP.utils.random. 
Yeah, and then we're going to say -- we don't want it to be all the way off the top of the screen, so let's just do a magic number. Let's say like 50. Like 40, 50 pixels down from the top of the screen. 
Then window inner height. That's minus 50 off that as well. So that's like not all the way down at the bottom. Almost down at the bottom. Then we can snap to a particular point as well, so we could say every five. So if you do comma -- 
Oh, wait, hold on. Inner width means that it's going to be actually pushed off because the left-hand side is like here. 
That's true. What did you have before? Was it just 100%? 
I was doing like 90%. Let's do 50 maybe. Let's see what that does. 
We could do 90%. That also makes sense. Yeah, awesome. 
Here's a question. Are we planning on animating these? 
Yes. 
Because then we do want them to be all the way from the left, right, so they kind of start off screen and fly in. 
Let's just keep them here for now so we can check that our function is working. If you click again, does it pop one in a different place? Yes! Yes, it did. 
I love it. 
We've got loads of lollipops. This is brilliant. Okay. Cool. So we know that it works. So let's put them all the way off again. Like let's do window inner width at 100%. 
Done. Now if I click, they're happening, but they're off screen. 
So underneath this GSAP set, we're going to do a little animation. We're going to say GSAP to, and we're going to animate the bone again, or the food. I keep thinking it says bone. 
I'll say like left -- 
We don't want to animate left. So we're using left for positioning, which is what we wanted, but we don't want to animate left because that's going to be not very performant. We want to be animating the X position. 
X, okay. 
Yeah, transform is always for animation. And then we want to animate, I guess, window inner width again. So we want that to be minus. So times minus one. Then that should animate all the way across. 
Wouldn't that pull it like double the length off the screen? 
No. Oh, because we're not using X percent here. We're using X. So we're just working in pixels now. Not percentages. 
Okay. So do you want me to do X percent? 
No, no, no. No, we want to do X. X percent won't work in this case. It works the whole width of the screen for the background because the background is the whole width of the screen. So it's X percent is relative to the thing itself. 
So if we did X percent on the food, it would only be relative to how wide the actual lollipop is. So it would move it like one lollipop's width instead of a window. 
Oh, gotcha. Then we need to add like an extra minus 100 or something. To make sure it goes all the way off screen. So let's do that. And now -- pew, pew, pew. Okay, this is way too fast, but it's cool. This is super fun. 
I'm going to make this slower. So, we'll give it like -- 
All I can hear is like chaotic robot noises and flying lollipops. That was like pure chaos. 
Oh, wait. I broke it. Why isn't this working? 
Oh, because you've used -- 
Oh, 3,000 seconds. Here they come. 
That's the slowest in the whole world ever. 
Okay. Maybe not the most challenging game here. All right. Try again. 
It would be challenging, but you'd get tired, wouldn't you? Awesome. 
Okay. So here we go. I think we probably want the ease to none again. They are in space, unaffected by friction. We don't believe in physics out here. 
Also, for the random positioning of them on the Y axis, we're getting a lot that are almost exactly similar. So let's pass in a third value there. Let's say, like, five or ten. Then that's going to say between those two values, just give us values back like every five or every ten. So we should get, like, less positions, but it should be a little more spaced out. That's good. Awesome. 
This is fun. 
Got loads of flying lollipops. 
Now we can have our Corgi kind of fly around. 
That's great. Yeah, so what I realized we could do is we can do hit tests. So I've included draggable, which is also GSAP plug-in. One thing that draggable has is when you're dragging elements around, you can detect to see if it's over something. Usually people want to drag something, say, into a menu, and when it hits the menu, they want to be able to drop it. 
So there was this hit test detection that we had in draggable, but you can actually use it statically as well, so you don't have to be dragging something. 
Okay. 
So might just have to double check in some syntax because I don't use draggable that much. So yeah, we're going to write a function to check whether there's been a hit. So we'll call it, I don't know, what should we call it? We're checking if there's -- check hits. 
Check for snacks. 
Yeah, (laughter). Awesome. So let's just log out, like console log, and we're going to do draggable with a capital D and then hit test. The first parameter we're passing in is the SVG. So I think we've got that already in a variable. Then we're going to check for an element. 
Like a lollipop? 
Yeah, let's do that first. We'll check for any lollipop. Then we'll call that function. Then let's just open the console and see what happens. 
Now, is this going to continue to fire, or do we need to call this in a loop to get it to -- 
That is very true. It needs to be called on, like, an update. So what we need to do -- oh, oh. Okay. Rather than passing in -- rather than looking for any lollipop, let's look for a specific one. 
Okay. So like put it in here? 
Yeah. Then in the tween, where we're moving the bone -- I keep saying bone. We're moving the lollipop. So where's our tween for the food? Yeah, that's the one. So the GSAP to food one, at the bottom we're going to put an on update. So this is just a callback. Camel case again. We can do an arrow function. Then this just calls while that's animating. 
Okay. So then I can just call check for snacks food in here. 
Yeah. Yeah, yeah. 
And we've already got food because it's in the parent scope. So that should just work, right? 
That should just work. Let's see. 
Famous last words, but let's find out. Okay. So I think we hit it. Did we ever get there? 
Get it, get it, get it. 
I saw a true. Is this letting us know? Yeah, here we go. So we got some hits. 
I think we're still logging something else out. 
Yeah, we're still logging the velocity, I think. 
Awesome. And then this is good because when we know that we've got the hit, we can actually remove that from the dom. 
Got it. Okay. Then we can say food. -- is it detach? 
I think you can use remove nowadays. 
Food.remove. 
We're not in Internet Explorer. 
Let's try it. Where is it? Did I break something? 
Oh, it's because we're trying to do the on update. We need to do that after it's got the snack. So that needs to be in there. Let's fade it out. 
So -- 
Yeah, that's the one. 
Okay. So that'll actually work, maybe. 
That will work. Yeah, we were just removing. It started animating, and we were just getting rid of it. 
Got it. 
Yes! Oh, this is so good. This is so gloriously chaotic. Look at him. 
So the last thing we need to do is play this. We've got three minutes. So the last thing we need to do is play this rainbow, right? 
Uh-huh, yes. Yes, that is the last thing. 
So I need to pause it? 
So let's do -- if you go up to the rainbow -- where is the rainbow? 
Here's our rainbow butt explosion. 
We want to do GSAP timeline. In the timeline itself, in the round boys, GSAP timeline. We're going to do an object and say paused true. 
Okay. So then we're going to get our rainbow butt explosion. Go down to here, which is where something has happened. Then can I just do a dot play? 
I usually do a dot restart. That will always go to the beginning and play. 
Okay. 
So let's have a little look. Have we really got three minutes? Yeah! It worked! Amazing. 
Oh, my god. Okay. 
We made a game! (Laughter) 
(Laughter) I mean, this is incredible. We did so much in such a short time. Yeah, so there's our Corgi butt explosion. This is just so good. Like, it's -- everything about this is fun. 
We were able to make a Corgi flying through space. It's animated, looks like it's running. We've got these lollipops being added. We've got the effect whenever you eat one of the lollipops. Like, this is so much fun. But I know I want to be mindful. We're out of time. 
So for somebody who wants to learn more, we'll be sharing this CodePen for you to reverse engineer, play with, whatever you want. Where else should people go for more information? 
If you are getting started with GSAP and you have questions, we hang out in the forums all the time, like on the GSAP forums. So yeah, we'll be in there to help you. I've also got a little SVG animation Slack, which I can give to Jason to share. 
Is that going to be -- am I going to be able to find this? 
It's a little bit sneaky and secret. But you can come and hang out. And then, yeah, I don't know. There's all sorts of places. I think the best way to learn it is by tinkering. So I would say get on CodePen. There's been some past CodePen challenges with GSAP. So there's like loads of examples and stuff. Follow Jay. Jay makes loads of really good things that are for beginners. And he's done an episode on your stream before, hasn't he, Jason? 
Yes. Nope, that's not the right one. Where is Jay? Oh, two Ys. Yes, we have this. Then if you head over to Learn With Jason and you hit command-K and search animation, you're going to find Jhey. You're going to find Sarah. You're going to find Cassie. You're going to find Eli. A lot of good content around animation. Yeah, this is a really fun one with splitting. Here's today's episode. We've got Scott talking about animation. 
So basically, just head over and look for animation. And I think we might even have -- do I have, like, a tag? Maybe not. Nope. Okay. Anyway, go to the site and search for it. You'll find it. 
Also, like, literally just hit me up. If you are wanting to learn and you want links or you want help or someone to go over your Pen, it's my job. I love that it's my job. But it's my job. So I will happily help you. 
Wonderful. All right. So with that, we are officially over time. So chat, stay tuned. We're going to go find somebody to raid. Cassie, any parting words for everybody? 
Not from me, no. Just have fun. And I'll see you all soon. 
All right. Thank you so much for spending some time with us today, Cassie. This was an absolute blast, as always. We had a lot of fun. Chat, thank you for hanging out with us today. Stay tuned, we're going to go find somebody to raid. We will see you all next time.

In [ ]:





​


","[(0, 0.26480737), (1, 0.07185096), (2, 0.66334164)]",0.26480737,0.07185096,0.66334164
"So here’s the goals, one, introduce Kathy Sierra. Two, introduce her Kick Ass Curve. Three, show how the curve is really useful to work that everybody in dev rel does. And then four, have fun. That’s the main goal actually, really.So, Kathy Sierra, some people know of you. Imagine you’re in the early aughts of this century, right? And you’re sitting there dealing with mostly enterprise people and all the documentation sucks and everything is really complicated and nobody’s really connecting to you on a personal basis. And then along comes my Captain Marvel, right? For me, she was the hero that we all needed, that were doing dev rel.So, this is Kathy. Kathy, this is one of our good quotes from her. “Upgrade your users, not your product.” “Make people better at something they want to be better at.” And she wrote the Head First series. Have any of you seen like the Head First Java or the Head…? Yeah, all those books. That was originated out of Kathy when she was working at Sun. She was one of the early people that was very user-focused and very developer focused.And so, what I loved about her was that she really focused on being empathetic with your users and making them better at what they want to do, not thinking about what you want them to do. Does that make sense?Okay. So, unfortunately, she is no longer on the intertubes. She was one of the very first examples of doxing and it was pretty bad. And so, she basically gave up on the intertubes for forever. She did go back, so here’s some later reading. She’s written some books, you can find some YouTube videos by her. Her headrush.typepad.com, that’s all her original blog posts. And I think those are recommended reading for anybody in dev rel.Okay. So, let’s get on to the curve. Is that enough intro? Everybody good? Are you all convinced that Kathy is somebody you need to read? That was the main point of the whole talk actually.So, in framing the curve, I want to talk and remind us that the goal for us as developer relations people is to make users happy and successful on our project or product, and I’ll use those interchangeably. I know we work on different things, but everything that we do should be focused on this goal.When you’re evaluating your strategy, when you’re thinking about what you’re doing, this is our primary goal. I would posit, right? And so, don’t just do things for the sake of doing. Make sure that you’re fitting it into the goal. And this is where Kathy’s thing comes in and helps us.So, our axes are labeled on the kickass curve on our graph. I’m a good scientist. On the x-axis, we have time and that’s from first time, like someone just starts using your product all the way up to years and decades. Because for some of our products, people will use them for years and decades. On the y-axis, we have ability, and this is the ability of the user to do what they want to do. So, in the beginning, there’s struggling and frustration, and at the top, they’re in a productive flow state. That make sense? Okay, we’re good with that?Okay. So, imagine two arbitrary lines imposed on this graph with ability. There’s the suck threshold and then there’s the kick ass threshold. So, in the kick ass threshold, once you cross that, you’re in a flow state. Like, everything’s good, you know exactly what you want to do. You sit down at your computer and you’re ready to go.At the suck threshold, you’re sitting there and you’re constantly frustrated, you have no idea what’s going on, you’re switching between documentation and you’re cruising stack overflow all the time because you have no idea what’s happening, copying and pasting madly hoping something works. Right?So, it depends on where it is for your product and the person. Right? And then this is the curve, right? It’s nothing complicated. It’s a normal logistic curve that she shows.And the idea is users, this curve, one quick point, you can view this curve in one of two ways. One, it is the trajectory of a user over time, right? So, they start here, down in the bottom and over time they work their way up like this.The other thing is you could see this as an aggregate of all the user’s trajectories over time as well. It’s an average curve. Good? Thanks.So, the idea is, user starts out sucking, they hate everything and everybody, then they cross the suck threshold, then they’re in a space of good. And then after eventual time, they’re awesome. And that’s when they’re kicking ass.And so, what is our goal? Our goal is to make users successful and happy. So, our goal is to get users from here to here in the least amount of effort and time possible. Because the more time they spend here, the more time they have chances of quitting your product and hating you. Right? And even here, if they are even here and something else comes along and they can get here or here faster, they’re going to leave you.And so, that’s the main point that Kathy is trying to make with the Kick Ass Curve is get users up here as fast as you can.So, if we talk about this, I showed you the typical curve, this would be an ideal curve. Not even curvy, right? For a person putting in a unit of time, they get a linear feedback about getting better. Nice and quick, I spent a day working, I feel more professional, I feel better. I can do better things.This is a bad curve. And I put that up because a lot of people think, “Oh, everybody will eventually get here.” No, there are some products where people will never get there. Right?And so, if you take these three curves, I can summarize those in different kinds of user experiences at the end, I had to put emojis in because that’s the new kitten GIFs, right? We all needed a cat. Now we all need emojis.So, you have users loving you, in the ideal curve, that would get you a lot of love in your product. Typical, “Okay, you’re like every other product out there, but I don’t hate you.” And if you end them up in this space, I’m not going to say… I said it in DevRelCon in London. I’m not going to use the F-bomb in this talk here.So, we’re good on those ideas? Any questions? Good. I’m perfect in all my descriptions.So, why the differences in the curve? You say, “Oh, well it’s obvious, it’s all up to me.” No, life is not under your control. You can only control yourself. There’s a lot of things that are outside of your control.So, there’s certain things your team can do, but also the background, knowledge, and experience of the user can put them on a different trajectory, right? If you’re an advanced product, like let’s pretend you have a network product and I hate networking and you have a networking product, I’m never probably going to ever get off that bad curve on your product, no matter how good your documentation is, just because I hate it and I have no background knowledge and that’s not up to you, right? So don’t blame yourself on that one.The quality of your documentation and teaching material, this is up to us, right? We do control this and this can definitely help the trajectory. Most developers are, in the words of, I forget who it was at Twilio way back when, most developers are doers, right? And so, the more ability you give them to do on their own, the faster they’ll get up on that curve. And that comes through documentation and teaching material.The actual design of the product and the API. So, I saw a great quote about this once, and I wish I remember who said it, but they said, “The only reason we have dev rel is because of poorly designed products,” right? If products were designed really well, you wouldn’t really actually need developer relations because people would love it on their own.So, I can’t emphasize this enough. People talk about how we are just talking heads and stuff. This is also critical for us. Our job is to give feedback into engineering about what makes a product good and not good, and easy to use and not easy to use. We are one of the ergonomic experts for the product, right? So remember that as well.And then the size and helpfulness of your community. And I’m sure you’ve all experienced this, right, where you’re stuck, you’re a doer, you want to do something right now, you have no answer in the documentation, you go do a Google search or you get on a Slack channel and no one answers. And that’s going to keep you in that suck zone longer, right?So, these are just some of the things I could think of in coming up with this. All right, let’s move on.So, why we often disagree with product managers and engineers. Is this a common theme among most of you dev rel people that you find yourself disagreeing with PMs and engineers? Round of applause if you do. Yeah. Okay.So, I think the Kick Ass Curve gives us some insight into this. This is one of the beauties of giving a talk, as you probably all know, is it helps you refine your thinking and brings you into new areas.So, this is where we spend most of our time with users, right? Right. We’re teaching users how to get started with the product, maybe getting them up of a curve a bit. We try to get them from here at least to here as soon as possible. Maybe we do a little bit of work up here, but most of our work is down here.So, this is where most PMs live, because most of them are out talking to customers or out talking to teams that have already implemented stuff and teams that have already implemented stuff with our products or projects already know a lot about our products. So, they’re interacting with users who are actually quite advanced compared to the users that we interact with.So, when we tell them there’s a bunch of problems with people getting started, they’re like, “I saw no problems at that company,” right? “Everybody was already up here, so I don’t know what you’re talking about.”And then this is where engineers are. So, sometimes engineers are our friend, and it’s usually when you ask them to use a part of the product that they’ve never worked on or when they’re new to the team because then they have no idea what’s going on.But, for the other part of the time when they’re actually working on the part that they know, they’re up here. Right? So, are they thinking about adding features here? Is their brain in this space most of the time? No. Their brain is up here, thinking about, “Oh, it would be super awesome if we could take this widget and make it do x, y, and z, and this really advanced thing.”And one of our challenges is, and it’s a big challenge and I bring this up a lot and it’s always a struggle with PM engineers is, that’s great that we are awesome up here. That’s fabulous. I love that. But if I can’t get them through this valley of despair, I’m never going to get them up to your peak of awesomeness.Like, if I can never get them to the kick ass part or even above this suck threshold and in a timely fashion, you’re never going to get to see these pieces you’re all excited about. So, I think that’s a really important argument to make with them. And this can help us illustrate why maybe we’re seeing different things.All right. So, for the home stretch, that’s all assumed all her curves, and this is an extension on her work that she did with her curves, and my extensions on this came up because I was working with a team that was working in a marketplace that already had a bunch of products in it.Like, all of her curves assume either the product is, you’re releasing a new product and so they have to upgrade and that’s a new upgrade curve they have to go through. Or it’s greenfield, right? Like, “Oh, I’m not already an expert in something else. I’m learning your thing and it’s going to be all new to me,” which is very rarely the case for most of us.So, again, our user is somewhere up in here. Let’s assume they just got up to here on the competing product, right? So, my company does Postgres, we’re a Postgres consulting house all that stuff. The users here are on MySQL or Oracle, right? And then we go to them and we say, “Oh, you should really use Postgres.” So what I’m actually asking them to do, and this one of the reasons, one of the many, many reasons that devs are so resistant to listening to us is I just asked them to do that.I’ve asked them to go from “I’m kick ass” and “I’m in a flow state every single day” to “I suck and I hate my job,” right? And so, what we have done is created a surplus of woe, right? And so, when you create that surplus of woe, this is all resistance about why people are not going to want to adopt your product.How many of you remember back in the days when Firefox used to import your IE bookmarks? Do you remember that? That was one of the most brilliant moves ever. Why? Because if you used IE, you’re up here, you had all your history in it, rather than Firefox saying, “No, that’s their bookmarks and these are my bookmarks and I’m not going to let users transfer them easy,” they said, “I’m not going to fight the wave. I’m actually going to help avoid some of this surplus of woe by allowing people to transfer stuff over.”So, pick your battles wisely when you induce this surplus of woe. Sometimes it is easier to just say, “We’ll make ourselves API compatible or build this tool just to help Java developers adopt this new thing.” Right? Because, and it might just be in your dev rel group, right? It doesn’t have to come out of engineering. It can be one of those unsupported things.How many think developers always care about supported things to get their job done? If that was true, there would never be any open source stuff to start with. Right? Because that’s how most open source things start.So, our job in dev rel and engineering and PMs and everything though is to decrease this surplus of woe. And every time you decide you’re special and you need to do something different, you’ve thereby increased your surplus of woe. I just want to say “surplus of woe” one more last time because it really feels fun. Yeah. Although bad for the user.So, that’s it. I’m going to wrap it up now. So one, think about who your audiences is, who you are targeting and how to get past in the suck zone ASAP. So, I bring this up, there’s a talk later, I think it’s maybe right after mine or two after mine, where she’s going to talk about segmenting your users. This is really important because that’s actually part of the reason some curves suck for some people is if you don’t target your material appropriately to who you’re trying to reach.Because if you target your material towards JavaScript developers, but most of your users are Node deve.. Node – then you’re right on. But if you target Java developers or your target audience is really Python or Java developers, that documentation isn’t really going to help them very much. Right?And Enterprise users, if you’re going after Enterprise users, are you going to write in Rust? Are you going to give examples in Rust? No. Although it’s a cool language and there’s good things happening there, you are going to probably write your examples in .NET or Java, maybe some Python if it’s data science, maybe some JavaScript if they’re kind of an advanced looking company. Right? So, target and make sure your curve is maximized for the groups you’re trying to hit.If we can get people out of this suck zone before they give up, if we can’t get them out of the suck zone before they get out of the suck zone, they will give up and they’ll never get to experience the power.And I’ve already said this one before, remember when talking and that’s lots of ways to talk, to others, think about where they are on the curve. And this is important for like workshops or when you’re in the booth or something like that, right? Or when you’re putting together emails. I keep saying dev advocate examples because that’s where I live, but this applies to all dev rel. So, it could be when you’re putting together a newsletter, it could be any of those things.Think about where your users are, and this gets back to the metrics we heard about this morning about, so like an example at one company is when I was on the open shift team, we did a whole bunch of surveys around where users were and found out most of them were in less than two years’ worth of programming, right? So we then started producing documentation that was really simple and introduced some very basic concepts because that would be helpful to our users and make them feel kick ass.And then, I can’t emphasize this one. This is actually another take-home message. This curve is nothing but a tool. Use it when it helps. Don’t use it when it doesn’t help. I’m a big fan of don’t “all the things,” all right? So, don’t say, “Oh, well, you’ve got to go to Kathy Sierra’s curve,” or “What does Kathy say about this?” Use it when it helps, don’t when it doesn’t help. Okay?I know it’s pretty obvious, but I think we often get caught up in, “I saw that documentation is that we have to do it this way.” It’s just a model of how the world works. That model may not work for what you’re trying to do.Okay? And so, that’s the link now if you want the deck. I give that as a hint to everybody, always put your slide link at the back end because that’s when people know whether it’s worth it to waste the bits on your talk or not. That’s where you can find me, again, GitHub, Twitter, all those places, and that’s who pays my mortgage.All right.","[(0, 0.48856482), (1, 0.22506545), (2, 0.2863697)]",0.48856482,0.22506545,0.2863697
" My name is Katie Penn. As I mentioned, I work at Twitch, which is a company owned by Amazon. And I am going to be talking about authenticity.I see it as a buzzword right now, a lot of people are focused on it. I see talks that have been coming out around it. But really, when we think about Developer Relations, it’s a communication platform for us, right? We are speaking to a community and we’re advocating with a community. And the more authentic we can be, the more of a relationship we can build with that community.So, I love to talk about personas. Let’s talk about a little bit about my persona and how I started.I’ve been working in dev rel for about 15 years. I started at Sun Microsystems. Anyone know about Sun Microsystems? All the old-school people in the room? So, I started as a technical content manager with Java, and got exposed to JavaOne, which was, like, a huge Dev conference back in the day, and ran a lot of the content tracks there, and then kind of discovered this emerging market of dev rel, and fell in love with it.From there, I joined Salesforce as one of the starting people on the Dev marketing team. I like to call it my MBA or my master’s degree in how to do Dev marketing. I learned everything there. It was just, like, full on. I got exposure to all the different channels, worked really closely with the advocates.And then I had an opportunity to go into Twitter. They wanted to restart their platform with developers and launched to the mobile app community with a product called Fabric. So, I was able to go over there and build out a Dev growth team with them. And I worked there for three years. And then I got kind of hooked on the big consumer communication products, and moved over to Twitch, where I’ve helped build out the Dev marketing team and the dev rel team there.One other thing, I know we’re weaving in a theme around diversity and inclusivity. One thing I’ll say, as you build out your Dev Relations career, at different stages of your own life, you can get involved in a lot of opportunities, both with the developer communities that you work with to be inclusive, but also in the projects that you do.So, I’m a TechWomen mentor, which works with the State Department on bringing women and advocating for STEM and tech into the U.S. and outside of the U.S., had the privilege of going to Sierra Leone this year and working with women there on STEM. I love developers so much I married one. I’m also a Parenting ERG Lead.So, at different stages of life, you advocate for different DNI initiatives. Right now I’m on the Parents in Tech Alliance in the Bay Area advocating for parenting rights within companies. So, it’s really fun. There’s lots to get into there. So, why Twitch? Why am I at Twitch? Like I said, once I got into Twitter, I kind of got exposed to kind of the blend of working in dev rel on big platforms that reach a lot of people.So, Twitch has… You know, I won’t go into all the… How many people here are familiar with Twitch? Awesome. So, Twitch is primarily gaming content, but what it does is it connects streamers and community viewers online in this amazing lexicon of video games, pop culture, and what I’d like to say is developer innovation.Why I joined Twitch is I love the idea of working on products that actually reach lots and lots of people that love them and build communities. So, the closer you are, as you think of your career as of where you want to go, think of products that you love. It’s much easier to go reach out to developers and try to get them to build with you if you love the product, right?Or if you love what the product does and represents. And so, what I’ve learned at Twitch, which is really interesting in thinking about dev rel, is that Twitch is tapping into a culture register that is changing, right? So, people that consume Twitch love Twitch because of the interaction they have with the content producer, right?The person that’s actually streaming and the way that they interact with the people that viewing, is creating a way and expectation from the culture nowadays, that, “Hey, we want to be heard. We want the influencers to be able to react with us.” And what I’d like to say is that the cord is cut, and that the reason that Twitch is becoming powerful and these other social media platforms are becoming powerful, is that now the viewers and people that are consuming the content are driving and shaping the way that they consume it.So, as you think of dev rel, and the reason that dev rel is now coming on to Twitchers is really, really interesting, is because you’re actually getting very, very close to the people that are interacting with you. And that’s why I’m talking about authenticity. So, if you’re being exposed, if the people that you’re actually sending content to now have platforms to speak back to you, they’re expecting you to be authentic and speak with them, right?They’re expecting you to listen and they’re expecting you to respond. And so, here are my tips on being authentic when you’re working with developer communities. Number one, and this might be a little controversial, especially for my job, stop marketing to developers. Some people are going to have different responses to that. But what I’d like to say… and there are a lot of marketers in the room, and there’s a lot of advocates in the room, and this is always a little contentious.And I’ve made a whole career of being a marketer. You need to start marketing for developers. You need to stop marketing to developers. Why? Because you need to know the customer. And developers are… I’d like to call them a unique flower.And remember, I married one. So developers are a unique flower. They actually hate marketing, more than probably some general public people do. So, you need to think of the way that you’re actually bringing content and solutions to them, and understanding their needs. And the personas are a great example of that. So, who are developers?Developers are builders. They’re problem solvers. And they think they are the smartest people in the room. So, when I say stop marketing to them, running banner ads to people that are probably the most likely people to have ad blockers is not going to work. So, what I’d like to do in the spirit of trashing hackathons is go into… so, a lot of my talk is around things I’ve done wrong.So let’s talk about when you’re actually not knowing your audience. So, I worked at Salesforce, I was there during the pleasurable time of running the Salesforce $1 Million Hackathon. What we wanted to do is reach a new, cool audience of developers. We had enterprise developers. We had people that had built businesses with Salesforce. We wanted to go after mobile app developers.So, it was a grand idea. And I’m really glad my old boss is not in the room. But there was a grand idea of doing $1 million hackathon. How would this resonate with the developer community of builders, problem solvers, and the spirit of hackathons that are typically with students, and not really wealthy people? Well, it didn’t go so well.We also had never run hackathons. So, we didn’t really know how to run them. And we hadn’t been given the guidance, like, “Go with a third party, so you can actually stay away from the rules and the judging.” Well, we got exposure, but not the exposure that we wanted. Right? So, we did finally end up on Hacker News, which was a win for us. But it wasn’t in the way that we wanted it.We didn’t really know how to run judging. And there was just a general distrust among the developer community on why would we put such a large price tag on something that is considered a cultural spirit in the developer community, which is hackathons? So, that’s just knowing your audience, knowing like, “Hey, $1 million might really work for a brand campaign, but it might not work for a hackathon dev community.”So, we got a lot of great press around it. They still continue to do them. But I think they went back to their community. They realized, “Hey, this might not work for mobile app people, but it’s maybe not going to work for enterprise. We just have to structure it differently.” Okay. This is one of the Twitch products that I helped release. Does anyone think there’s something wrong with the logo?Raise your hand if you see anything wrong with the logo. Come on, one developer, hopefully. Okay. Okay. You don’t have to say what’s wrong with it. So, I thought this logo was great. I mean, I was like, “Okay. Problem solvers, builders, puzzle. I’ve got it.”This logo was fine with all the marketers, completely triggered our developers. Do you know what’s wrong with it? Do you know what’s wrong with the logo? – [Man] It’s an open spot. It’s – [inaudible] – It doesn’t fit. We’re working with builders, and the logo doesn’t fit, every time we release this. And we still have continued to release it for, like, six months. Every time we released it, we would trigger developers. They’d be writing on Twitch, like, “This is stupid. This logo’s stupid.” You know, it’s a file and we had to bring it back to the product marketing team and be like, “We have to fix the puzzle,” right? Because we were not thinking about our audience.I think that if you’d release this to marketers, they might have been like, “Great. Cool little logo.” Developers didn’t work. Okay. But beware of bias. I just listed to who developers are, but that actually is maybe traditional developers. Remember that developers are not all the same. And so, when you try to welcome in new developer communities, think about that, think of different learning paths for them.Think of different styles of learning. To give Salesforce credit, they did an amazing job in the last couple of years of thinking about, “Hey, who are new developers we can reach? Well, we have admins. Let’s bring them into our platform. Let’s build an actual learning journey that’s more of a competition with Trailhead, so that they can actually learn in a more creative way, in a more visual way.”So, just releasing dots might serve a historical context of developers, but it might not serve the new developers that are emerging in the market. So, think about that. Okay. Lead with solutions, not roadmaps. No one wants to go to your website and see your org chart. Okay, see the product org chart. So, if you are not leading with trying to solve problems for the developers in your community and going out there with those solutions, then you’re not actually marketing correctly to your developers.So, try not to be, like, announcing extensions versus, “Want to tap into Twitter’s live stream? Here’s a way now to do it and reach streamers,” right? So, think about the way that you’re actually bringing your products to market. Oh, I love this. Eat your own dog food. So, like we said, developers are very clever.There’s nothing more humiliating than developers discovering that you’re not using your own products. There’s definitely a lot of distrust in authenticity when you’re actually using other products, but then trying to ask developers to use your products. So, yeah, let your product be the canvas to tell your story.Now, I’m going to dive a little bit into Twitch because kind of what a cool thing that I’m doing Dev marketing for Twitch, but then a lot of developers are coming, advocates are coming on to Twitch, so people in my industry are coming on to actually use it to reach developers as well.But for us, like, we started with newsletters and sending email campaigns, and then it’s like, “Wow. This is really weird. We’re not actually going on Twitch to talk about our products, we’re sending emails.” So, we started going on Twitch, to talk about our products, to actually start engaging in dialog and conversation. It was really cool.And I wouldn’t even say we started it because there were a couple of other advocacy groups doing it too. We saw other advocacy groups doing it. So, now, we’re actually, like, really justifying, “Hey, Twitch is really cool.You should come build with us. Hey, you can actually use it to actually communicate with communities as well.” And one of the speakers here is using it as well. Romain. We got Romain on it as well.So, we’re just seeing a lot of people coming on to our own platform, which also then reconfirms why a developer should find interest in it. Okay. Find your champions and make them heroes. And I’m just going to show other companies that are doing this well. So, developer showcases, like, instead of just telling people to use your product, show how your customers are using it.Make sure you have a showcase page up there. Make sure you’re celebrating the wins of the people that are spending their time building with you. Oops. Spinning. Cool. Yeah. When you go on the road, if you’re doing meetups and tours, bring the people in the room onto your platform, right?So, use Twitter, interview them, hear their stories, like I say, like, celebrate the people that are spending their time learning, building, whether it’s nice, whether there’s companies, make sure that you are actually giving them the platform to share how they built. And then when you do press releases or you’re celebrating something that’s coming out, bring the developer into the story, right?So, instead of us saying, “Oh, cool, we ran this Pokemon campaign,” we’re saying, “Look at what the developer did to make this part of our experience.” So, bring them into your press releases as well. Okay. Build communication channels, but they must be two way. This just goes again with that idea that our culture and our community is expecting to be heard and to be responded to.And then you can’t actually drive the communication channels that they’re on. So, yes, you can have your own forum on your site, but you need to go find the developers where they are. And one of my colleagues in the room will talk a little bit about that more. But, like, we use Discord, even though it’s kind of considered a competitor of ours because we know our developers are on it, right?So, we want to hear from them and we want to talk to them. And when you think of different developers, different developers have different communication channels, so you shouldn’t expect them all to be on one platform that you’re providing for them. You actually need to be able to respond to them. There might be a demographic that’s comfortable with email. You need to kind of build out all those channels so that you can hear them. Because engagement is investment.The more you invest in the people and engage with them, the more they will invest back in you. If they don’t get heard, if you don’t at least acknowledge some of the problems they’re having with your platform, they’re less likely to spend time on your platform. They want to be heard. This is one thing that I do a lot when I build out curriculums for conferences, go under the hood.So, typically, I always recommend you will find when you start doing meetups or start running meetups, people are more likely to come to learn about how you scale the product that you actually build than why they should adopt your product. So, typically, I like to build into any curriculum at an event, some knowledge sharing, not about, “Come use our product,” but actually, “How did we build it?” right?“How did we build the open-source program at Twitter?” “How did we actually manage scale at Twitch?” They will sometimes be the most attended events you have…I mean, sessions you have, when you run an event because developers want to learn. This is my favorite. Oh, yes. Be transparent.Publishing a roadmap is the new cool. So, a lot of dev rel companies are now on Trello. We didn’t come up with the idea. We saw other companies do it, and we were like, “Hey, this is a great idea.” So, it’s okay, there’s a lot of internal buy-in when you start publishing your roadmap publicly, but it’s okay to say, “in progress and exploring,” right?But this is just another platform for you to actually open up that dialog of why you might be building things and get that two-way feedback in of whether they’re interested or not. And you can take it into events. Socked did an amazing job at this at one of their developer events. They put the roadmap. They published it out here. And people were able to add feedback on whether they thought it was important or not.I’ve seen some really cool things now too, where people are actually doing those strings and kind of getting involved in how they want to see the products built. So, let your community have some input into what you’re building. And take pictures. It’s okay to copy it. We did, right? You can copy things that you see that are really good out there that actually advocate for the community. So, then we brought it to our developer conference.It was awesome. Okay. Admit your mistakes. They’re usually pretty obvious. When you’re working with a developer community, they’re pretty skeptical sometimes. You’re asking them to spend their time building with you. You need to address elephants in the room.If you have actually done something… and let’s face it, I worked for Twitter, for Twitch. I’ve worked on really broad consumer products that sometimes change our relationships with developers, or are uncertain in terms of what they’re relationship with developers are going to be. If you’re in that situation, and you want to be authentic, people are expecting you now to be more human and more transparent around things you’ve done wrong.So, I ran the Twitter Flight developer conference of 1,600 people. We had 1,600 developers in the room. We’d had a rocky history with developers. – [Jack] A little bit unpredictable. This culminated with what Anil Dash has named “the matrix of doom.”And we want to come to you today, and first and foremost, apologize for our confusion. We want to reset our relationship. And we want to make sure that we are learning, that we are listening, and that we are rebooting.And that’s what today represents. We want to make sure that we have a great relationship with our developers. We have an open, and honest. and transparent relationship, and that we’re fulfilling and serving every one of your needs.Cool. So, I was to speak to that before I played it. Sorry, but it was very obvious that developers were skeptical of why they were in the room, and why we were asking them to come back. And so, instead of just ignoring it, and celebrating, and having a big developer conference, we kicked off the conference with an apology.We actually addressed the problem in the room. Now, some people were still skeptical. There’s still a rocky history and relationship at Twitter with developers, but at least we were being honest with where we stood with them.This is another example. And this is something that I think dev rel people run into a lot. If you’re running a launch event with a product, right, often, it’s really, really stressful right before the launch of whether product was going to work, you know, is the website going to go live?There’s tons going on. We ran into these when we were launching Extensions, which is the third-party apps that we have developers build for Twitch. The entire Twitch site went down, when you see how huge Twitch was the day before. So, up until the hour of our big reveal, no one knew what we’re launching, right until the hour before. Executives are trying to make the decision if they were going to let us launch this product because they were afraid it was going to take down the site again.Sorry, that’s a little too much information about Twitch. But our VP at the time said, “Katie, should I cancel it? Should I cancel it?” And I said, “They know what’s going on. They know the site was down. So, just be honest about the fact that we’re not launching today, but we’re still going to tell you about it because we had a little problem.” I’m like, “Make a joke of it. Everyone in the room knows.”And so, that’s what she did. – [Kathy Astromoff] As you probably heard, we had some site issues yesterday.And we got called out for it the day of, right? So, someone on Twitter called out, as she should have, “Hey. Great. Thanks for having an all-male lineup.” It’s very easy to ignore that tweet, right, to just be like, “Oh, that’s okay. We’ll have mostly men in the room anyways, let’s just go and have a great event.” What I did was, I found her.I found her as soon as we got there. I saw her, I pulled her aside, and I apologized. I said, “I’m really sorry. I’m actually very embarrassed that we have this. And we’re going to work harder on this. I’m going to make it part of our KPIs that we never have an all-one lineup moving forward.”And we did. We changed it for the next event. And how did she respond? She loved being heard, right? People want to be heard. Even though we didn’t fix it for experience at that event, she really appreciated that I listened to her, then she sent me an email with all these things that I should do for my events. She liked being heard.Sometimes it doesn’t go this well. But it’s that authentic dialog of actually admitting your mistakes and actually listening to your community that will respond with communities that want to build with you. And so that, I believe, is it. So, what I’m saying is developers plus authenticity is the new marketing paradigm. We are changing the way that we go to market with our products and the way that we communicate with developers, and that we need to be more authentic.So, know your developer, lead with solutions, not roadmaps. Eat your own dog food. Find your champions and make them special. Be open with your communication channels. Go under the hood.Be transparent. Admit your mistakes and have fun.","[(0, 0.544868), (1, 0.11886652), (2, 0.33626544)]",0.544868,0.11886652,0.33626544
"Ben: Hello, everyone. Hi.Audience: Hi.Ben: We can do a little better. It’s 4 o’clock on Friday. Hello.Audience: Hello.Ben: That’s awesome. So we’re going to spend a little time together talking about lessons learned along the way in my trajectory from the pulpit, from congregational clergy life to developer relations.So before we begin, just a little bit about myself. Hello, again. My name is Ben. I’m the father of two amazing kids and as mentioned, I am a second career developer who previously spent about a decade as a rabbi and as a community organizer and educator throughout the United States.And I’m currently a developer advocate at the amazing, fabulous, fantastic dev rel team of Nexmo. Yeah, Nexmo.And I want to start by sharing a story, and this story is a story that so many of my former colleagues all have had this experience. We all go to seminary or to rabbinical school or what have you, and we think we’ve learned the skills for the job and we realize that we’re not meant to only be empathetic, compassionate, caring, we’re also meant to be superheroes, supernatural people.And for me, that was whether I was meant to have the ability of telepathy. And the story is, I was in the first few months of my role at a congregation in Colorado and I get a call from a member of the board who was a bit upset because a member of the congregation called, who was a bit upset, and the reason why that person was upset was because their family member was in the hospital undergoing a routine procedure scheduled months before and I did not visit that person in the hospital.I did not mention them in any newsletters, did not talk about that person and how could I let that slip. So, of course, I was upset at myself. Our job is to care for our community. How could I have let that go by? How could I have, let’s call them the Feldmans, let the Feldmans slip through my fingers?So, of course, I looked into it and I realized quickly after starting to research this, that the Feldmans had not called the office to let us know that they were going to be in the hospital. They had not told anyone else in the congregation, they had not called the lay-led caring committee to share that this was happening, and they’re what we might call a once or twice a year members. I don’t know if that resonates.So in other words, there was no possible way for me to know that this is what they were going through, but they were upset because their rabbi did not intuit with spider-sense, the ability that they were in the hospital.So in every other respect, these people are perfectly reasonable people, so their grievance had to be something a bit deeper. And I actually think what their grievance is about is a question of matterness. Do I ultimately matter to the people around me? Do people know when I’m present, do they know when I’m not present? Am I a valued member of the community?If you strip away all the layers of organizational and communal life, you take away the mission statements, and the vision statements, and the events, and the marketing, and the personas, and everything else, and you just look at it at its most fundamental level, a community is a group of people who have chosen to come together to impact their lives.That’s what a community is. For common purpose, a shared purpose, and to know and to be known, in and with each other. And so these people were expressing that sense that they didn’t feel like they mattered.And so, of course, from Dr. Maya Angelou, and this, by the way, is so, so true. You can give the most important didactic tutorial workshop you ever given your entire life. You feel like you’re on fire and then there’s a person from the audience who wants to talk to you about what you talked about and you don’t know they want to talk to you, but they’ve been waiting and you just walk right past them.Maybe you’re done with your presentation, you might have to use the facilities. Maybe you want to take a little break. Maybe you’re missing a few phone calls and you just walk right past that person.Well, I promise you that person’s not going to remember what you talked about. They’re not going to remember your APIs. They’re not going to remember anything you mentioned, but they’re going to remember exactly what you didn’t care about them, that you walked right past them and that’s going to be the end of that relationship.That’s a weighty thing to carry on one’s shoulders. That sense of responsibility, that sense that we are invested with the ability and the opportunity to weave networks of meaning, networks of community. But there’s a lot of power in that.So having said that, what I want to talk about are really two areas that have been really important in my life and I think have great value in our life as dev rel. Servant leadership and adaptive problem-solving. What they are, and how do we incorporate them.So first of all, servant leadership. Ken Blanchard who wrote one of the books on servant leadership simply describes it as the idea that you work for them and they don’t work for you.And in essence, that is a paradigmatic shift in the operating principles of organizational life because it’s usually the people with the titles, it’s usually the people with the seniority, the people who have the knowledge, whatever that knowledge is, who get to make the decisions in a top-down, bureaucratic, hierarchical, all those fancy words which we don’t like kind of fashion.And servant leadership is essentially saying the job of that person, the person who has the mic, their job is to actually understand what the needs are of the people they serve and reflect back those needs to them.Or in other words, as one of our colleagues who’s already mentioned once, this was not planned. Emily Freeman tweeted, “DevRel is servant leadership more than anything else. It’s taking the hits and speaking on behalf of a greater community.”It’s reflecting back the voices, the needs, the wants. It’s reflecting back the community back to them. It’s using yourself, in a sense, as an amplifier for that community.And another perspective a little bit older than Emily or from Ken Blanchard. About 800 years ago, a teacher in the Jewish tradition named Maimonides, a Jewish philosopher, a physician, a scientist, he wrote very simply that, “All who engage in the needs of the community, it is like they are engaged in the words of the Torah.” Sorry, I’m a rabbi. I still have to do it by, I get paid for it every word.But it’s, those who engage in the needs of the community, it is as if they’re engaged in the words of the Torah. Within the construct of Jewish theology, to say you’re engaged in the words of the Torah is essentially to say, which is the foundational text of Jewish civilization, is essentially to say you’re doing something awesome. Keep on doing it. It is amazing. Do it, do it, do it. That was written about 800 years ago or so.So we know it’s really important. We know it’s really good to do, but can we get a little specificity here? So let’s try and do that.So the first thing which is really important is teaching does not equal preaching. Sharing does not equal selling. And educating is not the same thing as persuading. That ultimately what it comes down to is you’re trying to share the tools, the resources, the frameworks that you have that can make their lives, their work more productive.But when you start crossing over that border, and sometimes that border can be a bit porous, right? Because we’re invested in our work, hopefully, and we care about what we’re doing, hopefully, and we want to share it. We want to share the good word and sometimes that good word can be a little preachy. I’m sorry if I’m being a little preachy, but that’s what I do.But knowing the difference between teaching and preaching. And so how do you know that difference? Well, one of my teachers back in and rabbinical school always told us to keep the following question in your mind when you’re constructing lessons or sermons, which is, what do the people in my community need to know?Not what do I want to share. Not what are the insights I get from that latest “New York Times” article I read, but that’s not what I’m getting paid for. What I’m getting paid for is to find out what are the gaps in the community and how can I in my domain knowledge, my expertise, help fill in those gaps. That’s my role.To understand what’s missing and to be a voice in what’s missing, but not only what I’m interested in. And when you do that, if this works, when you do that, you start thinking more like a moon and less like the sun.Because ultimately, this is a Dr. Mary Lou Jepsen. She’s a professor. She has a lot of work on light, on the moon, really interesting stuff. And so she said that reflecting sunlight on the earth to the moon, gives enough lights that all of humanity can see.The brilliance of the moon is dictated by how much light it reflects back to others. The more brilliant the moon, it means the more brilliant is the light around it.And when you lift up the voices in your community, you’re not diminishing your voice, you’re not diminishing your persona. You’re actually raising your voice also. It’s not just like I’m lifting up the community and I’m here. It’s that we’re all being lifted up together in the pursuit of our community work.And when you think of it in the construct of that moon, it really is about that sense of shared voice, of bringing up and lifting up the voices of those who are around you in your community, and you reflect the light of your community.And when you do that, you understand that your success in your role, your metrics, however you want to define it, is bound up in the success of your community.And also, furthermore, some more Jewish teachings. Sorry, this is the last one. Another idea from the concept of the moon. There’s really two aspects. One is you’re lifting up the light of your community, you’re reflecting back.There’s another really brilliant insight, and this comes from a rabbi about 900 years ago, Rabbi Shlomo Yitzchaki, who lived in Provence, France, beautiful part of the world by the way. You should go visit.And he’s talking about the fact that the Jewish calendar if you don’t know is a lunar calendar with solar modifications. And the lunar calendar is interesting because when’s the start of the moon? When’s the start of the month according to the moon? Does anyone know?Is it that when the moon is at it’s biggest, what? When it’s at its smallest, visibly, right? When it’s the sliver of the light, that’s the beginning of the new month. Not when it’s at its most brilliant, but when it’s at its smallest.And so Rashi writes. When the moon is renewing itself. And I love Hebrew because the Hebrew is like inflexive. It’s like when the moon is doing it to itself, when it’s renewing itself, that for you becomes the new month. That’s calendrically, the new month for you.And so the idea that the moon has a time for renewal I think teaches us also, we need to find time for regular renewal. That doing this kind of work, reflecting the light of others, being that voice that reflects with that amplifier, can be exhausting.It’s tiring in the clergy, that’s why I switched jobs maybe, and it’s also tiring in dev rel. That it really requires a sense of finding that time for yourself to rejuvenate and be encouraged in that by your supervisors, by your team, that that’s perfectly healthy and normal.Lesson number two, idea number two, adaptive problem-solving. We can’t get into the fullness of adaptive problem solving, but a couple character traits that I think are essential, that I learned in my life, that contribute to healthy thinking around and being adaptive around problems is this marshmallow test. Who’s heard of the marshmallow test?So, if you are a parent of young children, you don’t need the research to tell you the results of this. The marshmallow test is essentially you take a child, excuse me, you take a child, put them in a room, right? Put a couple marshmallows in front of them and you say, “Don’t touch those marshmallows. It’s okay. It’s going to be fine. I’ll be back in like few minutes, 5, 10 minutes, and I’m going to give you more marshmallows.”If you are a parent of young children, what’s going to happen to those two marshmallows sitting on the plate in front of them? Will they still be there? No. If you were me, they might not still be there, let alone as parent of a small child.And because the marshmallow in front of you speaks a lot louder to you than the marshmallows that are beneath the marshmallow in front of you. That’s really deep. We’re getting deep with marshmallows. And because you’re looking at that marshmallow and what you’re not doing is you’re not taking that deep breath.You’re not inhaling. You’re not exhaling. You’re not pausing. You’re just thinking about that marshmallow and answering the call of that marshmallow immediately.And all too often I find that I have the temptation to do the same thing when a challenge comes on our Slack community channel and somebody says, “your API docs are,” if you’re British, “are shite” because we have a lot of British people and or “it just is horrible and I can’t find anything.” Or somebody says, “This doesn’t work for me,” or you get accosted in the hallway after a talk.You want to respond right away, you want to jump on it. But if you take that deep breath, if you just think for a minute you can realize that often the question that is presented is not always the question that’s being asked. Does that make sense?That was a deep lesson for me as a rabbi that the question that was being presented is not always the question that is actually being asked and really a question just leads to another question.Oftentimes when I get asked a question, I usually answer the question with a question because I want to really fully understand what is animating that question.And I think, by the way, this is all the more true in technical communities because in technical communities, technical problems are what we often deal with. We often deal with technical problems and we can answer and address only that technical problem, but under that technical problem who’s presenting it?A human being. Is a human being only a technical thing? No, no. Human beings are irrational, human beings are emotional, human beings are human.And if we sometimes understand that underneath the technical question is a human that might be looking for a sense of matterness, might be looking for a sense of connection, might want to know that their voice, that their presence is felt, well, then answering the technical problem immediately and right away it doesn’t actually address that problem.So to wrap it up, servant leadership and adaptive problem solving, they’re essentially you work for the community. Teaching is always greater than preaching.And try and be like the moon. Reflect the light of others. Renew yourself regularly, to breathe before responding. I have a hard time doing that, as a former New Yorker, like, I want to respond right away, but you got to breathe.And then answer a question with a question. There’s always another question. It’s not, did you have a good answer today? it’s, did you have a good question today? It’s about the questions, not about the answers. That’s my biggest insight I think if I can share it.And explore the underlying problem, that what presents itself is often that, which is not the actual full presentation. There’s usually something deeper, something is driving that question.If you can get to that, you can really form meaningful connections. Thank you very much.","[(0, 0.48759398), (1, 0.08884809), (2, 0.42355797)]",0.48759398,0.08884809,0.42355797
